#include <hxcpp.h>

#ifndef INCLUDED_Control
#include <Control.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Device
#include <Device.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputDigital
#include <flixel/input/actions/FlxActionInputDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionManager
#include <flixel/input/actions/FlxActionManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_948b5caa279cd923_215_new,"Controls","new",0x4f8de688,"Controls.new","Controls.hx",215,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_305_get_UP,"Controls","get_UP",0xb958147c,"Controls.get_UP","Controls.hx",305,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_310_get_LEFT,"Controls","get_LEFT",0xc8e82468,"Controls.get_LEFT","Controls.hx",310,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_315_get_RIGHT,"Controls","get_RIGHT",0x7944c43b,"Controls.get_RIGHT","Controls.hx",315,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_320_get_DOWN,"Controls","get_DOWN",0xc3a614c3,"Controls.get_DOWN","Controls.hx",320,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_325_get_UP_P,"Controls","get_UP_P",0xcee37e8d,"Controls.get_UP_P","Controls.hx",325,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_330_get_LEFT_P,"Controls","get_LEFT_P",0xee886179,"Controls.get_LEFT_P","Controls.hx",330,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_335_get_RIGHT_P,"Controls","get_RIGHT_P",0xe72adc0c,"Controls.get_RIGHT_P","Controls.hx",335,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_340_get_DOWN_P,"Controls","get_DOWN_P",0x88e75e94,"Controls.get_DOWN_P","Controls.hx",340,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_345_get_UP_R,"Controls","get_UP_R",0xcee37e8f,"Controls.get_UP_R","Controls.hx",345,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_350_get_LEFT_R,"Controls","get_LEFT_R",0xee88617b,"Controls.get_LEFT_R","Controls.hx",350,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_355_get_RIGHT_R,"Controls","get_RIGHT_R",0xe72adc0e,"Controls.get_RIGHT_R","Controls.hx",355,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_360_get_DOWN_R,"Controls","get_DOWN_R",0x88e75e96,"Controls.get_DOWN_R","Controls.hx",360,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_365_get_ACCEPT,"Controls","get_ACCEPT",0x5fc72da9,"Controls.get_ACCEPT","Controls.hx",365,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_370_get_BACK,"Controls","get_BACK",0xc248f688,"Controls.get_BACK","Controls.hx",370,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_375_get_PAUSE,"Controls","get_PAUSE",0x4d388f55,"Controls.get_PAUSE","Controls.hx",375,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_380_get_RESET,"Controls","get_RESET",0x76a9022e,"Controls.get_RESET","Controls.hx",380,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_385_get_CHEAT,"Controls","get_CHEAT",0xd5974f72,"Controls.get_CHEAT","Controls.hx",385,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_392_get_L1,"Controls","get_L1",0xb9580c86,"Controls.get_L1","Controls.hx",392,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_397_get_L1_P,"Controls","get_L1_P",0xc8d90d17,"Controls.get_L1_P","Controls.hx",397,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_402_get_L1_R,"Controls","get_L1_R",0xc8d90d19,"Controls.get_L1_R","Controls.hx",402,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_407_get_D1,"Controls","get_D1",0xb958058e,"Controls.get_D1","Controls.hx",407,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_412_get_D1_P,"Controls","get_D1_P",0xc38f581f,"Controls.get_D1_P","Controls.hx",412,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_417_get_D1_R,"Controls","get_D1_R",0xc38f5821,"Controls.get_D1_R","Controls.hx",417,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_422_get_R1,"Controls","get_R1",0xb95811c0,"Controls.get_R1","Controls.hx",422,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_427_get_R1_P,"Controls","get_R1_P",0xccd054d1,"Controls.get_R1_P","Controls.hx",427,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_432_get_R1_R,"Controls","get_R1_R",0xccd054d3,"Controls.get_R1_R","Controls.hx",432,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_438_get_L2,"Controls","get_L2",0xb9580c87,"Controls.get_L2","Controls.hx",438,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_443_get_L2_P,"Controls","get_L2_P",0xc8d9cf58,"Controls.get_L2_P","Controls.hx",443,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_448_get_L2_R,"Controls","get_L2_R",0xc8d9cf5a,"Controls.get_L2_R","Controls.hx",448,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_453_get_U1,"Controls","get_U1",0xb958145d,"Controls.get_U1","Controls.hx",453,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_458_get_U1_P,"Controls","get_U1_P",0xcecbf8ae,"Controls.get_U1_P","Controls.hx",458,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_463_get_U1_R,"Controls","get_U1_R",0xcecbf8b0,"Controls.get_U1_R","Controls.hx",463,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_468_get_R2,"Controls","get_R2",0xb95811c1,"Controls.get_R2","Controls.hx",468,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_473_get_R2_P,"Controls","get_R2_P",0xccd11712,"Controls.get_R2_P","Controls.hx",473,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_478_get_R2_R,"Controls","get_R2_R",0xccd11714,"Controls.get_R2_R","Controls.hx",478,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_511_get_N0,"Controls","get_N0",0xb9580e43,"Controls.get_N0","Controls.hx",511,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_512_get_N1,"Controls","get_N1",0xb9580e44,"Controls.get_N1","Controls.hx",512,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_513_get_N2,"Controls","get_N2",0xb9580e45,"Controls.get_N2","Controls.hx",513,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_514_get_N3,"Controls","get_N3",0xb9580e46,"Controls.get_N3","Controls.hx",514,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_515_get_N4,"Controls","get_N4",0xb9580e47,"Controls.get_N4","Controls.hx",515,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_516_get_N5,"Controls","get_N5",0xb9580e48,"Controls.get_N5","Controls.hx",516,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_517_get_N6,"Controls","get_N6",0xb9580e49,"Controls.get_N6","Controls.hx",517,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_518_get_N7,"Controls","get_N7",0xb9580e4a,"Controls.get_N7","Controls.hx",518,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_519_get_N8,"Controls","get_N8",0xb9580e4b,"Controls.get_N8","Controls.hx",519,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_521_get_N0_P,"Controls","get_N0_P",0xca2ab814,"Controls.get_N0_P","Controls.hx",521,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_522_get_N1_P,"Controls","get_N1_P",0xca2b7a55,"Controls.get_N1_P","Controls.hx",522,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_523_get_N2_P,"Controls","get_N2_P",0xca2c3c96,"Controls.get_N2_P","Controls.hx",523,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_524_get_N3_P,"Controls","get_N3_P",0xca2cfed7,"Controls.get_N3_P","Controls.hx",524,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_525_get_N4_P,"Controls","get_N4_P",0xca2dc118,"Controls.get_N4_P","Controls.hx",525,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_526_get_N5_P,"Controls","get_N5_P",0xca2e8359,"Controls.get_N5_P","Controls.hx",526,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_527_get_N6_P,"Controls","get_N6_P",0xca2f459a,"Controls.get_N6_P","Controls.hx",527,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_528_get_N7_P,"Controls","get_N7_P",0xca3007db,"Controls.get_N7_P","Controls.hx",528,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_529_get_N8_P,"Controls","get_N8_P",0xca30ca1c,"Controls.get_N8_P","Controls.hx",529,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_531_get_N0_R,"Controls","get_N0_R",0xca2ab816,"Controls.get_N0_R","Controls.hx",531,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_532_get_N1_R,"Controls","get_N1_R",0xca2b7a57,"Controls.get_N1_R","Controls.hx",532,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_533_get_N2_R,"Controls","get_N2_R",0xca2c3c98,"Controls.get_N2_R","Controls.hx",533,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_534_get_N3_R,"Controls","get_N3_R",0xca2cfed9,"Controls.get_N3_R","Controls.hx",534,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_535_get_N4_R,"Controls","get_N4_R",0xca2dc11a,"Controls.get_N4_R","Controls.hx",535,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_536_get_N5_R,"Controls","get_N5_R",0xca2e835b,"Controls.get_N5_R","Controls.hx",536,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_537_get_N6_R,"Controls","get_N6_R",0xca2f459c,"Controls.get_N6_R","Controls.hx",537,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_538_get_N7_R,"Controls","get_N7_R",0xca3007dd,"Controls.get_N7_R","Controls.hx",538,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_539_get_N8_R,"Controls","get_N8_R",0xca30ca1e,"Controls.get_N8_R","Controls.hx",539,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_707_update,"Controls","update",0x9d2db8e1,"Controls.update","Controls.hx",707,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_717_checkByName,"Controls","checkByName",0xbe587cd2,"Controls.checkByName","Controls.hx",717,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_721_getDialogueName,"Controls","getDialogueName",0xe1263f61,"Controls.getDialogueName","Controls.hx",721,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_733_getDialogueNameFromToken,"Controls","getDialogueNameFromToken",0x6458998e,"Controls.getDialogueNameFromToken","Controls.hx",733,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_738_getActionFromControl,"Controls","getActionFromControl",0xa2e9ae5f,"Controls.getActionFromControl","Controls.hx",738,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_783_forEachBound,"Controls","forEachBound",0x9a98930c,"Controls.forEachBound","Controls.hx",783,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_877_replaceBinding,"Controls","replaceBinding",0x45096449,"Controls.replaceBinding","Controls.hx",877,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_898_copyFrom,"Controls","copyFrom",0xdf1da497,"Controls.copyFrom","Controls.hx",898,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_945_copyTo,"Controls","copyTo",0xdf5b4f68,"Controls.copyTo","Controls.hx",945,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_950_mergeKeyboardScheme,"Controls","mergeKeyboardScheme",0x61e2372c,"Controls.mergeKeyboardScheme","Controls.hx",950,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_969_bindKeys,"Controls","bindKeys",0xcb8dbf29,"Controls.bindKeys","Controls.hx",969,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_982_unbindKeys,"Controls","unbindKeys",0xec4b8c82,"Controls.unbindKeys","Controls.hx",982,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1006_setKeyboardScheme,"Controls","setKeyboardScheme",0x039bdb96,"Controls.setKeyboardScheme","Controls.hx",1006,0x0ab041e8)
static const int _hx_array_data_116e4296_3986[] = {
	(int)65,
};
static const int _hx_array_data_116e4296_3987[] = {
	(int)83,
};
static const int _hx_array_data_116e4296_3988[] = {
	(int)68,
};
static const int _hx_array_data_116e4296_3989[] = {
	(int)70,
};
static const int _hx_array_data_116e4296_3990[] = {
	(int)32,
};
static const int _hx_array_data_116e4296_3991[] = {
	(int)72,
};
static const int _hx_array_data_116e4296_3992[] = {
	(int)74,
};
static const int _hx_array_data_116e4296_3993[] = {
	(int)75,
};
static const int _hx_array_data_116e4296_3994[] = {
	(int)76,
};
static const int _hx_array_data_116e4296_3995[] = {
	(int)74,(int)38,
};
static const int _hx_array_data_116e4296_3996[] = {
	(int)70,(int)40,
};
static const int _hx_array_data_116e4296_3997[] = {
	(int)68,(int)37,
};
static const int _hx_array_data_116e4296_3998[] = {
	(int)75,(int)39,
};
static const int _hx_array_data_116e4296_3999[] = {
	(int)90,(int)32,(int)13,
};
static const int _hx_array_data_116e4296_4000[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_4001[] = {
	(int)80,(int)13,(int)27,
};
static const int _hx_array_data_116e4296_4002[] = {
	(int)82,
};
static const int _hx_array_data_116e4296_4003[] = {
	(int)83,
};
static const int _hx_array_data_116e4296_4004[] = {
	(int)68,
};
static const int _hx_array_data_116e4296_4005[] = {
	(int)70,
};
static const int _hx_array_data_116e4296_4006[] = {
	(int)74,
};
static const int _hx_array_data_116e4296_4007[] = {
	(int)75,
};
static const int _hx_array_data_116e4296_4008[] = {
	(int)76,
};
static const int _hx_array_data_116e4296_4009[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_116e4296_4010[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_116e4296_4011[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_116e4296_4012[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_116e4296_4013[] = {
	(int)71,(int)90,(int)32,(int)13,
};
static const int _hx_array_data_116e4296_4014[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_4015[] = {
	(int)82,
};
static const int _hx_array_data_116e4296_4016[] = {
	(int)65,
};
static const int _hx_array_data_116e4296_4017[] = {
	(int)83,
};
static const int _hx_array_data_116e4296_4018[] = {
	(int)68,
};
static const int _hx_array_data_116e4296_4019[] = {
	(int)37,
};
static const int _hx_array_data_116e4296_4020[] = {
	(int)40,
};
static const int _hx_array_data_116e4296_4021[] = {
	(int)39,
};
static const int _hx_array_data_116e4296_4022[] = {
	(int)38,
};
static const int _hx_array_data_116e4296_4023[] = {
	(int)40,
};
static const int _hx_array_data_116e4296_4024[] = {
	(int)37,
};
static const int _hx_array_data_116e4296_4025[] = {
	(int)39,
};
static const int _hx_array_data_116e4296_4026[] = {
	(int)79,
};
static const int _hx_array_data_116e4296_4027[] = {
	(int)80,
};
static const int _hx_array_data_116e4296_4028[] = {
	(int)13,
};
static const int _hx_array_data_116e4296_4029[] = {
	(int)8,
};
static const int _hx_array_data_116e4296_4030[] = {
	(int)98,(int)49,(int)38,
};
static const int _hx_array_data_116e4296_4031[] = {
	(int)88,(int)40,
};
static const int _hx_array_data_116e4296_4032[] = {
	(int)90,(int)37,
};
static const int _hx_array_data_116e4296_4033[] = {
	(int)99,(int)50,(int)39,
};
static const int _hx_array_data_116e4296_4034[] = {
	(int)32,(int)13,
};
static const int _hx_array_data_116e4296_4035[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_116e4296_4036[] = {
	(int)80,(int)13,(int)27,
};
static const int _hx_array_data_116e4296_4037[] = {
	(int)82,
};
static const int _hx_array_data_116e4296_4038[] = {
	(int)90,
};
static const int _hx_array_data_116e4296_4039[] = {
	(int)88,
};
static const int _hx_array_data_116e4296_4040[] = {
	(int)67,
};
static const int _hx_array_data_116e4296_4041[] = {
	(int)97,(int)49,
};
static const int _hx_array_data_116e4296_4042[] = {
	(int)98,(int)50,
};
static const int _hx_array_data_116e4296_4043[] = {
	(int)99,(int)51,
};
static const int _hx_array_data_116e4296_4044[] = {
	(int)97,(int)49,
};
static const int _hx_array_data_116e4296_4045[] = {
	(int)98,(int)50,
};
static const int _hx_array_data_116e4296_4046[] = {
	(int)99,(int)51,
};
static const int _hx_array_data_116e4296_4047[] = {
	(int)13,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1174_removeKeyboard,"Controls","removeKeyboard",0xd2dac3e3,"Controls.removeKeyboard","Controls.hx",1174,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1187_addGamepad,"Controls","addGamepad",0xa2c68b58,"Controls.addGamepad","Controls.hx",1187,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1200_addGamepadLiteral,"Controls","addGamepadLiteral",0x50b4e0f7,"Controls.addGamepadLiteral","Controls.hx",1200,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1213_removeGamepad,"Controls","removeGamepad",0xfdf294e5,"Controls.removeGamepad","Controls.hx",1213,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1231_addDefaultGamepad,"Controls","addDefaultGamepad",0xaa5e6409,"Controls.addDefaultGamepad","Controls.hx",1231,0x0ab041e8)
static const int _hx_array_data_116e4296_4246[] = {
	(int)0,
};
static const int _hx_array_data_116e4296_4247[] = {
	(int)1,
};
static const int _hx_array_data_116e4296_4248[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_116e4296_4249[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_116e4296_4250[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_116e4296_4251[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_116e4296_4252[] = {
	(int)7,
};
static const int _hx_array_data_116e4296_4253[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1265_bindButtons,"Controls","bindButtons",0x94dee42c,"Controls.bindButtons","Controls.hx",1265,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1278_unbindButtons,"Controls","unbindButtons",0x83d33473,"Controls.unbindButtons","Controls.hx",1278,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1302_getInputsFor,"Controls","getInputsFor",0xa3571ac2,"Controls.getInputsFor","Controls.hx",1302,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1326_removeDevice,"Controls","removeDevice",0x4c1b5cd2,"Controls.removeDevice","Controls.hx",1326,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_770_init,"Controls","init",0x495487e8,"Controls.init","Controls.hx",770,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_990_addKeys,"Controls","addKeys",0xd0486edd,"Controls.addKeys","Controls.hx",990,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_995_removeKeys,"Controls","removeKeys",0x75dc9b30,"Controls.removeKeys","Controls.hx",995,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1286_addButtons,"Controls","addButtons",0xe3b5fcf8,"Controls.addButtons","Controls.hx",1286,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1291_removeButtons,"Controls","removeButtons",0x3ee20685,"Controls.removeButtons","Controls.hx",1291,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1337_isDevice,"Controls","isDevice",0xe09e10f8,"Controls.isDevice","Controls.hx",1337,0x0ab041e8)
HX_LOCAL_STACK_FRAME(_hx_pos_948b5caa279cd923_1346_isGamepad,"Controls","isGamepad",0x5bcd81ff,"Controls.isGamepad","Controls.hx",1346,0x0ab041e8)

void Controls_obj::__construct(::String name, ::KeyboardScheme __o_scheme){
            		 ::KeyboardScheme scheme = __o_scheme;
            		if (::hx::IsNull(__o_scheme)) scheme = ::KeyboardScheme_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_215_new)
HXLINE( 300)		this->keyboardScheme = ::KeyboardScheme_obj::None_dyn();
HXLINE( 299)		this->gamepadsAdded = ::Array_obj< int >::__new(0);
HXLINE( 294)		this->byName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 290)		this->_n8R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n8-release",44,0f,9a,2b),null());
HXLINE( 289)		this->_n7R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n7-release",43,a6,a8,58),null());
HXLINE( 288)		this->_n6R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n6-release",42,3d,b7,85),null());
HXLINE( 287)		this->_n5R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n5-release",41,d4,c5,b2),null());
HXLINE( 286)		this->_n4R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n4-release",40,6b,d4,df),null());
HXLINE( 285)		this->_n3R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n3-release",3f,02,e3,0c),null());
HXLINE( 284)		this->_n2R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n2-release",3e,99,f1,39),null());
HXLINE( 283)		this->_n1R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n1-release",3d,30,00,67),null());
HXLINE( 282)		this->_n0R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n0-release",3c,c7,0e,94),null());
HXLINE( 280)		this->_n8P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n8-press",c0,93,f6,72),null());
HXLINE( 279)		this->_n7P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n7-press",ff,1c,61,49),null());
HXLINE( 278)		this->_n6P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n6-press",3e,a6,cb,1f),null());
HXLINE( 277)		this->_n5P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n5-press",7d,2f,36,f6),null());
HXLINE( 276)		this->_n4P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n4-press",bc,b8,a0,cc),null());
HXLINE( 275)		this->_n3P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n3-press",fb,41,0b,a3),null());
HXLINE( 274)		this->_n2P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n2-press",3a,cb,75,79),null());
HXLINE( 273)		this->_n1P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n1-press",79,54,e0,4f),null());
HXLINE( 272)		this->_n0P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n0-press",b8,dd,4a,26),null());
HXLINE( 270)		this->_n8 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n8",0a,60,00,00),null());
HXLINE( 269)		this->_n7 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n7",09,60,00,00),null());
HXLINE( 268)		this->_n6 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n6",08,60,00,00),null());
HXLINE( 267)		this->_n5 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n5",07,60,00,00),null());
HXLINE( 266)		this->_n4 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n4",06,60,00,00),null());
HXLINE( 265)		this->_n3 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n3",05,60,00,00),null());
HXLINE( 264)		this->_n2 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n2",04,60,00,00),null());
HXLINE( 263)		this->_n1 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n1",03,60,00,00),null());
HXLINE( 262)		this->_n0 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("n0",02,60,00,00),null());
HXLINE( 259)		this->_r2R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r2-release",ba,78,1b,3b),null());
HXLINE( 258)		this->_r2P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r2-press",b6,93,3f,5e),null());
HXLINE( 257)		this->_r2 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r2",80,63,00,00),null());
HXLINE( 255)		this->_dR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("d-release",9e,99,18,cd),null());
HXLINE( 254)		this->_dP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("d-press",9a,f3,f9,04),null());
HXLINE( 253)		this->_d =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("d",64,00,00,00),null());
HXLINE( 251)		this->_l2R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l2-release",80,a9,5c,b9),null());
HXLINE( 250)		this->_l2P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l2-press",fc,e6,10,07),null());
HXLINE( 249)		this->_l2 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l2",46,5e,00,00),null());
HXLINE( 247)		this->_r1R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r1-release",b9,0f,2a,68),null());
HXLINE( 246)		this->_r1P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r1-press",f5,1c,aa,34),null());
HXLINE( 245)		this->_r1 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("r1",7f,63,00,00),null());
HXLINE( 243)		this->_uR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("u-release",af,92,20,cf),null());
HXLINE( 242)		this->_uP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("u-press",6b,d6,e6,c7),null());
HXLINE( 241)		this->_u =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("u",75,00,00,00),null());
HXLINE( 239)		this->_l1R =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l1-release",7f,40,6b,e6),null());
HXLINE( 238)		this->_l1P =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l1-press",3b,70,7b,dd),null());
HXLINE( 237)		this->_l1 =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("l1",45,5e,00,00),null());
HXLINE( 233)		this->_cheat =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("cheat",13,97,b6,45),null());
HXLINE( 232)		this->_reset =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("reset",cf,49,c8,e6),null());
HXLINE( 231)		this->_pause =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("pause",f6,d6,57,bd),null());
HXLINE( 230)		this->_back =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),null());
HXLINE( 229)		this->_accept =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("accept",08,93,06,0b),null());
HXLINE( 228)		this->_downR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-release",9c,bf,5b,fc),null());
HXLINE( 227)		this->_rightR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-release",16,dd,28,fb),null());
HXLINE( 226)		this->_leftR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-release",41,7c,5d,2e),null());
HXLINE( 225)		this->_upR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-release",95,4e,72,92),null());
HXLINE( 224)		this->_downP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-press",18,fe,06,cf),null());
HXLINE( 223)		this->_rightP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-press",12,e9,87,fb),null());
HXLINE( 222)		this->_leftP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-press",7d,d7,13,c1),null());
HXLINE( 221)		this->_upP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-press",d1,ac,09,1c),null());
HXLINE( 220)		this->_down =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down",62,f8,6d,42),null());
HXLINE( 219)		this->_right =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right",dc,0b,64,e9),null());
HXLINE( 218)		this->_left =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left",07,08,b0,47),null());
HXLINE( 217)		this->_up =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up",5b,66,00,00),null());
HXLINE( 545)		super::__construct(name,null(),null());
HXLINE( 547)		this->add(this->_up);
HXLINE( 548)		this->add(this->_left);
HXLINE( 549)		this->add(this->_right);
HXLINE( 550)		this->add(this->_down);
HXLINE( 551)		this->add(this->_upP);
HXLINE( 552)		this->add(this->_leftP);
HXLINE( 553)		this->add(this->_rightP);
HXLINE( 554)		this->add(this->_downP);
HXLINE( 555)		this->add(this->_upR);
HXLINE( 556)		this->add(this->_leftR);
HXLINE( 557)		this->add(this->_rightR);
HXLINE( 558)		this->add(this->_downR);
HXLINE( 559)		this->add(this->_accept);
HXLINE( 560)		this->add(this->_back);
HXLINE( 561)		this->add(this->_pause);
HXLINE( 562)		this->add(this->_reset);
HXLINE( 563)		this->add(this->_cheat);
HXLINE( 566)		this->add(this->_l1);
HXLINE( 567)		this->add(this->_l1P);
HXLINE( 568)		this->add(this->_l1R);
HXLINE( 569)		this->add(this->_d);
HXLINE( 570)		this->add(this->_dP);
HXLINE( 571)		this->add(this->_dR);
HXLINE( 572)		this->add(this->_r1);
HXLINE( 573)		this->add(this->_r1P);
HXLINE( 574)		this->add(this->_r1R);
HXLINE( 576)		this->add(this->_l2);
HXLINE( 577)		this->add(this->_l2P);
HXLINE( 578)		this->add(this->_l2R);
HXLINE( 579)		this->add(this->_u);
HXLINE( 580)		this->add(this->_uP);
HXLINE( 581)		this->add(this->_uR);
HXLINE( 582)		this->add(this->_r2);
HXLINE( 583)		this->add(this->_r2P);
HXLINE( 584)		this->add(this->_r2R);
HXLINE( 587)		this->add(this->_n0);
HXLINE( 588)		this->add(this->_n1);
HXLINE( 589)		this->add(this->_n2);
HXLINE( 590)		this->add(this->_n3);
HXLINE( 591)		this->add(this->_n4);
HXLINE( 592)		this->add(this->_n5);
HXLINE( 593)		this->add(this->_n6);
HXLINE( 594)		this->add(this->_n7);
HXLINE( 595)		this->add(this->_n8);
HXLINE( 597)		this->add(this->_n0P);
HXLINE( 598)		this->add(this->_n1P);
HXLINE( 599)		this->add(this->_n2P);
HXLINE( 600)		this->add(this->_n3P);
HXLINE( 601)		this->add(this->_n4P);
HXLINE( 602)		this->add(this->_n5P);
HXLINE( 603)		this->add(this->_n6P);
HXLINE( 604)		this->add(this->_n7P);
HXLINE( 605)		this->add(this->_n8P);
HXLINE( 607)		this->add(this->_n0R);
HXLINE( 608)		this->add(this->_n1R);
HXLINE( 609)		this->add(this->_n2R);
HXLINE( 610)		this->add(this->_n3R);
HXLINE( 611)		this->add(this->_n4R);
HXLINE( 612)		this->add(this->_n5R);
HXLINE( 613)		this->add(this->_n6R);
HXLINE( 614)		this->add(this->_n7R);
HXLINE( 615)		this->add(this->_n8R);
HXLINE( 617)		{
HXLINE( 617)			int _g = 0;
HXDLIN( 617)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 617)			while((_g < _g1->length)){
HXLINE( 617)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 617)				_g = (_g + 1);
HXLINE( 618)				this->byName->set(action->name,action);
            			}
            		}
HXLINE( 620)		this->setKeyboardScheme(scheme,false);
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x315ddd0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x315ddd0d;
	} else {
		return inClassId==(int)0x6cff3556;
	}
}

bool Controls_obj::get_UP(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_305_get_UP)
HXDLIN( 305)		return this->_up->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP,return )

bool Controls_obj::get_LEFT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_310_get_LEFT)
HXDLIN( 310)		return this->_left->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT,return )

bool Controls_obj::get_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_315_get_RIGHT)
HXDLIN( 315)		return this->_right->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT,return )

bool Controls_obj::get_DOWN(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_320_get_DOWN)
HXDLIN( 320)		return this->_down->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN,return )

bool Controls_obj::get_UP_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_325_get_UP_P)
HXDLIN( 325)		return this->_upP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_P,return )

bool Controls_obj::get_LEFT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_330_get_LEFT_P)
HXDLIN( 330)		return this->_leftP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_P,return )

bool Controls_obj::get_RIGHT_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_335_get_RIGHT_P)
HXDLIN( 335)		return this->_rightP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_P,return )

bool Controls_obj::get_DOWN_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_340_get_DOWN_P)
HXDLIN( 340)		return this->_downP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_P,return )

bool Controls_obj::get_UP_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_345_get_UP_R)
HXDLIN( 345)		return this->_upR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_R,return )

bool Controls_obj::get_LEFT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_350_get_LEFT_R)
HXDLIN( 350)		return this->_leftR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_R,return )

bool Controls_obj::get_RIGHT_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_355_get_RIGHT_R)
HXDLIN( 355)		return this->_rightR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_R,return )

bool Controls_obj::get_DOWN_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_360_get_DOWN_R)
HXDLIN( 360)		return this->_downR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_R,return )

bool Controls_obj::get_ACCEPT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_365_get_ACCEPT)
HXDLIN( 365)		return this->_accept->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_ACCEPT,return )

bool Controls_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_370_get_BACK)
HXDLIN( 370)		return this->_back->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_BACK,return )

bool Controls_obj::get_PAUSE(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_375_get_PAUSE)
HXDLIN( 375)		return this->_pause->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_PAUSE,return )

bool Controls_obj::get_RESET(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_380_get_RESET)
HXDLIN( 380)		return this->_reset->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RESET,return )

bool Controls_obj::get_CHEAT(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_385_get_CHEAT)
HXDLIN( 385)		return this->_cheat->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_CHEAT,return )

bool Controls_obj::get_L1(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_392_get_L1)
HXDLIN( 392)		return this->_l1->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L1,return )

bool Controls_obj::get_L1_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_397_get_L1_P)
HXDLIN( 397)		return this->_l1P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L1_P,return )

bool Controls_obj::get_L1_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_402_get_L1_R)
HXDLIN( 402)		return this->_l1R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L1_R,return )

bool Controls_obj::get_D1(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_407_get_D1)
HXDLIN( 407)		return this->_d->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_D1,return )

bool Controls_obj::get_D1_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_412_get_D1_P)
HXDLIN( 412)		return this->_dP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_D1_P,return )

bool Controls_obj::get_D1_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_417_get_D1_R)
HXDLIN( 417)		return this->_dR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_D1_R,return )

bool Controls_obj::get_R1(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_422_get_R1)
HXDLIN( 422)		return this->_r1->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R1,return )

bool Controls_obj::get_R1_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_427_get_R1_P)
HXDLIN( 427)		return this->_r1P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R1_P,return )

bool Controls_obj::get_R1_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_432_get_R1_R)
HXDLIN( 432)		return this->_r1R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R1_R,return )

bool Controls_obj::get_L2(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_438_get_L2)
HXDLIN( 438)		return this->_l2->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L2,return )

bool Controls_obj::get_L2_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_443_get_L2_P)
HXDLIN( 443)		return this->_l2P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L2_P,return )

bool Controls_obj::get_L2_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_448_get_L2_R)
HXDLIN( 448)		return this->_l2R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_L2_R,return )

bool Controls_obj::get_U1(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_453_get_U1)
HXDLIN( 453)		return this->_u->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_U1,return )

bool Controls_obj::get_U1_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_458_get_U1_P)
HXDLIN( 458)		return this->_uP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_U1_P,return )

bool Controls_obj::get_U1_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_463_get_U1_R)
HXDLIN( 463)		return this->_uR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_U1_R,return )

bool Controls_obj::get_R2(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_468_get_R2)
HXDLIN( 468)		return this->_r2->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R2,return )

bool Controls_obj::get_R2_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_473_get_R2_P)
HXDLIN( 473)		return this->_r2P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R2_P,return )

bool Controls_obj::get_R2_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_478_get_R2_R)
HXDLIN( 478)		return this->_r2R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_R2_R,return )

bool Controls_obj::get_N0(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_511_get_N0)
HXDLIN( 511)		return this->_n0->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N0,return )

bool Controls_obj::get_N1(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_512_get_N1)
HXDLIN( 512)		return this->_n1->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N1,return )

bool Controls_obj::get_N2(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_513_get_N2)
HXDLIN( 513)		return this->_n2->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N2,return )

bool Controls_obj::get_N3(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_514_get_N3)
HXDLIN( 514)		return this->_n3->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N3,return )

bool Controls_obj::get_N4(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_515_get_N4)
HXDLIN( 515)		return this->_n4->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N4,return )

bool Controls_obj::get_N5(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_516_get_N5)
HXDLIN( 516)		return this->_n5->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N5,return )

bool Controls_obj::get_N6(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_517_get_N6)
HXDLIN( 517)		return this->_n6->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N6,return )

bool Controls_obj::get_N7(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_518_get_N7)
HXDLIN( 518)		return this->_n7->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N7,return )

bool Controls_obj::get_N8(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_519_get_N8)
HXDLIN( 519)		return this->_n8->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N8,return )

bool Controls_obj::get_N0_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_521_get_N0_P)
HXDLIN( 521)		return this->_n0P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N0_P,return )

bool Controls_obj::get_N1_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_522_get_N1_P)
HXDLIN( 522)		return this->_n1P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N1_P,return )

bool Controls_obj::get_N2_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_523_get_N2_P)
HXDLIN( 523)		return this->_n2P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N2_P,return )

bool Controls_obj::get_N3_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_524_get_N3_P)
HXDLIN( 524)		return this->_n3P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N3_P,return )

bool Controls_obj::get_N4_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_525_get_N4_P)
HXDLIN( 525)		return this->_n4P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N4_P,return )

bool Controls_obj::get_N5_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_526_get_N5_P)
HXDLIN( 526)		return this->_n5P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N5_P,return )

bool Controls_obj::get_N6_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_527_get_N6_P)
HXDLIN( 527)		return this->_n6P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N6_P,return )

bool Controls_obj::get_N7_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_528_get_N7_P)
HXDLIN( 528)		return this->_n7P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N7_P,return )

bool Controls_obj::get_N8_P(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_529_get_N8_P)
HXDLIN( 529)		return this->_n8P->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N8_P,return )

bool Controls_obj::get_N0_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_531_get_N0_R)
HXDLIN( 531)		return this->_n0R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N0_R,return )

bool Controls_obj::get_N1_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_532_get_N1_R)
HXDLIN( 532)		return this->_n1R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N1_R,return )

bool Controls_obj::get_N2_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_533_get_N2_R)
HXDLIN( 533)		return this->_n2R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N2_R,return )

bool Controls_obj::get_N3_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_534_get_N3_R)
HXDLIN( 534)		return this->_n3R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N3_R,return )

bool Controls_obj::get_N4_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_535_get_N4_R)
HXDLIN( 535)		return this->_n4R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N4_R,return )

bool Controls_obj::get_N5_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_536_get_N5_R)
HXDLIN( 536)		return this->_n5R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N5_R,return )

bool Controls_obj::get_N6_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_537_get_N6_R)
HXDLIN( 537)		return this->_n6R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N6_R,return )

bool Controls_obj::get_N7_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_538_get_N7_R)
HXDLIN( 538)		return this->_n7R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N7_R,return )

bool Controls_obj::get_N8_R(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_539_get_N8_R)
HXDLIN( 539)		return this->_n8R->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_N8_R,return )

void Controls_obj::update(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_707_update)
HXDLIN( 707)		this->super::update();
            	}


bool Controls_obj::checkByName(::String name){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_717_checkByName)
HXDLIN( 717)		return ( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->check();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,checkByName,return )

::String Controls_obj::getDialogueName( ::flixel::input::actions::FlxActionDigital action){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_721_getDialogueName)
HXLINE( 722)		 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(0).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 723)		 ::flixel::input::actions::FlxInputDevice _g = input->device;
HXDLIN( 723)		switch((int)(_g->_hx_getIndex())){
            			case (int)3: {
HXLINE( 725)				return ((HX_("[",5b,00,00,00) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get(input->inputID)) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)4: {
HXLINE( 726)				return ((HX_("(",28,00,00,00) + ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get(input->inputID)) + HX_(")",29,00,00,00));
            			}
            			break;
            			default:{
HXLINE( 727)				 ::flixel::input::actions::FlxInputDevice device = _g;
HXDLIN( 727)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("unhandled device: ",f9,e1,62,a5) + ::Std_obj::string(device))));
            			}
            		}
HXLINE( 723)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueName,return )

::String Controls_obj::getDialogueNameFromToken(::String token){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_733_getDialogueNameFromToken)
HXDLIN( 733)		::cpp::VirtualArray params = null();
HXDLIN( 733)		return this->getDialogueName(this->getActionFromControl(::Type_obj::createEnum(::hx::ClassOf< ::Control >(),token.toUpperCase(),params)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueNameFromToken,return )

 ::flixel::input::actions::FlxActionDigital Controls_obj::getActionFromControl( ::Control control){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_738_getActionFromControl)
HXDLIN( 738)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 740)				return this->_up;
            			}
            			break;
            			case (int)1: {
HXLINE( 742)				return this->_left;
            			}
            			break;
            			case (int)2: {
HXLINE( 743)				return this->_right;
            			}
            			break;
            			case (int)3: {
HXLINE( 741)				return this->_down;
            			}
            			break;
            			case (int)4: {
HXLINE( 747)				return this->_reset;
            			}
            			break;
            			case (int)5: {
HXLINE( 744)				return this->_accept;
            			}
            			break;
            			case (int)6: {
HXLINE( 745)				return this->_back;
            			}
            			break;
            			case (int)7: {
HXLINE( 746)				return this->_pause;
            			}
            			break;
            			case (int)8: {
HXLINE( 748)				return this->_cheat;
            			}
            			break;
            			case (int)9: {
HXLINE( 750)				return this->_l1;
            			}
            			break;
            			case (int)10: {
HXLINE( 754)				return this->_u;
            			}
            			break;
            			case (int)11: {
HXLINE( 752)				return this->_r1;
            			}
            			break;
            			case (int)12: {
HXLINE( 753)				return this->_l2;
            			}
            			break;
            			case (int)13: {
HXLINE( 751)				return this->_d;
            			}
            			break;
            			case (int)14: {
HXLINE( 755)				return this->_r2;
            			}
            			break;
            			case (int)15: {
HXLINE( 757)				return this->_n0;
            			}
            			break;
            			case (int)16: {
HXLINE( 758)				return this->_n1;
            			}
            			break;
            			case (int)17: {
HXLINE( 759)				return this->_n2;
            			}
            			break;
            			case (int)18: {
HXLINE( 760)				return this->_n3;
            			}
            			break;
            			case (int)19: {
HXLINE( 761)				return this->_n4;
            			}
            			break;
            			case (int)20: {
HXLINE( 762)				return this->_n5;
            			}
            			break;
            			case (int)21: {
HXLINE( 763)				return this->_n6;
            			}
            			break;
            			case (int)22: {
HXLINE( 764)				return this->_n7;
            			}
            			break;
            			case (int)23: {
HXLINE( 765)				return this->_n8;
            			}
            			break;
            		}
HXLINE( 738)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getActionFromControl,return )

void Controls_obj::forEachBound( ::Control control, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_783_forEachBound)
HXDLIN( 783)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 786)				func(this->_up,1);
HXLINE( 787)				func(this->_upP,2);
HXLINE( 788)				func(this->_upR,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 790)				func(this->_left,1);
HXLINE( 791)				func(this->_leftP,2);
HXLINE( 792)				func(this->_leftR,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 794)				func(this->_right,1);
HXLINE( 795)				func(this->_rightP,2);
HXLINE( 796)				func(this->_rightR,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 798)				func(this->_down,1);
HXLINE( 799)				func(this->_downP,2);
HXLINE( 800)				func(this->_downR,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 808)				func(this->_reset,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 802)				func(this->_accept,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 804)				func(this->_back,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 806)				func(this->_pause,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 810)				func(this->_cheat,2);
            			}
            			break;
            			case (int)9: {
HXLINE( 813)				func(this->_l1,1);
HXLINE( 814)				func(this->_l1P,2);
HXLINE( 815)				func(this->_l1R,-1);
            			}
            			break;
            			case (int)10: {
HXLINE( 817)				func(this->_u,1);
HXLINE( 818)				func(this->_uP,2);
HXLINE( 819)				func(this->_uR,-1);
            			}
            			break;
            			case (int)11: {
HXLINE( 821)				func(this->_r1,1);
HXLINE( 822)				func(this->_r1P,2);
HXLINE( 823)				func(this->_r1R,-1);
            			}
            			break;
            			case (int)12: {
HXLINE( 825)				func(this->_l2,1);
HXLINE( 826)				func(this->_l2P,2);
HXLINE( 827)				func(this->_l2R,-1);
            			}
            			break;
            			case (int)13: {
HXLINE( 829)				func(this->_d,1);
HXLINE( 830)				func(this->_dP,2);
HXLINE( 831)				func(this->_dR,-1);
            			}
            			break;
            			case (int)14: {
HXLINE( 833)				func(this->_r2,1);
HXLINE( 834)				func(this->_r2P,2);
HXLINE( 835)				func(this->_r2R,-1);
            			}
            			break;
            			case (int)15: {
HXLINE( 838)				func(this->_n0,1);
HXLINE( 839)				func(this->_n0P,2);
HXLINE( 840)				func(this->_n0R,-1);
            			}
            			break;
            			case (int)16: {
HXLINE( 842)				func(this->_n1,1);
HXLINE( 843)				func(this->_n1P,2);
HXLINE( 844)				func(this->_n1R,-1);
            			}
            			break;
            			case (int)17: {
HXLINE( 846)				func(this->_n2,1);
HXLINE( 847)				func(this->_n2P,2);
HXLINE( 848)				func(this->_n2R,-1);
            			}
            			break;
            			case (int)18: {
HXLINE( 850)				func(this->_n3,1);
HXLINE( 851)				func(this->_n3P,2);
HXLINE( 852)				func(this->_n3R,-1);
            			}
            			break;
            			case (int)19: {
HXLINE( 854)				func(this->_n4,1);
HXLINE( 855)				func(this->_n4P,2);
HXLINE( 856)				func(this->_n4R,-1);
            			}
            			break;
            			case (int)20: {
HXLINE( 858)				func(this->_n5,1);
HXLINE( 859)				func(this->_n5P,2);
HXLINE( 860)				func(this->_n5R,-1);
            			}
            			break;
            			case (int)21: {
HXLINE( 862)				func(this->_n6,1);
HXLINE( 863)				func(this->_n6P,2);
HXLINE( 864)				func(this->_n6R,-1);
            			}
            			break;
            			case (int)22: {
HXLINE( 866)				func(this->_n7,1);
HXLINE( 867)				func(this->_n7P,2);
HXLINE( 868)				func(this->_n7R,-1);
            			}
            			break;
            			case (int)23: {
HXLINE( 870)				func(this->_n8,1);
HXLINE( 871)				func(this->_n8P,2);
HXLINE( 872)				func(this->_n8R,-1);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,forEachBound,(void))

void Controls_obj::replaceBinding( ::Control control, ::Device device, ::Dynamic toAdd, ::Dynamic toRemove){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_877_replaceBinding)
HXLINE( 878)		if (::hx::IsEq( toAdd,toRemove )) {
HXLINE( 879)			return;
            		}
HXLINE( 881)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 884)				if (::hx::IsNotNull( toRemove )) {
HXLINE( 885)					this->unbindKeys(control,::Array_obj< int >::__new(1)->init(0,toRemove));
            				}
HXLINE( 886)				if (::hx::IsNotNull( toAdd )) {
HXLINE( 887)					this->bindKeys(control,::Array_obj< int >::__new(1)->init(0,toAdd));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 889)				int id = device->_hx_getInt(0);
HXDLIN( 889)				{
HXLINE( 890)					if (::hx::IsNotNull( toRemove )) {
HXLINE( 891)						this->unbindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toRemove));
            					}
HXLINE( 892)					if (::hx::IsNotNull( toAdd )) {
HXLINE( 893)						this->bindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toAdd));
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,replaceBinding,(void))

void Controls_obj::copyFrom( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_898_copyFrom)
HXLINE( 900)		{
HXLINE( 900)			::Dynamic map = controls->byName;
HXDLIN( 900)			::Dynamic _g_map = map;
HXDLIN( 900)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 900)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 900)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital _g1_value = ( ( ::flixel::input::actions::FlxActionDigital)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 900)				::String _g1_key = key;
HXDLIN( 900)				::String name = _g1_key;
HXDLIN( 900)				 ::flixel::input::actions::FlxActionDigital action = _g1_value;
HXLINE( 902)				{
HXLINE( 902)					int _g = 0;
HXDLIN( 902)					::Array< ::Dynamic> _g1 = action->inputs;
HXDLIN( 902)					while((_g < _g1->length)){
HXLINE( 902)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 902)						_g = (_g + 1);
HXLINE( 904)						bool _hx_tmp;
HXDLIN( 904)						if (::hx::IsNotNull( device )) {
HXLINE( 904)							_hx_tmp = ::Controls_obj::isDevice(input,device);
            						}
            						else {
HXLINE( 904)							_hx_tmp = true;
            						}
HXDLIN( 904)						if (_hx_tmp) {
HXLINE( 905)							( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->add(( ( ::flixel::input::actions::FlxActionInputDigital)(input) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 920)		if (::hx::IsNull( device )) {
HXLINE( 925)			{
HXLINE( 925)				int _g = 0;
HXDLIN( 925)				::Array< int > _g1 = controls->gamepadsAdded;
HXDLIN( 925)				while((_g < _g1->length)){
HXLINE( 925)					int gamepad = _g1->__get(_g);
HXDLIN( 925)					_g = (_g + 1);
HXLINE( 926)					if (!(this->gamepadsAdded->contains(gamepad))) {
HXLINE( 927)						this->gamepadsAdded->push(gamepad);
            					}
            				}
            			}
HXLINE( 934)			this->mergeKeyboardScheme(controls->keyboardScheme);
            		}
            		else {
HXLINE( 920)			switch((int)(device->_hx_getIndex())){
            				case (int)0: {
HXLINE( 939)					this->mergeKeyboardScheme(controls->keyboardScheme);
            				}
            				break;
            				case (int)1: {
HXLINE( 936)					int id = device->_hx_getInt(0);
HXLINE( 937)					this->gamepadsAdded->push(id);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyFrom,(void))

void Controls_obj::copyTo( ::Controls controls, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_945_copyTo)
HXDLIN( 945)		controls->copyFrom(::hx::ObjectPtr<OBJ_>(this),device);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyTo,(void))

void Controls_obj::mergeKeyboardScheme( ::KeyboardScheme scheme){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_950_mergeKeyboardScheme)
HXDLIN( 950)		if (::hx::IsPointerNotEq( scheme,::KeyboardScheme_obj::None_dyn() )) {
HXLINE( 952)			if ((this->keyboardScheme->_hx_getIndex() == 2)) {
HXLINE( 955)				this->keyboardScheme = scheme;
            			}
            			else {
HXLINE( 957)				this->keyboardScheme = ::KeyboardScheme_obj::Custom_dyn();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,mergeKeyboardScheme,(void))

void Controls_obj::bindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_969_bindKeys)
HXDLIN( 969)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 969)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 969)				int state = 2;
HXDLIN( 969)				int _g = 0;
HXDLIN( 969)				while((_g < keys->length)){
HXDLIN( 969)					int key = keys->__get(_g);
HXDLIN( 969)					_g = (_g + 1);
HXDLIN( 969)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 969)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 969)				int state = 2;
HXDLIN( 969)				int _g = 0;
HXDLIN( 969)				while((_g < keys->length)){
HXDLIN( 969)					int key = keys->__get(_g);
HXDLIN( 969)					_g = (_g + 1);
HXDLIN( 969)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 969)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 969)				int state = 2;
HXDLIN( 969)				int _g = 0;
HXDLIN( 969)				while((_g < keys->length)){
HXDLIN( 969)					int key = keys->__get(_g);
HXDLIN( 969)					_g = (_g + 1);
HXDLIN( 969)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 969)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 969)				int state = 2;
HXDLIN( 969)				int _g = 0;
HXDLIN( 969)				while((_g < keys->length)){
HXDLIN( 969)					int key = keys->__get(_g);
HXDLIN( 969)					_g = (_g + 1);
HXDLIN( 969)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 969)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 969)				int state = 2;
HXDLIN( 969)				int _g = 0;
HXDLIN( 969)				while((_g < keys->length)){
HXDLIN( 969)					int key = keys->__get(_g);
HXDLIN( 969)					_g = (_g + 1);
HXDLIN( 969)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)9: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)10: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)11: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)12: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)13: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)14: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)15: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)16: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)17: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)18: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)19: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)20: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)21: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)22: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)23: {
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN( 969)					int state = 1;
HXDLIN( 969)					int _g = 0;
HXDLIN( 969)					while((_g < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g);
HXDLIN( 969)						_g = (_g + 1);
HXDLIN( 969)						action->addKey(key,state);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN( 969)					int state1 = 2;
HXDLIN( 969)					int _g1 = 0;
HXDLIN( 969)					while((_g1 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g1);
HXDLIN( 969)						_g1 = (_g1 + 1);
HXDLIN( 969)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 969)				{
HXDLIN( 969)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN( 969)					int state2 = -1;
HXDLIN( 969)					int _g2 = 0;
HXDLIN( 969)					while((_g2 < keys->length)){
HXDLIN( 969)						int key = keys->__get(_g2);
HXDLIN( 969)						_g2 = (_g2 + 1);
HXDLIN( 969)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,bindKeys,(void))

void Controls_obj::unbindKeys( ::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_982_unbindKeys)
HXDLIN( 982)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_up,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_upP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_upR,keys);
            			}
            			break;
            			case (int)1: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_left,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_leftP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_leftR,keys);
            			}
            			break;
            			case (int)2: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_right,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_rightP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_rightR,keys);
            			}
            			break;
            			case (int)3: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_down,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_downP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_downR,keys);
            			}
            			break;
            			case (int)4: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_reset,keys);
            			}
            			break;
            			case (int)5: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_accept,keys);
            			}
            			break;
            			case (int)6: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_back,keys);
            			}
            			break;
            			case (int)7: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_pause,keys);
            			}
            			break;
            			case (int)8: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_cheat,keys);
            			}
            			break;
            			case (int)9: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l1,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l1P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l1R,keys);
            			}
            			break;
            			case (int)10: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_u,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_uP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_uR,keys);
            			}
            			break;
            			case (int)11: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r1,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r1P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r1R,keys);
            			}
            			break;
            			case (int)12: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l2,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l2P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_l2R,keys);
            			}
            			break;
            			case (int)13: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_d,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_dP,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_dR,keys);
            			}
            			break;
            			case (int)14: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r2,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r2P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_r2R,keys);
            			}
            			break;
            			case (int)15: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n0,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n0P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n0R,keys);
            			}
            			break;
            			case (int)16: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n1,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n1P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n1R,keys);
            			}
            			break;
            			case (int)17: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n2,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n2P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n2R,keys);
            			}
            			break;
            			case (int)18: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n3,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n3P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n3R,keys);
            			}
            			break;
            			case (int)19: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n4,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n4P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n4R,keys);
            			}
            			break;
            			case (int)20: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n5,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n5P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n5R,keys);
            			}
            			break;
            			case (int)21: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n6,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n6P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n6R,keys);
            			}
            			break;
            			case (int)22: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n7,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n7P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n7R,keys);
            			}
            			break;
            			case (int)23: {
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n8,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n8P,keys);
HXDLIN( 982)				::Controls_obj::removeKeys(this->_n8R,keys);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,unbindKeys,(void))

void Controls_obj::setKeyboardScheme( ::KeyboardScheme scheme,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(true);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1006_setKeyboardScheme)
HXLINE(1007)		if (reset) {
HXLINE(1008)			this->removeKeyboard();
            		}
HXLINE(1010)		this->keyboardScheme = scheme;
HXLINE(1011)		::Main_obj::woops = false;
HXLINE(1014)		{
HXLINE(1014)			::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3986,1);
HXDLIN(1014)			switch((int)(::Control_obj::N0_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1014)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1014)					int state = 2;
HXDLIN(1014)					int _g = 0;
HXDLIN(1014)					while((_g < keys->length)){
HXLINE(1014)						int key = keys->__get(_g);
HXDLIN(1014)						_g = (_g + 1);
HXDLIN(1014)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1014)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1014)					int state = 2;
HXDLIN(1014)					int _g = 0;
HXDLIN(1014)					while((_g < keys->length)){
HXLINE(1014)						int key = keys->__get(_g);
HXDLIN(1014)						_g = (_g + 1);
HXDLIN(1014)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1014)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1014)					int state = 2;
HXDLIN(1014)					int _g = 0;
HXDLIN(1014)					while((_g < keys->length)){
HXLINE(1014)						int key = keys->__get(_g);
HXDLIN(1014)						_g = (_g + 1);
HXDLIN(1014)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1014)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1014)					int state = 2;
HXDLIN(1014)					int _g = 0;
HXDLIN(1014)					while((_g < keys->length)){
HXLINE(1014)						int key = keys->__get(_g);
HXDLIN(1014)						_g = (_g + 1);
HXDLIN(1014)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1014)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1014)					int state = 2;
HXDLIN(1014)					int _g = 0;
HXDLIN(1014)					while((_g < keys->length)){
HXLINE(1014)						int key = keys->__get(_g);
HXDLIN(1014)						_g = (_g + 1);
HXDLIN(1014)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1014)						int state = 1;
HXDLIN(1014)						int _g = 0;
HXDLIN(1014)						while((_g < keys->length)){
HXLINE(1014)							int key = keys->__get(_g);
HXDLIN(1014)							_g = (_g + 1);
HXDLIN(1014)							action->addKey(key,state);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1014)						int state1 = 2;
HXDLIN(1014)						int _g1 = 0;
HXDLIN(1014)						while((_g1 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g1);
HXDLIN(1014)							_g1 = (_g1 + 1);
HXDLIN(1014)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1014)					{
HXLINE(1014)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1014)						int state2 = -1;
HXDLIN(1014)						int _g2 = 0;
HXDLIN(1014)						while((_g2 < keys->length)){
HXLINE(1014)							int key = keys->__get(_g2);
HXDLIN(1014)							_g2 = (_g2 + 1);
HXDLIN(1014)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1015)		{
HXLINE(1015)			::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3987,1);
HXDLIN(1015)			switch((int)(::Control_obj::N1_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1015)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1015)					int state = 2;
HXDLIN(1015)					int _g = 0;
HXDLIN(1015)					while((_g < keys1->length)){
HXLINE(1015)						int key = keys1->__get(_g);
HXDLIN(1015)						_g = (_g + 1);
HXDLIN(1015)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1015)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1015)					int state = 2;
HXDLIN(1015)					int _g = 0;
HXDLIN(1015)					while((_g < keys1->length)){
HXLINE(1015)						int key = keys1->__get(_g);
HXDLIN(1015)						_g = (_g + 1);
HXDLIN(1015)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1015)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1015)					int state = 2;
HXDLIN(1015)					int _g = 0;
HXDLIN(1015)					while((_g < keys1->length)){
HXLINE(1015)						int key = keys1->__get(_g);
HXDLIN(1015)						_g = (_g + 1);
HXDLIN(1015)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1015)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1015)					int state = 2;
HXDLIN(1015)					int _g = 0;
HXDLIN(1015)					while((_g < keys1->length)){
HXLINE(1015)						int key = keys1->__get(_g);
HXDLIN(1015)						_g = (_g + 1);
HXDLIN(1015)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1015)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1015)					int state = 2;
HXDLIN(1015)					int _g = 0;
HXDLIN(1015)					while((_g < keys1->length)){
HXLINE(1015)						int key = keys1->__get(_g);
HXDLIN(1015)						_g = (_g + 1);
HXDLIN(1015)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1015)						int state = 1;
HXDLIN(1015)						int _g = 0;
HXDLIN(1015)						while((_g < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g);
HXDLIN(1015)							_g = (_g + 1);
HXDLIN(1015)							action->addKey(key,state);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1015)						int state1 = 2;
HXDLIN(1015)						int _g1 = 0;
HXDLIN(1015)						while((_g1 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g1);
HXDLIN(1015)							_g1 = (_g1 + 1);
HXDLIN(1015)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1015)					{
HXLINE(1015)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1015)						int state2 = -1;
HXDLIN(1015)						int _g2 = 0;
HXDLIN(1015)						while((_g2 < keys1->length)){
HXLINE(1015)							int key = keys1->__get(_g2);
HXDLIN(1015)							_g2 = (_g2 + 1);
HXDLIN(1015)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1016)		{
HXLINE(1016)			::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3988,1);
HXDLIN(1016)			switch((int)(::Control_obj::N2_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1016)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1016)					int state = 2;
HXDLIN(1016)					int _g = 0;
HXDLIN(1016)					while((_g < keys2->length)){
HXLINE(1016)						int key = keys2->__get(_g);
HXDLIN(1016)						_g = (_g + 1);
HXDLIN(1016)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1016)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1016)					int state = 2;
HXDLIN(1016)					int _g = 0;
HXDLIN(1016)					while((_g < keys2->length)){
HXLINE(1016)						int key = keys2->__get(_g);
HXDLIN(1016)						_g = (_g + 1);
HXDLIN(1016)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1016)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1016)					int state = 2;
HXDLIN(1016)					int _g = 0;
HXDLIN(1016)					while((_g < keys2->length)){
HXLINE(1016)						int key = keys2->__get(_g);
HXDLIN(1016)						_g = (_g + 1);
HXDLIN(1016)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1016)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1016)					int state = 2;
HXDLIN(1016)					int _g = 0;
HXDLIN(1016)					while((_g < keys2->length)){
HXLINE(1016)						int key = keys2->__get(_g);
HXDLIN(1016)						_g = (_g + 1);
HXDLIN(1016)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1016)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1016)					int state = 2;
HXDLIN(1016)					int _g = 0;
HXDLIN(1016)					while((_g < keys2->length)){
HXLINE(1016)						int key = keys2->__get(_g);
HXDLIN(1016)						_g = (_g + 1);
HXDLIN(1016)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1016)						int state = 1;
HXDLIN(1016)						int _g = 0;
HXDLIN(1016)						while((_g < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g);
HXDLIN(1016)							_g = (_g + 1);
HXDLIN(1016)							action->addKey(key,state);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1016)						int state1 = 2;
HXDLIN(1016)						int _g1 = 0;
HXDLIN(1016)						while((_g1 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g1);
HXDLIN(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1016)					{
HXLINE(1016)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1016)						int state2 = -1;
HXDLIN(1016)						int _g2 = 0;
HXDLIN(1016)						while((_g2 < keys2->length)){
HXLINE(1016)							int key = keys2->__get(_g2);
HXDLIN(1016)							_g2 = (_g2 + 1);
HXDLIN(1016)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1017)		{
HXLINE(1017)			::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3989,1);
HXDLIN(1017)			switch((int)(::Control_obj::N3_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1017)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1017)					int state = 2;
HXDLIN(1017)					int _g = 0;
HXDLIN(1017)					while((_g < keys3->length)){
HXLINE(1017)						int key = keys3->__get(_g);
HXDLIN(1017)						_g = (_g + 1);
HXDLIN(1017)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1017)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1017)					int state = 2;
HXDLIN(1017)					int _g = 0;
HXDLIN(1017)					while((_g < keys3->length)){
HXLINE(1017)						int key = keys3->__get(_g);
HXDLIN(1017)						_g = (_g + 1);
HXDLIN(1017)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1017)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1017)					int state = 2;
HXDLIN(1017)					int _g = 0;
HXDLIN(1017)					while((_g < keys3->length)){
HXLINE(1017)						int key = keys3->__get(_g);
HXDLIN(1017)						_g = (_g + 1);
HXDLIN(1017)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1017)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1017)					int state = 2;
HXDLIN(1017)					int _g = 0;
HXDLIN(1017)					while((_g < keys3->length)){
HXLINE(1017)						int key = keys3->__get(_g);
HXDLIN(1017)						_g = (_g + 1);
HXDLIN(1017)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1017)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1017)					int state = 2;
HXDLIN(1017)					int _g = 0;
HXDLIN(1017)					while((_g < keys3->length)){
HXLINE(1017)						int key = keys3->__get(_g);
HXDLIN(1017)						_g = (_g + 1);
HXDLIN(1017)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1017)						int state = 1;
HXDLIN(1017)						int _g = 0;
HXDLIN(1017)						while((_g < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g);
HXDLIN(1017)							_g = (_g + 1);
HXDLIN(1017)							action->addKey(key,state);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1017)						int state1 = 2;
HXDLIN(1017)						int _g1 = 0;
HXDLIN(1017)						while((_g1 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g1);
HXDLIN(1017)							_g1 = (_g1 + 1);
HXDLIN(1017)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1017)					{
HXLINE(1017)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1017)						int state2 = -1;
HXDLIN(1017)						int _g2 = 0;
HXDLIN(1017)						while((_g2 < keys3->length)){
HXLINE(1017)							int key = keys3->__get(_g2);
HXDLIN(1017)							_g2 = (_g2 + 1);
HXDLIN(1017)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1018)		{
HXLINE(1018)			::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3990,1);
HXDLIN(1018)			switch((int)(::Control_obj::N4_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1018)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1018)					int state = 2;
HXDLIN(1018)					int _g = 0;
HXDLIN(1018)					while((_g < keys4->length)){
HXLINE(1018)						int key = keys4->__get(_g);
HXDLIN(1018)						_g = (_g + 1);
HXDLIN(1018)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1018)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1018)					int state = 2;
HXDLIN(1018)					int _g = 0;
HXDLIN(1018)					while((_g < keys4->length)){
HXLINE(1018)						int key = keys4->__get(_g);
HXDLIN(1018)						_g = (_g + 1);
HXDLIN(1018)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1018)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1018)					int state = 2;
HXDLIN(1018)					int _g = 0;
HXDLIN(1018)					while((_g < keys4->length)){
HXLINE(1018)						int key = keys4->__get(_g);
HXDLIN(1018)						_g = (_g + 1);
HXDLIN(1018)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1018)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1018)					int state = 2;
HXDLIN(1018)					int _g = 0;
HXDLIN(1018)					while((_g < keys4->length)){
HXLINE(1018)						int key = keys4->__get(_g);
HXDLIN(1018)						_g = (_g + 1);
HXDLIN(1018)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1018)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1018)					int state = 2;
HXDLIN(1018)					int _g = 0;
HXDLIN(1018)					while((_g < keys4->length)){
HXLINE(1018)						int key = keys4->__get(_g);
HXDLIN(1018)						_g = (_g + 1);
HXDLIN(1018)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1018)						int state = 1;
HXDLIN(1018)						int _g = 0;
HXDLIN(1018)						while((_g < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g);
HXDLIN(1018)							_g = (_g + 1);
HXDLIN(1018)							action->addKey(key,state);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1018)						int state1 = 2;
HXDLIN(1018)						int _g1 = 0;
HXDLIN(1018)						while((_g1 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g1);
HXDLIN(1018)							_g1 = (_g1 + 1);
HXDLIN(1018)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1018)					{
HXLINE(1018)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1018)						int state2 = -1;
HXDLIN(1018)						int _g2 = 0;
HXDLIN(1018)						while((_g2 < keys4->length)){
HXLINE(1018)							int key = keys4->__get(_g2);
HXDLIN(1018)							_g2 = (_g2 + 1);
HXDLIN(1018)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1019)		{
HXLINE(1019)			::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3991,1);
HXDLIN(1019)			switch((int)(::Control_obj::N5_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1019)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1019)					int state = 2;
HXDLIN(1019)					int _g = 0;
HXDLIN(1019)					while((_g < keys5->length)){
HXLINE(1019)						int key = keys5->__get(_g);
HXDLIN(1019)						_g = (_g + 1);
HXDLIN(1019)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1019)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1019)					int state = 2;
HXDLIN(1019)					int _g = 0;
HXDLIN(1019)					while((_g < keys5->length)){
HXLINE(1019)						int key = keys5->__get(_g);
HXDLIN(1019)						_g = (_g + 1);
HXDLIN(1019)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1019)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1019)					int state = 2;
HXDLIN(1019)					int _g = 0;
HXDLIN(1019)					while((_g < keys5->length)){
HXLINE(1019)						int key = keys5->__get(_g);
HXDLIN(1019)						_g = (_g + 1);
HXDLIN(1019)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1019)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1019)					int state = 2;
HXDLIN(1019)					int _g = 0;
HXDLIN(1019)					while((_g < keys5->length)){
HXLINE(1019)						int key = keys5->__get(_g);
HXDLIN(1019)						_g = (_g + 1);
HXDLIN(1019)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1019)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1019)					int state = 2;
HXDLIN(1019)					int _g = 0;
HXDLIN(1019)					while((_g < keys5->length)){
HXLINE(1019)						int key = keys5->__get(_g);
HXDLIN(1019)						_g = (_g + 1);
HXDLIN(1019)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1019)						int state = 1;
HXDLIN(1019)						int _g = 0;
HXDLIN(1019)						while((_g < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g);
HXDLIN(1019)							_g = (_g + 1);
HXDLIN(1019)							action->addKey(key,state);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1019)						int state1 = 2;
HXDLIN(1019)						int _g1 = 0;
HXDLIN(1019)						while((_g1 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g1);
HXDLIN(1019)							_g1 = (_g1 + 1);
HXDLIN(1019)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1019)					{
HXLINE(1019)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1019)						int state2 = -1;
HXDLIN(1019)						int _g2 = 0;
HXDLIN(1019)						while((_g2 < keys5->length)){
HXLINE(1019)							int key = keys5->__get(_g2);
HXDLIN(1019)							_g2 = (_g2 + 1);
HXDLIN(1019)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1020)		{
HXLINE(1020)			::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3992,1);
HXDLIN(1020)			switch((int)(::Control_obj::N6_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1020)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1020)					int state = 2;
HXDLIN(1020)					int _g = 0;
HXDLIN(1020)					while((_g < keys6->length)){
HXLINE(1020)						int key = keys6->__get(_g);
HXDLIN(1020)						_g = (_g + 1);
HXDLIN(1020)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1020)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1020)					int state = 2;
HXDLIN(1020)					int _g = 0;
HXDLIN(1020)					while((_g < keys6->length)){
HXLINE(1020)						int key = keys6->__get(_g);
HXDLIN(1020)						_g = (_g + 1);
HXDLIN(1020)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1020)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1020)					int state = 2;
HXDLIN(1020)					int _g = 0;
HXDLIN(1020)					while((_g < keys6->length)){
HXLINE(1020)						int key = keys6->__get(_g);
HXDLIN(1020)						_g = (_g + 1);
HXDLIN(1020)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1020)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1020)					int state = 2;
HXDLIN(1020)					int _g = 0;
HXDLIN(1020)					while((_g < keys6->length)){
HXLINE(1020)						int key = keys6->__get(_g);
HXDLIN(1020)						_g = (_g + 1);
HXDLIN(1020)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1020)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1020)					int state = 2;
HXDLIN(1020)					int _g = 0;
HXDLIN(1020)					while((_g < keys6->length)){
HXLINE(1020)						int key = keys6->__get(_g);
HXDLIN(1020)						_g = (_g + 1);
HXDLIN(1020)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1020)						int state = 1;
HXDLIN(1020)						int _g = 0;
HXDLIN(1020)						while((_g < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g);
HXDLIN(1020)							_g = (_g + 1);
HXDLIN(1020)							action->addKey(key,state);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1020)						int state1 = 2;
HXDLIN(1020)						int _g1 = 0;
HXDLIN(1020)						while((_g1 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g1);
HXDLIN(1020)							_g1 = (_g1 + 1);
HXDLIN(1020)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1020)					{
HXLINE(1020)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1020)						int state2 = -1;
HXDLIN(1020)						int _g2 = 0;
HXDLIN(1020)						while((_g2 < keys6->length)){
HXLINE(1020)							int key = keys6->__get(_g2);
HXDLIN(1020)							_g2 = (_g2 + 1);
HXDLIN(1020)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1021)		{
HXLINE(1021)			::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3993,1);
HXDLIN(1021)			switch((int)(::Control_obj::N7_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1021)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1021)					int state = 2;
HXDLIN(1021)					int _g = 0;
HXDLIN(1021)					while((_g < keys7->length)){
HXLINE(1021)						int key = keys7->__get(_g);
HXDLIN(1021)						_g = (_g + 1);
HXDLIN(1021)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1021)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1021)					int state = 2;
HXDLIN(1021)					int _g = 0;
HXDLIN(1021)					while((_g < keys7->length)){
HXLINE(1021)						int key = keys7->__get(_g);
HXDLIN(1021)						_g = (_g + 1);
HXDLIN(1021)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1021)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1021)					int state = 2;
HXDLIN(1021)					int _g = 0;
HXDLIN(1021)					while((_g < keys7->length)){
HXLINE(1021)						int key = keys7->__get(_g);
HXDLIN(1021)						_g = (_g + 1);
HXDLIN(1021)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1021)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1021)					int state = 2;
HXDLIN(1021)					int _g = 0;
HXDLIN(1021)					while((_g < keys7->length)){
HXLINE(1021)						int key = keys7->__get(_g);
HXDLIN(1021)						_g = (_g + 1);
HXDLIN(1021)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1021)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1021)					int state = 2;
HXDLIN(1021)					int _g = 0;
HXDLIN(1021)					while((_g < keys7->length)){
HXLINE(1021)						int key = keys7->__get(_g);
HXDLIN(1021)						_g = (_g + 1);
HXDLIN(1021)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1021)						int state = 1;
HXDLIN(1021)						int _g = 0;
HXDLIN(1021)						while((_g < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g);
HXDLIN(1021)							_g = (_g + 1);
HXDLIN(1021)							action->addKey(key,state);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1021)						int state1 = 2;
HXDLIN(1021)						int _g1 = 0;
HXDLIN(1021)						while((_g1 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g1);
HXDLIN(1021)							_g1 = (_g1 + 1);
HXDLIN(1021)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1021)					{
HXLINE(1021)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1021)						int state2 = -1;
HXDLIN(1021)						int _g2 = 0;
HXDLIN(1021)						while((_g2 < keys7->length)){
HXLINE(1021)							int key = keys7->__get(_g2);
HXDLIN(1021)							_g2 = (_g2 + 1);
HXDLIN(1021)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1022)		{
HXLINE(1022)			::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3994,1);
HXDLIN(1022)			switch((int)(::Control_obj::N8_dyn()->_hx_getIndex())){
            				case (int)0: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE(1022)					 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1022)					int state = 2;
HXDLIN(1022)					int _g = 0;
HXDLIN(1022)					while((_g < keys8->length)){
HXLINE(1022)						int key = keys8->__get(_g);
HXDLIN(1022)						_g = (_g + 1);
HXDLIN(1022)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1022)					 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1022)					int state = 2;
HXDLIN(1022)					int _g = 0;
HXDLIN(1022)					while((_g < keys8->length)){
HXLINE(1022)						int key = keys8->__get(_g);
HXDLIN(1022)						_g = (_g + 1);
HXDLIN(1022)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE(1022)					 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1022)					int state = 2;
HXDLIN(1022)					int _g = 0;
HXDLIN(1022)					while((_g < keys8->length)){
HXLINE(1022)						int key = keys8->__get(_g);
HXDLIN(1022)						_g = (_g + 1);
HXDLIN(1022)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE(1022)					 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1022)					int state = 2;
HXDLIN(1022)					int _g = 0;
HXDLIN(1022)					while((_g < keys8->length)){
HXLINE(1022)						int key = keys8->__get(_g);
HXDLIN(1022)						_g = (_g + 1);
HXDLIN(1022)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(1022)					 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1022)					int state = 2;
HXDLIN(1022)					int _g = 0;
HXDLIN(1022)					while((_g < keys8->length)){
HXLINE(1022)						int key = keys8->__get(_g);
HXDLIN(1022)						_g = (_g + 1);
HXDLIN(1022)						action->addKey(key,state);
            					}
            				}
            				break;
            				case (int)9: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)10: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)11: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)12: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)13: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)14: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)15: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)16: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)17: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)18: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)19: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)20: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)21: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)22: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            				case (int)23: {
HXLINE(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1022)						int state = 1;
HXDLIN(1022)						int _g = 0;
HXDLIN(1022)						while((_g < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g);
HXDLIN(1022)							_g = (_g + 1);
HXDLIN(1022)							action->addKey(key,state);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1022)						int state1 = 2;
HXDLIN(1022)						int _g1 = 0;
HXDLIN(1022)						while((_g1 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g1);
HXDLIN(1022)							_g1 = (_g1 + 1);
HXDLIN(1022)							action1->addKey(key,state1);
            						}
            					}
HXDLIN(1022)					{
HXLINE(1022)						 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1022)						int state2 = -1;
HXDLIN(1022)						int _g2 = 0;
HXDLIN(1022)						while((_g2 < keys8->length)){
HXLINE(1022)							int key = keys8->__get(_g2);
HXDLIN(1022)							_g2 = (_g2 + 1);
HXDLIN(1022)							action2->addKey(key,state2);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1024)		switch((int)(scheme->_hx_getIndex())){
            			case (int)0: {
HXLINE(1027)				{
HXLINE(1027)					::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3995,2);
HXDLIN(1027)					switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1027)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1027)							int state = 2;
HXDLIN(1027)							int _g = 0;
HXDLIN(1027)							while((_g < keys->length)){
HXLINE(1027)								int key = keys->__get(_g);
HXDLIN(1027)								_g = (_g + 1);
HXDLIN(1027)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1027)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1027)							int state = 2;
HXDLIN(1027)							int _g = 0;
HXDLIN(1027)							while((_g < keys->length)){
HXLINE(1027)								int key = keys->__get(_g);
HXDLIN(1027)								_g = (_g + 1);
HXDLIN(1027)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1027)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1027)							int state = 2;
HXDLIN(1027)							int _g = 0;
HXDLIN(1027)							while((_g < keys->length)){
HXLINE(1027)								int key = keys->__get(_g);
HXDLIN(1027)								_g = (_g + 1);
HXDLIN(1027)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1027)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1027)							int state = 2;
HXDLIN(1027)							int _g = 0;
HXDLIN(1027)							while((_g < keys->length)){
HXLINE(1027)								int key = keys->__get(_g);
HXDLIN(1027)								_g = (_g + 1);
HXDLIN(1027)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1027)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1027)							int state = 2;
HXDLIN(1027)							int _g = 0;
HXDLIN(1027)							while((_g < keys->length)){
HXLINE(1027)								int key = keys->__get(_g);
HXDLIN(1027)								_g = (_g + 1);
HXDLIN(1027)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1027)								int state = 1;
HXDLIN(1027)								int _g = 0;
HXDLIN(1027)								while((_g < keys->length)){
HXLINE(1027)									int key = keys->__get(_g);
HXDLIN(1027)									_g = (_g + 1);
HXDLIN(1027)									action->addKey(key,state);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1027)								int state1 = 2;
HXDLIN(1027)								int _g1 = 0;
HXDLIN(1027)								while((_g1 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g1);
HXDLIN(1027)									_g1 = (_g1 + 1);
HXDLIN(1027)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1027)							{
HXLINE(1027)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1027)								int state2 = -1;
HXDLIN(1027)								int _g2 = 0;
HXDLIN(1027)								while((_g2 < keys->length)){
HXLINE(1027)									int key = keys->__get(_g2);
HXDLIN(1027)									_g2 = (_g2 + 1);
HXDLIN(1027)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1028)				{
HXLINE(1028)					::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3996,2);
HXDLIN(1028)					switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1028)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1028)							int state = 2;
HXDLIN(1028)							int _g = 0;
HXDLIN(1028)							while((_g < keys1->length)){
HXLINE(1028)								int key = keys1->__get(_g);
HXDLIN(1028)								_g = (_g + 1);
HXDLIN(1028)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1028)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1028)							int state = 2;
HXDLIN(1028)							int _g = 0;
HXDLIN(1028)							while((_g < keys1->length)){
HXLINE(1028)								int key = keys1->__get(_g);
HXDLIN(1028)								_g = (_g + 1);
HXDLIN(1028)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1028)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1028)							int state = 2;
HXDLIN(1028)							int _g = 0;
HXDLIN(1028)							while((_g < keys1->length)){
HXLINE(1028)								int key = keys1->__get(_g);
HXDLIN(1028)								_g = (_g + 1);
HXDLIN(1028)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1028)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1028)							int state = 2;
HXDLIN(1028)							int _g = 0;
HXDLIN(1028)							while((_g < keys1->length)){
HXLINE(1028)								int key = keys1->__get(_g);
HXDLIN(1028)								_g = (_g + 1);
HXDLIN(1028)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1028)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1028)							int state = 2;
HXDLIN(1028)							int _g = 0;
HXDLIN(1028)							while((_g < keys1->length)){
HXLINE(1028)								int key = keys1->__get(_g);
HXDLIN(1028)								_g = (_g + 1);
HXDLIN(1028)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1028)								int state = 1;
HXDLIN(1028)								int _g = 0;
HXDLIN(1028)								while((_g < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g);
HXDLIN(1028)									_g = (_g + 1);
HXDLIN(1028)									action->addKey(key,state);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1028)								int state1 = 2;
HXDLIN(1028)								int _g1 = 0;
HXDLIN(1028)								while((_g1 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g1);
HXDLIN(1028)									_g1 = (_g1 + 1);
HXDLIN(1028)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1028)							{
HXLINE(1028)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1028)								int state2 = -1;
HXDLIN(1028)								int _g2 = 0;
HXDLIN(1028)								while((_g2 < keys1->length)){
HXLINE(1028)									int key = keys1->__get(_g2);
HXDLIN(1028)									_g2 = (_g2 + 1);
HXDLIN(1028)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1029)				{
HXLINE(1029)					::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3997,2);
HXDLIN(1029)					switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1029)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1029)							int state = 2;
HXDLIN(1029)							int _g = 0;
HXDLIN(1029)							while((_g < keys2->length)){
HXLINE(1029)								int key = keys2->__get(_g);
HXDLIN(1029)								_g = (_g + 1);
HXDLIN(1029)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1029)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1029)							int state = 2;
HXDLIN(1029)							int _g = 0;
HXDLIN(1029)							while((_g < keys2->length)){
HXLINE(1029)								int key = keys2->__get(_g);
HXDLIN(1029)								_g = (_g + 1);
HXDLIN(1029)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1029)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1029)							int state = 2;
HXDLIN(1029)							int _g = 0;
HXDLIN(1029)							while((_g < keys2->length)){
HXLINE(1029)								int key = keys2->__get(_g);
HXDLIN(1029)								_g = (_g + 1);
HXDLIN(1029)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1029)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1029)							int state = 2;
HXDLIN(1029)							int _g = 0;
HXDLIN(1029)							while((_g < keys2->length)){
HXLINE(1029)								int key = keys2->__get(_g);
HXDLIN(1029)								_g = (_g + 1);
HXDLIN(1029)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1029)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1029)							int state = 2;
HXDLIN(1029)							int _g = 0;
HXDLIN(1029)							while((_g < keys2->length)){
HXLINE(1029)								int key = keys2->__get(_g);
HXDLIN(1029)								_g = (_g + 1);
HXDLIN(1029)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1029)								int state = 1;
HXDLIN(1029)								int _g = 0;
HXDLIN(1029)								while((_g < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g);
HXDLIN(1029)									_g = (_g + 1);
HXDLIN(1029)									action->addKey(key,state);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1029)								int state1 = 2;
HXDLIN(1029)								int _g1 = 0;
HXDLIN(1029)								while((_g1 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g1);
HXDLIN(1029)									_g1 = (_g1 + 1);
HXDLIN(1029)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1029)							{
HXLINE(1029)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1029)								int state2 = -1;
HXDLIN(1029)								int _g2 = 0;
HXDLIN(1029)								while((_g2 < keys2->length)){
HXLINE(1029)									int key = keys2->__get(_g2);
HXDLIN(1029)									_g2 = (_g2 + 1);
HXDLIN(1029)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1030)				{
HXLINE(1030)					::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3998,2);
HXDLIN(1030)					switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1030)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1030)							int state = 2;
HXDLIN(1030)							int _g = 0;
HXDLIN(1030)							while((_g < keys3->length)){
HXLINE(1030)								int key = keys3->__get(_g);
HXDLIN(1030)								_g = (_g + 1);
HXDLIN(1030)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1030)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1030)							int state = 2;
HXDLIN(1030)							int _g = 0;
HXDLIN(1030)							while((_g < keys3->length)){
HXLINE(1030)								int key = keys3->__get(_g);
HXDLIN(1030)								_g = (_g + 1);
HXDLIN(1030)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1030)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1030)							int state = 2;
HXDLIN(1030)							int _g = 0;
HXDLIN(1030)							while((_g < keys3->length)){
HXLINE(1030)								int key = keys3->__get(_g);
HXDLIN(1030)								_g = (_g + 1);
HXDLIN(1030)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1030)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1030)							int state = 2;
HXDLIN(1030)							int _g = 0;
HXDLIN(1030)							while((_g < keys3->length)){
HXLINE(1030)								int key = keys3->__get(_g);
HXDLIN(1030)								_g = (_g + 1);
HXDLIN(1030)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1030)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1030)							int state = 2;
HXDLIN(1030)							int _g = 0;
HXDLIN(1030)							while((_g < keys3->length)){
HXLINE(1030)								int key = keys3->__get(_g);
HXDLIN(1030)								_g = (_g + 1);
HXDLIN(1030)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1030)								int state = 1;
HXDLIN(1030)								int _g = 0;
HXDLIN(1030)								while((_g < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g);
HXDLIN(1030)									_g = (_g + 1);
HXDLIN(1030)									action->addKey(key,state);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1030)								int state1 = 2;
HXDLIN(1030)								int _g1 = 0;
HXDLIN(1030)								while((_g1 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g1);
HXDLIN(1030)									_g1 = (_g1 + 1);
HXDLIN(1030)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1030)							{
HXLINE(1030)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1030)								int state2 = -1;
HXDLIN(1030)								int _g2 = 0;
HXDLIN(1030)								while((_g2 < keys3->length)){
HXLINE(1030)									int key = keys3->__get(_g2);
HXDLIN(1030)									_g2 = (_g2 + 1);
HXDLIN(1030)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1031)				{
HXLINE(1031)					::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_3999,3);
HXDLIN(1031)					switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1031)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1031)							int state = 2;
HXDLIN(1031)							int _g = 0;
HXDLIN(1031)							while((_g < keys4->length)){
HXLINE(1031)								int key = keys4->__get(_g);
HXDLIN(1031)								_g = (_g + 1);
HXDLIN(1031)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1031)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1031)							int state = 2;
HXDLIN(1031)							int _g = 0;
HXDLIN(1031)							while((_g < keys4->length)){
HXLINE(1031)								int key = keys4->__get(_g);
HXDLIN(1031)								_g = (_g + 1);
HXDLIN(1031)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1031)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1031)							int state = 2;
HXDLIN(1031)							int _g = 0;
HXDLIN(1031)							while((_g < keys4->length)){
HXLINE(1031)								int key = keys4->__get(_g);
HXDLIN(1031)								_g = (_g + 1);
HXDLIN(1031)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1031)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1031)							int state = 2;
HXDLIN(1031)							int _g = 0;
HXDLIN(1031)							while((_g < keys4->length)){
HXLINE(1031)								int key = keys4->__get(_g);
HXDLIN(1031)								_g = (_g + 1);
HXDLIN(1031)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1031)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1031)							int state = 2;
HXDLIN(1031)							int _g = 0;
HXDLIN(1031)							while((_g < keys4->length)){
HXLINE(1031)								int key = keys4->__get(_g);
HXDLIN(1031)								_g = (_g + 1);
HXDLIN(1031)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1031)								int state = 1;
HXDLIN(1031)								int _g = 0;
HXDLIN(1031)								while((_g < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g);
HXDLIN(1031)									_g = (_g + 1);
HXDLIN(1031)									action->addKey(key,state);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1031)								int state1 = 2;
HXDLIN(1031)								int _g1 = 0;
HXDLIN(1031)								while((_g1 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g1);
HXDLIN(1031)									_g1 = (_g1 + 1);
HXDLIN(1031)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1031)							{
HXLINE(1031)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1031)								int state2 = -1;
HXDLIN(1031)								int _g2 = 0;
HXDLIN(1031)								while((_g2 < keys4->length)){
HXLINE(1031)									int key = keys4->__get(_g2);
HXDLIN(1031)									_g2 = (_g2 + 1);
HXDLIN(1031)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1032)				{
HXLINE(1032)					::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4000,2);
HXDLIN(1032)					switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1032)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1032)							int state = 2;
HXDLIN(1032)							int _g = 0;
HXDLIN(1032)							while((_g < keys5->length)){
HXLINE(1032)								int key = keys5->__get(_g);
HXDLIN(1032)								_g = (_g + 1);
HXDLIN(1032)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1032)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1032)							int state = 2;
HXDLIN(1032)							int _g = 0;
HXDLIN(1032)							while((_g < keys5->length)){
HXLINE(1032)								int key = keys5->__get(_g);
HXDLIN(1032)								_g = (_g + 1);
HXDLIN(1032)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1032)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1032)							int state = 2;
HXDLIN(1032)							int _g = 0;
HXDLIN(1032)							while((_g < keys5->length)){
HXLINE(1032)								int key = keys5->__get(_g);
HXDLIN(1032)								_g = (_g + 1);
HXDLIN(1032)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1032)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1032)							int state = 2;
HXDLIN(1032)							int _g = 0;
HXDLIN(1032)							while((_g < keys5->length)){
HXLINE(1032)								int key = keys5->__get(_g);
HXDLIN(1032)								_g = (_g + 1);
HXDLIN(1032)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1032)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1032)							int state = 2;
HXDLIN(1032)							int _g = 0;
HXDLIN(1032)							while((_g < keys5->length)){
HXLINE(1032)								int key = keys5->__get(_g);
HXDLIN(1032)								_g = (_g + 1);
HXDLIN(1032)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1032)								int state = 1;
HXDLIN(1032)								int _g = 0;
HXDLIN(1032)								while((_g < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g);
HXDLIN(1032)									_g = (_g + 1);
HXDLIN(1032)									action->addKey(key,state);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1032)								int state1 = 2;
HXDLIN(1032)								int _g1 = 0;
HXDLIN(1032)								while((_g1 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g1);
HXDLIN(1032)									_g1 = (_g1 + 1);
HXDLIN(1032)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1032)							{
HXLINE(1032)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1032)								int state2 = -1;
HXDLIN(1032)								int _g2 = 0;
HXDLIN(1032)								while((_g2 < keys5->length)){
HXLINE(1032)									int key = keys5->__get(_g2);
HXDLIN(1032)									_g2 = (_g2 + 1);
HXDLIN(1032)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1033)				{
HXLINE(1033)					::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4001,3);
HXDLIN(1033)					switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1033)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1033)							int state = 2;
HXDLIN(1033)							int _g = 0;
HXDLIN(1033)							while((_g < keys6->length)){
HXLINE(1033)								int key = keys6->__get(_g);
HXDLIN(1033)								_g = (_g + 1);
HXDLIN(1033)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1033)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1033)							int state = 2;
HXDLIN(1033)							int _g = 0;
HXDLIN(1033)							while((_g < keys6->length)){
HXLINE(1033)								int key = keys6->__get(_g);
HXDLIN(1033)								_g = (_g + 1);
HXDLIN(1033)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1033)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1033)							int state = 2;
HXDLIN(1033)							int _g = 0;
HXDLIN(1033)							while((_g < keys6->length)){
HXLINE(1033)								int key = keys6->__get(_g);
HXDLIN(1033)								_g = (_g + 1);
HXDLIN(1033)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1033)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1033)							int state = 2;
HXDLIN(1033)							int _g = 0;
HXDLIN(1033)							while((_g < keys6->length)){
HXLINE(1033)								int key = keys6->__get(_g);
HXDLIN(1033)								_g = (_g + 1);
HXDLIN(1033)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1033)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1033)							int state = 2;
HXDLIN(1033)							int _g = 0;
HXDLIN(1033)							while((_g < keys6->length)){
HXLINE(1033)								int key = keys6->__get(_g);
HXDLIN(1033)								_g = (_g + 1);
HXDLIN(1033)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1033)								int state = 1;
HXDLIN(1033)								int _g = 0;
HXDLIN(1033)								while((_g < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g);
HXDLIN(1033)									_g = (_g + 1);
HXDLIN(1033)									action->addKey(key,state);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1033)								int state1 = 2;
HXDLIN(1033)								int _g1 = 0;
HXDLIN(1033)								while((_g1 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g1);
HXDLIN(1033)									_g1 = (_g1 + 1);
HXDLIN(1033)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1033)							{
HXLINE(1033)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1033)								int state2 = -1;
HXDLIN(1033)								int _g2 = 0;
HXDLIN(1033)								while((_g2 < keys6->length)){
HXLINE(1033)									int key = keys6->__get(_g2);
HXDLIN(1033)									_g2 = (_g2 + 1);
HXDLIN(1033)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1034)				{
HXLINE(1034)					::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4002,1);
HXDLIN(1034)					switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1034)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1034)							int state = 2;
HXDLIN(1034)							int _g = 0;
HXDLIN(1034)							while((_g < keys7->length)){
HXLINE(1034)								int key = keys7->__get(_g);
HXDLIN(1034)								_g = (_g + 1);
HXDLIN(1034)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1034)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1034)							int state = 2;
HXDLIN(1034)							int _g = 0;
HXDLIN(1034)							while((_g < keys7->length)){
HXLINE(1034)								int key = keys7->__get(_g);
HXDLIN(1034)								_g = (_g + 1);
HXDLIN(1034)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1034)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1034)							int state = 2;
HXDLIN(1034)							int _g = 0;
HXDLIN(1034)							while((_g < keys7->length)){
HXLINE(1034)								int key = keys7->__get(_g);
HXDLIN(1034)								_g = (_g + 1);
HXDLIN(1034)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1034)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1034)							int state = 2;
HXDLIN(1034)							int _g = 0;
HXDLIN(1034)							while((_g < keys7->length)){
HXLINE(1034)								int key = keys7->__get(_g);
HXDLIN(1034)								_g = (_g + 1);
HXDLIN(1034)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1034)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1034)							int state = 2;
HXDLIN(1034)							int _g = 0;
HXDLIN(1034)							while((_g < keys7->length)){
HXLINE(1034)								int key = keys7->__get(_g);
HXDLIN(1034)								_g = (_g + 1);
HXDLIN(1034)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1034)								int state = 1;
HXDLIN(1034)								int _g = 0;
HXDLIN(1034)								while((_g < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g);
HXDLIN(1034)									_g = (_g + 1);
HXDLIN(1034)									action->addKey(key,state);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1034)								int state1 = 2;
HXDLIN(1034)								int _g1 = 0;
HXDLIN(1034)								while((_g1 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g1);
HXDLIN(1034)									_g1 = (_g1 + 1);
HXDLIN(1034)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1034)							{
HXLINE(1034)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1034)								int state2 = -1;
HXDLIN(1034)								int _g2 = 0;
HXDLIN(1034)								while((_g2 < keys7->length)){
HXLINE(1034)									int key = keys7->__get(_g2);
HXDLIN(1034)									_g2 = (_g2 + 1);
HXDLIN(1034)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1036)				{
HXLINE(1036)					::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4003,1);
HXDLIN(1036)					switch((int)(::Control_obj::L1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1036)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1036)							int state = 2;
HXDLIN(1036)							int _g = 0;
HXDLIN(1036)							while((_g < keys8->length)){
HXLINE(1036)								int key = keys8->__get(_g);
HXDLIN(1036)								_g = (_g + 1);
HXDLIN(1036)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1036)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1036)							int state = 2;
HXDLIN(1036)							int _g = 0;
HXDLIN(1036)							while((_g < keys8->length)){
HXLINE(1036)								int key = keys8->__get(_g);
HXDLIN(1036)								_g = (_g + 1);
HXDLIN(1036)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1036)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1036)							int state = 2;
HXDLIN(1036)							int _g = 0;
HXDLIN(1036)							while((_g < keys8->length)){
HXLINE(1036)								int key = keys8->__get(_g);
HXDLIN(1036)								_g = (_g + 1);
HXDLIN(1036)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1036)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1036)							int state = 2;
HXDLIN(1036)							int _g = 0;
HXDLIN(1036)							while((_g < keys8->length)){
HXLINE(1036)								int key = keys8->__get(_g);
HXDLIN(1036)								_g = (_g + 1);
HXDLIN(1036)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1036)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1036)							int state = 2;
HXDLIN(1036)							int _g = 0;
HXDLIN(1036)							while((_g < keys8->length)){
HXLINE(1036)								int key = keys8->__get(_g);
HXDLIN(1036)								_g = (_g + 1);
HXDLIN(1036)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1036)								int state = 1;
HXDLIN(1036)								int _g = 0;
HXDLIN(1036)								while((_g < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g);
HXDLIN(1036)									_g = (_g + 1);
HXDLIN(1036)									action->addKey(key,state);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1036)								int state1 = 2;
HXDLIN(1036)								int _g1 = 0;
HXDLIN(1036)								while((_g1 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g1);
HXDLIN(1036)									_g1 = (_g1 + 1);
HXDLIN(1036)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1036)							{
HXLINE(1036)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1036)								int state2 = -1;
HXDLIN(1036)								int _g2 = 0;
HXDLIN(1036)								while((_g2 < keys8->length)){
HXLINE(1036)									int key = keys8->__get(_g2);
HXDLIN(1036)									_g2 = (_g2 + 1);
HXDLIN(1036)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1037)				{
HXLINE(1037)					::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4004,1);
HXDLIN(1037)					switch((int)(::Control_obj::U1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1037)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1037)							int state = 2;
HXDLIN(1037)							int _g = 0;
HXDLIN(1037)							while((_g < keys9->length)){
HXLINE(1037)								int key = keys9->__get(_g);
HXDLIN(1037)								_g = (_g + 1);
HXDLIN(1037)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1037)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1037)							int state = 2;
HXDLIN(1037)							int _g = 0;
HXDLIN(1037)							while((_g < keys9->length)){
HXLINE(1037)								int key = keys9->__get(_g);
HXDLIN(1037)								_g = (_g + 1);
HXDLIN(1037)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1037)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1037)							int state = 2;
HXDLIN(1037)							int _g = 0;
HXDLIN(1037)							while((_g < keys9->length)){
HXLINE(1037)								int key = keys9->__get(_g);
HXDLIN(1037)								_g = (_g + 1);
HXDLIN(1037)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1037)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1037)							int state = 2;
HXDLIN(1037)							int _g = 0;
HXDLIN(1037)							while((_g < keys9->length)){
HXLINE(1037)								int key = keys9->__get(_g);
HXDLIN(1037)								_g = (_g + 1);
HXDLIN(1037)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1037)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1037)							int state = 2;
HXDLIN(1037)							int _g = 0;
HXDLIN(1037)							while((_g < keys9->length)){
HXLINE(1037)								int key = keys9->__get(_g);
HXDLIN(1037)								_g = (_g + 1);
HXDLIN(1037)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1037)								int state = 1;
HXDLIN(1037)								int _g = 0;
HXDLIN(1037)								while((_g < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g);
HXDLIN(1037)									_g = (_g + 1);
HXDLIN(1037)									action->addKey(key,state);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1037)								int state1 = 2;
HXDLIN(1037)								int _g1 = 0;
HXDLIN(1037)								while((_g1 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g1);
HXDLIN(1037)									_g1 = (_g1 + 1);
HXDLIN(1037)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1037)							{
HXLINE(1037)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1037)								int state2 = -1;
HXDLIN(1037)								int _g2 = 0;
HXDLIN(1037)								while((_g2 < keys9->length)){
HXLINE(1037)									int key = keys9->__get(_g2);
HXDLIN(1037)									_g2 = (_g2 + 1);
HXDLIN(1037)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1038)				{
HXLINE(1038)					::Array< int > keys10 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4005,1);
HXDLIN(1038)					switch((int)(::Control_obj::R1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1038)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1038)							int state = 2;
HXDLIN(1038)							int _g = 0;
HXDLIN(1038)							while((_g < keys10->length)){
HXLINE(1038)								int key = keys10->__get(_g);
HXDLIN(1038)								_g = (_g + 1);
HXDLIN(1038)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1038)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1038)							int state = 2;
HXDLIN(1038)							int _g = 0;
HXDLIN(1038)							while((_g < keys10->length)){
HXLINE(1038)								int key = keys10->__get(_g);
HXDLIN(1038)								_g = (_g + 1);
HXDLIN(1038)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1038)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1038)							int state = 2;
HXDLIN(1038)							int _g = 0;
HXDLIN(1038)							while((_g < keys10->length)){
HXLINE(1038)								int key = keys10->__get(_g);
HXDLIN(1038)								_g = (_g + 1);
HXDLIN(1038)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1038)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1038)							int state = 2;
HXDLIN(1038)							int _g = 0;
HXDLIN(1038)							while((_g < keys10->length)){
HXLINE(1038)								int key = keys10->__get(_g);
HXDLIN(1038)								_g = (_g + 1);
HXDLIN(1038)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1038)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1038)							int state = 2;
HXDLIN(1038)							int _g = 0;
HXDLIN(1038)							while((_g < keys10->length)){
HXLINE(1038)								int key = keys10->__get(_g);
HXDLIN(1038)								_g = (_g + 1);
HXDLIN(1038)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1038)								int state = 1;
HXDLIN(1038)								int _g = 0;
HXDLIN(1038)								while((_g < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g);
HXDLIN(1038)									_g = (_g + 1);
HXDLIN(1038)									action->addKey(key,state);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1038)								int state1 = 2;
HXDLIN(1038)								int _g1 = 0;
HXDLIN(1038)								while((_g1 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g1);
HXDLIN(1038)									_g1 = (_g1 + 1);
HXDLIN(1038)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1038)							{
HXLINE(1038)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1038)								int state2 = -1;
HXDLIN(1038)								int _g2 = 0;
HXDLIN(1038)								while((_g2 < keys10->length)){
HXLINE(1038)									int key = keys10->__get(_g2);
HXDLIN(1038)									_g2 = (_g2 + 1);
HXDLIN(1038)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1039)				{
HXLINE(1039)					::Array< int > keys11 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4006,1);
HXDLIN(1039)					switch((int)(::Control_obj::L2_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1039)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1039)							int state = 2;
HXDLIN(1039)							int _g = 0;
HXDLIN(1039)							while((_g < keys11->length)){
HXLINE(1039)								int key = keys11->__get(_g);
HXDLIN(1039)								_g = (_g + 1);
HXDLIN(1039)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1039)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1039)							int state = 2;
HXDLIN(1039)							int _g = 0;
HXDLIN(1039)							while((_g < keys11->length)){
HXLINE(1039)								int key = keys11->__get(_g);
HXDLIN(1039)								_g = (_g + 1);
HXDLIN(1039)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1039)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1039)							int state = 2;
HXDLIN(1039)							int _g = 0;
HXDLIN(1039)							while((_g < keys11->length)){
HXLINE(1039)								int key = keys11->__get(_g);
HXDLIN(1039)								_g = (_g + 1);
HXDLIN(1039)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1039)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1039)							int state = 2;
HXDLIN(1039)							int _g = 0;
HXDLIN(1039)							while((_g < keys11->length)){
HXLINE(1039)								int key = keys11->__get(_g);
HXDLIN(1039)								_g = (_g + 1);
HXDLIN(1039)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1039)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1039)							int state = 2;
HXDLIN(1039)							int _g = 0;
HXDLIN(1039)							while((_g < keys11->length)){
HXLINE(1039)								int key = keys11->__get(_g);
HXDLIN(1039)								_g = (_g + 1);
HXDLIN(1039)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1039)								int state = 1;
HXDLIN(1039)								int _g = 0;
HXDLIN(1039)								while((_g < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g);
HXDLIN(1039)									_g = (_g + 1);
HXDLIN(1039)									action->addKey(key,state);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1039)								int state1 = 2;
HXDLIN(1039)								int _g1 = 0;
HXDLIN(1039)								while((_g1 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g1);
HXDLIN(1039)									_g1 = (_g1 + 1);
HXDLIN(1039)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1039)							{
HXLINE(1039)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1039)								int state2 = -1;
HXDLIN(1039)								int _g2 = 0;
HXDLIN(1039)								while((_g2 < keys11->length)){
HXLINE(1039)									int key = keys11->__get(_g2);
HXDLIN(1039)									_g2 = (_g2 + 1);
HXDLIN(1039)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1040)				{
HXLINE(1040)					::Array< int > keys12 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4007,1);
HXDLIN(1040)					switch((int)(::Control_obj::D1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1040)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1040)							int state = 2;
HXDLIN(1040)							int _g = 0;
HXDLIN(1040)							while((_g < keys12->length)){
HXLINE(1040)								int key = keys12->__get(_g);
HXDLIN(1040)								_g = (_g + 1);
HXDLIN(1040)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1040)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1040)							int state = 2;
HXDLIN(1040)							int _g = 0;
HXDLIN(1040)							while((_g < keys12->length)){
HXLINE(1040)								int key = keys12->__get(_g);
HXDLIN(1040)								_g = (_g + 1);
HXDLIN(1040)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1040)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1040)							int state = 2;
HXDLIN(1040)							int _g = 0;
HXDLIN(1040)							while((_g < keys12->length)){
HXLINE(1040)								int key = keys12->__get(_g);
HXDLIN(1040)								_g = (_g + 1);
HXDLIN(1040)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1040)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1040)							int state = 2;
HXDLIN(1040)							int _g = 0;
HXDLIN(1040)							while((_g < keys12->length)){
HXLINE(1040)								int key = keys12->__get(_g);
HXDLIN(1040)								_g = (_g + 1);
HXDLIN(1040)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1040)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1040)							int state = 2;
HXDLIN(1040)							int _g = 0;
HXDLIN(1040)							while((_g < keys12->length)){
HXLINE(1040)								int key = keys12->__get(_g);
HXDLIN(1040)								_g = (_g + 1);
HXDLIN(1040)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1040)								int state = 1;
HXDLIN(1040)								int _g = 0;
HXDLIN(1040)								while((_g < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g);
HXDLIN(1040)									_g = (_g + 1);
HXDLIN(1040)									action->addKey(key,state);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1040)								int state1 = 2;
HXDLIN(1040)								int _g1 = 0;
HXDLIN(1040)								while((_g1 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g1);
HXDLIN(1040)									_g1 = (_g1 + 1);
HXDLIN(1040)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1040)							{
HXLINE(1040)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1040)								int state2 = -1;
HXDLIN(1040)								int _g2 = 0;
HXDLIN(1040)								while((_g2 < keys12->length)){
HXLINE(1040)									int key = keys12->__get(_g2);
HXDLIN(1040)									_g2 = (_g2 + 1);
HXDLIN(1040)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1041)				{
HXLINE(1041)					::Array< int > keys13 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4008,1);
HXDLIN(1041)					switch((int)(::Control_obj::R2_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1041)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1041)							int state = 2;
HXDLIN(1041)							int _g = 0;
HXDLIN(1041)							while((_g < keys13->length)){
HXLINE(1041)								int key = keys13->__get(_g);
HXDLIN(1041)								_g = (_g + 1);
HXDLIN(1041)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1041)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1041)							int state = 2;
HXDLIN(1041)							int _g = 0;
HXDLIN(1041)							while((_g < keys13->length)){
HXLINE(1041)								int key = keys13->__get(_g);
HXDLIN(1041)								_g = (_g + 1);
HXDLIN(1041)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1041)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1041)							int state = 2;
HXDLIN(1041)							int _g = 0;
HXDLIN(1041)							while((_g < keys13->length)){
HXLINE(1041)								int key = keys13->__get(_g);
HXDLIN(1041)								_g = (_g + 1);
HXDLIN(1041)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1041)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1041)							int state = 2;
HXDLIN(1041)							int _g = 0;
HXDLIN(1041)							while((_g < keys13->length)){
HXLINE(1041)								int key = keys13->__get(_g);
HXDLIN(1041)								_g = (_g + 1);
HXDLIN(1041)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1041)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1041)							int state = 2;
HXDLIN(1041)							int _g = 0;
HXDLIN(1041)							while((_g < keys13->length)){
HXLINE(1041)								int key = keys13->__get(_g);
HXDLIN(1041)								_g = (_g + 1);
HXDLIN(1041)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1041)								int state = 1;
HXDLIN(1041)								int _g = 0;
HXDLIN(1041)								while((_g < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g);
HXDLIN(1041)									_g = (_g + 1);
HXDLIN(1041)									action->addKey(key,state);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1041)								int state1 = 2;
HXDLIN(1041)								int _g1 = 0;
HXDLIN(1041)								while((_g1 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g1);
HXDLIN(1041)									_g1 = (_g1 + 1);
HXDLIN(1041)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1041)							{
HXLINE(1041)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1041)								int state2 = -1;
HXDLIN(1041)								int _g2 = 0;
HXDLIN(1041)								while((_g2 < keys13->length)){
HXLINE(1041)									int key = keys13->__get(_g2);
HXDLIN(1041)									_g2 = (_g2 + 1);
HXDLIN(1041)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(1057)				if (scheme->_hx_getBool(0)) {
HXLINE(1043)					{
HXLINE(1043)						::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4009,2);
HXDLIN(1043)						switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1043)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1043)								int state = 2;
HXDLIN(1043)								int _g = 0;
HXDLIN(1043)								while((_g < keys->length)){
HXLINE(1043)									int key = keys->__get(_g);
HXDLIN(1043)									_g = (_g + 1);
HXDLIN(1043)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1043)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1043)								int state = 2;
HXDLIN(1043)								int _g = 0;
HXDLIN(1043)								while((_g < keys->length)){
HXLINE(1043)									int key = keys->__get(_g);
HXDLIN(1043)									_g = (_g + 1);
HXDLIN(1043)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1043)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1043)								int state = 2;
HXDLIN(1043)								int _g = 0;
HXDLIN(1043)								while((_g < keys->length)){
HXLINE(1043)									int key = keys->__get(_g);
HXDLIN(1043)									_g = (_g + 1);
HXDLIN(1043)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1043)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1043)								int state = 2;
HXDLIN(1043)								int _g = 0;
HXDLIN(1043)								while((_g < keys->length)){
HXLINE(1043)									int key = keys->__get(_g);
HXDLIN(1043)									_g = (_g + 1);
HXDLIN(1043)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1043)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1043)								int state = 2;
HXDLIN(1043)								int _g = 0;
HXDLIN(1043)								while((_g < keys->length)){
HXLINE(1043)									int key = keys->__get(_g);
HXDLIN(1043)									_g = (_g + 1);
HXDLIN(1043)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1043)									int state = 1;
HXDLIN(1043)									int _g = 0;
HXDLIN(1043)									while((_g < keys->length)){
HXLINE(1043)										int key = keys->__get(_g);
HXDLIN(1043)										_g = (_g + 1);
HXDLIN(1043)										action->addKey(key,state);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1043)									int state1 = 2;
HXDLIN(1043)									int _g1 = 0;
HXDLIN(1043)									while((_g1 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g1);
HXDLIN(1043)										_g1 = (_g1 + 1);
HXDLIN(1043)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1043)								{
HXLINE(1043)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1043)									int state2 = -1;
HXDLIN(1043)									int _g2 = 0;
HXDLIN(1043)									while((_g2 < keys->length)){
HXLINE(1043)										int key = keys->__get(_g2);
HXDLIN(1043)										_g2 = (_g2 + 1);
HXDLIN(1043)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1044)					{
HXLINE(1044)						::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4010,2);
HXDLIN(1044)						switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1044)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1044)								int state = 2;
HXDLIN(1044)								int _g = 0;
HXDLIN(1044)								while((_g < keys1->length)){
HXLINE(1044)									int key = keys1->__get(_g);
HXDLIN(1044)									_g = (_g + 1);
HXDLIN(1044)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1044)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1044)								int state = 2;
HXDLIN(1044)								int _g = 0;
HXDLIN(1044)								while((_g < keys1->length)){
HXLINE(1044)									int key = keys1->__get(_g);
HXDLIN(1044)									_g = (_g + 1);
HXDLIN(1044)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1044)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1044)								int state = 2;
HXDLIN(1044)								int _g = 0;
HXDLIN(1044)								while((_g < keys1->length)){
HXLINE(1044)									int key = keys1->__get(_g);
HXDLIN(1044)									_g = (_g + 1);
HXDLIN(1044)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1044)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1044)								int state = 2;
HXDLIN(1044)								int _g = 0;
HXDLIN(1044)								while((_g < keys1->length)){
HXLINE(1044)									int key = keys1->__get(_g);
HXDLIN(1044)									_g = (_g + 1);
HXDLIN(1044)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1044)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1044)								int state = 2;
HXDLIN(1044)								int _g = 0;
HXDLIN(1044)								while((_g < keys1->length)){
HXLINE(1044)									int key = keys1->__get(_g);
HXDLIN(1044)									_g = (_g + 1);
HXDLIN(1044)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1044)									int state = 1;
HXDLIN(1044)									int _g = 0;
HXDLIN(1044)									while((_g < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g);
HXDLIN(1044)										_g = (_g + 1);
HXDLIN(1044)										action->addKey(key,state);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1044)									int state1 = 2;
HXDLIN(1044)									int _g1 = 0;
HXDLIN(1044)									while((_g1 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g1);
HXDLIN(1044)										_g1 = (_g1 + 1);
HXDLIN(1044)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1044)								{
HXLINE(1044)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1044)									int state2 = -1;
HXDLIN(1044)									int _g2 = 0;
HXDLIN(1044)									while((_g2 < keys1->length)){
HXLINE(1044)										int key = keys1->__get(_g2);
HXDLIN(1044)										_g2 = (_g2 + 1);
HXDLIN(1044)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1045)					{
HXLINE(1045)						::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4011,2);
HXDLIN(1045)						switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1045)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1045)								int state = 2;
HXDLIN(1045)								int _g = 0;
HXDLIN(1045)								while((_g < keys2->length)){
HXLINE(1045)									int key = keys2->__get(_g);
HXDLIN(1045)									_g = (_g + 1);
HXDLIN(1045)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1045)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1045)								int state = 2;
HXDLIN(1045)								int _g = 0;
HXDLIN(1045)								while((_g < keys2->length)){
HXLINE(1045)									int key = keys2->__get(_g);
HXDLIN(1045)									_g = (_g + 1);
HXDLIN(1045)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1045)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1045)								int state = 2;
HXDLIN(1045)								int _g = 0;
HXDLIN(1045)								while((_g < keys2->length)){
HXLINE(1045)									int key = keys2->__get(_g);
HXDLIN(1045)									_g = (_g + 1);
HXDLIN(1045)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1045)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1045)								int state = 2;
HXDLIN(1045)								int _g = 0;
HXDLIN(1045)								while((_g < keys2->length)){
HXLINE(1045)									int key = keys2->__get(_g);
HXDLIN(1045)									_g = (_g + 1);
HXDLIN(1045)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1045)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1045)								int state = 2;
HXDLIN(1045)								int _g = 0;
HXDLIN(1045)								while((_g < keys2->length)){
HXLINE(1045)									int key = keys2->__get(_g);
HXDLIN(1045)									_g = (_g + 1);
HXDLIN(1045)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1045)									int state = 1;
HXDLIN(1045)									int _g = 0;
HXDLIN(1045)									while((_g < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g);
HXDLIN(1045)										_g = (_g + 1);
HXDLIN(1045)										action->addKey(key,state);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1045)									int state1 = 2;
HXDLIN(1045)									int _g1 = 0;
HXDLIN(1045)									while((_g1 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g1);
HXDLIN(1045)										_g1 = (_g1 + 1);
HXDLIN(1045)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1045)								{
HXLINE(1045)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1045)									int state2 = -1;
HXDLIN(1045)									int _g2 = 0;
HXDLIN(1045)									while((_g2 < keys2->length)){
HXLINE(1045)										int key = keys2->__get(_g2);
HXDLIN(1045)										_g2 = (_g2 + 1);
HXDLIN(1045)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1046)					{
HXLINE(1046)						::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4012,2);
HXDLIN(1046)						switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1046)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1046)								int state = 2;
HXDLIN(1046)								int _g = 0;
HXDLIN(1046)								while((_g < keys3->length)){
HXLINE(1046)									int key = keys3->__get(_g);
HXDLIN(1046)									_g = (_g + 1);
HXDLIN(1046)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1046)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1046)								int state = 2;
HXDLIN(1046)								int _g = 0;
HXDLIN(1046)								while((_g < keys3->length)){
HXLINE(1046)									int key = keys3->__get(_g);
HXDLIN(1046)									_g = (_g + 1);
HXDLIN(1046)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1046)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1046)								int state = 2;
HXDLIN(1046)								int _g = 0;
HXDLIN(1046)								while((_g < keys3->length)){
HXLINE(1046)									int key = keys3->__get(_g);
HXDLIN(1046)									_g = (_g + 1);
HXDLIN(1046)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1046)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1046)								int state = 2;
HXDLIN(1046)								int _g = 0;
HXDLIN(1046)								while((_g < keys3->length)){
HXLINE(1046)									int key = keys3->__get(_g);
HXDLIN(1046)									_g = (_g + 1);
HXDLIN(1046)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1046)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1046)								int state = 2;
HXDLIN(1046)								int _g = 0;
HXDLIN(1046)								while((_g < keys3->length)){
HXLINE(1046)									int key = keys3->__get(_g);
HXDLIN(1046)									_g = (_g + 1);
HXDLIN(1046)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1046)									int state = 1;
HXDLIN(1046)									int _g = 0;
HXDLIN(1046)									while((_g < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g);
HXDLIN(1046)										_g = (_g + 1);
HXDLIN(1046)										action->addKey(key,state);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1046)									int state1 = 2;
HXDLIN(1046)									int _g1 = 0;
HXDLIN(1046)									while((_g1 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g1);
HXDLIN(1046)										_g1 = (_g1 + 1);
HXDLIN(1046)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1046)								{
HXLINE(1046)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1046)									int state2 = -1;
HXDLIN(1046)									int _g2 = 0;
HXDLIN(1046)									while((_g2 < keys3->length)){
HXLINE(1046)										int key = keys3->__get(_g2);
HXDLIN(1046)										_g2 = (_g2 + 1);
HXDLIN(1046)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1047)					{
HXLINE(1047)						::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4013,4);
HXDLIN(1047)						switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1047)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1047)								int state = 2;
HXDLIN(1047)								int _g = 0;
HXDLIN(1047)								while((_g < keys4->length)){
HXLINE(1047)									int key = keys4->__get(_g);
HXDLIN(1047)									_g = (_g + 1);
HXDLIN(1047)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1047)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1047)								int state = 2;
HXDLIN(1047)								int _g = 0;
HXDLIN(1047)								while((_g < keys4->length)){
HXLINE(1047)									int key = keys4->__get(_g);
HXDLIN(1047)									_g = (_g + 1);
HXDLIN(1047)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1047)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1047)								int state = 2;
HXDLIN(1047)								int _g = 0;
HXDLIN(1047)								while((_g < keys4->length)){
HXLINE(1047)									int key = keys4->__get(_g);
HXDLIN(1047)									_g = (_g + 1);
HXDLIN(1047)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1047)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1047)								int state = 2;
HXDLIN(1047)								int _g = 0;
HXDLIN(1047)								while((_g < keys4->length)){
HXLINE(1047)									int key = keys4->__get(_g);
HXDLIN(1047)									_g = (_g + 1);
HXDLIN(1047)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1047)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1047)								int state = 2;
HXDLIN(1047)								int _g = 0;
HXDLIN(1047)								while((_g < keys4->length)){
HXLINE(1047)									int key = keys4->__get(_g);
HXDLIN(1047)									_g = (_g + 1);
HXDLIN(1047)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1047)									int state = 1;
HXDLIN(1047)									int _g = 0;
HXDLIN(1047)									while((_g < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g);
HXDLIN(1047)										_g = (_g + 1);
HXDLIN(1047)										action->addKey(key,state);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1047)									int state1 = 2;
HXDLIN(1047)									int _g1 = 0;
HXDLIN(1047)									while((_g1 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g1);
HXDLIN(1047)										_g1 = (_g1 + 1);
HXDLIN(1047)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1047)								{
HXLINE(1047)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1047)									int state2 = -1;
HXDLIN(1047)									int _g2 = 0;
HXDLIN(1047)									while((_g2 < keys4->length)){
HXLINE(1047)										int key = keys4->__get(_g2);
HXDLIN(1047)										_g2 = (_g2 + 1);
HXDLIN(1047)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1048)					{
HXLINE(1048)						::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4014,2);
HXDLIN(1048)						switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1048)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1048)								int state = 2;
HXDLIN(1048)								int _g = 0;
HXDLIN(1048)								while((_g < keys5->length)){
HXLINE(1048)									int key = keys5->__get(_g);
HXDLIN(1048)									_g = (_g + 1);
HXDLIN(1048)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1048)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1048)								int state = 2;
HXDLIN(1048)								int _g = 0;
HXDLIN(1048)								while((_g < keys5->length)){
HXLINE(1048)									int key = keys5->__get(_g);
HXDLIN(1048)									_g = (_g + 1);
HXDLIN(1048)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1048)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1048)								int state = 2;
HXDLIN(1048)								int _g = 0;
HXDLIN(1048)								while((_g < keys5->length)){
HXLINE(1048)									int key = keys5->__get(_g);
HXDLIN(1048)									_g = (_g + 1);
HXDLIN(1048)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1048)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1048)								int state = 2;
HXDLIN(1048)								int _g = 0;
HXDLIN(1048)								while((_g < keys5->length)){
HXLINE(1048)									int key = keys5->__get(_g);
HXDLIN(1048)									_g = (_g + 1);
HXDLIN(1048)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1048)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1048)								int state = 2;
HXDLIN(1048)								int _g = 0;
HXDLIN(1048)								while((_g < keys5->length)){
HXLINE(1048)									int key = keys5->__get(_g);
HXDLIN(1048)									_g = (_g + 1);
HXDLIN(1048)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1048)									int state = 1;
HXDLIN(1048)									int _g = 0;
HXDLIN(1048)									while((_g < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g);
HXDLIN(1048)										_g = (_g + 1);
HXDLIN(1048)										action->addKey(key,state);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1048)									int state1 = 2;
HXDLIN(1048)									int _g1 = 0;
HXDLIN(1048)									while((_g1 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g1);
HXDLIN(1048)										_g1 = (_g1 + 1);
HXDLIN(1048)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1048)								{
HXLINE(1048)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1048)									int state2 = -1;
HXDLIN(1048)									int _g2 = 0;
HXDLIN(1048)									while((_g2 < keys5->length)){
HXLINE(1048)										int key = keys5->__get(_g2);
HXDLIN(1048)										_g2 = (_g2 + 1);
HXDLIN(1048)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1049)					{
HXLINE(1049)						::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4015,1);
HXDLIN(1049)						switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1049)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1049)								int state = 2;
HXDLIN(1049)								int _g = 0;
HXDLIN(1049)								while((_g < keys6->length)){
HXLINE(1049)									int key = keys6->__get(_g);
HXDLIN(1049)									_g = (_g + 1);
HXDLIN(1049)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1049)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1049)								int state = 2;
HXDLIN(1049)								int _g = 0;
HXDLIN(1049)								while((_g < keys6->length)){
HXLINE(1049)									int key = keys6->__get(_g);
HXDLIN(1049)									_g = (_g + 1);
HXDLIN(1049)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1049)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1049)								int state = 2;
HXDLIN(1049)								int _g = 0;
HXDLIN(1049)								while((_g < keys6->length)){
HXLINE(1049)									int key = keys6->__get(_g);
HXDLIN(1049)									_g = (_g + 1);
HXDLIN(1049)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1049)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1049)								int state = 2;
HXDLIN(1049)								int _g = 0;
HXDLIN(1049)								while((_g < keys6->length)){
HXLINE(1049)									int key = keys6->__get(_g);
HXDLIN(1049)									_g = (_g + 1);
HXDLIN(1049)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1049)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1049)								int state = 2;
HXDLIN(1049)								int _g = 0;
HXDLIN(1049)								while((_g < keys6->length)){
HXLINE(1049)									int key = keys6->__get(_g);
HXDLIN(1049)									_g = (_g + 1);
HXDLIN(1049)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1049)									int state = 1;
HXDLIN(1049)									int _g = 0;
HXDLIN(1049)									while((_g < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g);
HXDLIN(1049)										_g = (_g + 1);
HXDLIN(1049)										action->addKey(key,state);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1049)									int state1 = 2;
HXDLIN(1049)									int _g1 = 0;
HXDLIN(1049)									while((_g1 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g1);
HXDLIN(1049)										_g1 = (_g1 + 1);
HXDLIN(1049)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1049)								{
HXLINE(1049)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1049)									int state2 = -1;
HXDLIN(1049)									int _g2 = 0;
HXDLIN(1049)									while((_g2 < keys6->length)){
HXLINE(1049)										int key = keys6->__get(_g2);
HXDLIN(1049)										_g2 = (_g2 + 1);
HXDLIN(1049)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1051)					{
HXLINE(1051)						::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4016,1);
HXDLIN(1051)						switch((int)(::Control_obj::L1_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1051)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1051)								int state = 2;
HXDLIN(1051)								int _g = 0;
HXDLIN(1051)								while((_g < keys7->length)){
HXLINE(1051)									int key = keys7->__get(_g);
HXDLIN(1051)									_g = (_g + 1);
HXDLIN(1051)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1051)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1051)								int state = 2;
HXDLIN(1051)								int _g = 0;
HXDLIN(1051)								while((_g < keys7->length)){
HXLINE(1051)									int key = keys7->__get(_g);
HXDLIN(1051)									_g = (_g + 1);
HXDLIN(1051)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1051)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1051)								int state = 2;
HXDLIN(1051)								int _g = 0;
HXDLIN(1051)								while((_g < keys7->length)){
HXLINE(1051)									int key = keys7->__get(_g);
HXDLIN(1051)									_g = (_g + 1);
HXDLIN(1051)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1051)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1051)								int state = 2;
HXDLIN(1051)								int _g = 0;
HXDLIN(1051)								while((_g < keys7->length)){
HXLINE(1051)									int key = keys7->__get(_g);
HXDLIN(1051)									_g = (_g + 1);
HXDLIN(1051)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1051)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1051)								int state = 2;
HXDLIN(1051)								int _g = 0;
HXDLIN(1051)								while((_g < keys7->length)){
HXLINE(1051)									int key = keys7->__get(_g);
HXDLIN(1051)									_g = (_g + 1);
HXDLIN(1051)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1051)									int state = 1;
HXDLIN(1051)									int _g = 0;
HXDLIN(1051)									while((_g < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g);
HXDLIN(1051)										_g = (_g + 1);
HXDLIN(1051)										action->addKey(key,state);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1051)									int state1 = 2;
HXDLIN(1051)									int _g1 = 0;
HXDLIN(1051)									while((_g1 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g1);
HXDLIN(1051)										_g1 = (_g1 + 1);
HXDLIN(1051)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1051)								{
HXLINE(1051)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1051)									int state2 = -1;
HXDLIN(1051)									int _g2 = 0;
HXDLIN(1051)									while((_g2 < keys7->length)){
HXLINE(1051)										int key = keys7->__get(_g2);
HXDLIN(1051)										_g2 = (_g2 + 1);
HXDLIN(1051)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1052)					{
HXLINE(1052)						::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4017,1);
HXDLIN(1052)						switch((int)(::Control_obj::U1_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1052)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1052)								int state = 2;
HXDLIN(1052)								int _g = 0;
HXDLIN(1052)								while((_g < keys8->length)){
HXLINE(1052)									int key = keys8->__get(_g);
HXDLIN(1052)									_g = (_g + 1);
HXDLIN(1052)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1052)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1052)								int state = 2;
HXDLIN(1052)								int _g = 0;
HXDLIN(1052)								while((_g < keys8->length)){
HXLINE(1052)									int key = keys8->__get(_g);
HXDLIN(1052)									_g = (_g + 1);
HXDLIN(1052)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1052)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1052)								int state = 2;
HXDLIN(1052)								int _g = 0;
HXDLIN(1052)								while((_g < keys8->length)){
HXLINE(1052)									int key = keys8->__get(_g);
HXDLIN(1052)									_g = (_g + 1);
HXDLIN(1052)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1052)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1052)								int state = 2;
HXDLIN(1052)								int _g = 0;
HXDLIN(1052)								while((_g < keys8->length)){
HXLINE(1052)									int key = keys8->__get(_g);
HXDLIN(1052)									_g = (_g + 1);
HXDLIN(1052)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1052)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1052)								int state = 2;
HXDLIN(1052)								int _g = 0;
HXDLIN(1052)								while((_g < keys8->length)){
HXLINE(1052)									int key = keys8->__get(_g);
HXDLIN(1052)									_g = (_g + 1);
HXDLIN(1052)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1052)									int state = 1;
HXDLIN(1052)									int _g = 0;
HXDLIN(1052)									while((_g < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g);
HXDLIN(1052)										_g = (_g + 1);
HXDLIN(1052)										action->addKey(key,state);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1052)									int state1 = 2;
HXDLIN(1052)									int _g1 = 0;
HXDLIN(1052)									while((_g1 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g1);
HXDLIN(1052)										_g1 = (_g1 + 1);
HXDLIN(1052)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1052)								{
HXLINE(1052)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1052)									int state2 = -1;
HXDLIN(1052)									int _g2 = 0;
HXDLIN(1052)									while((_g2 < keys8->length)){
HXLINE(1052)										int key = keys8->__get(_g2);
HXDLIN(1052)										_g2 = (_g2 + 1);
HXDLIN(1052)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1053)					{
HXLINE(1053)						::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4018,1);
HXDLIN(1053)						switch((int)(::Control_obj::R1_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1053)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1053)								int state = 2;
HXDLIN(1053)								int _g = 0;
HXDLIN(1053)								while((_g < keys9->length)){
HXLINE(1053)									int key = keys9->__get(_g);
HXDLIN(1053)									_g = (_g + 1);
HXDLIN(1053)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1053)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1053)								int state = 2;
HXDLIN(1053)								int _g = 0;
HXDLIN(1053)								while((_g < keys9->length)){
HXLINE(1053)									int key = keys9->__get(_g);
HXDLIN(1053)									_g = (_g + 1);
HXDLIN(1053)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1053)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1053)								int state = 2;
HXDLIN(1053)								int _g = 0;
HXDLIN(1053)								while((_g < keys9->length)){
HXLINE(1053)									int key = keys9->__get(_g);
HXDLIN(1053)									_g = (_g + 1);
HXDLIN(1053)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1053)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1053)								int state = 2;
HXDLIN(1053)								int _g = 0;
HXDLIN(1053)								while((_g < keys9->length)){
HXLINE(1053)									int key = keys9->__get(_g);
HXDLIN(1053)									_g = (_g + 1);
HXDLIN(1053)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1053)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1053)								int state = 2;
HXDLIN(1053)								int _g = 0;
HXDLIN(1053)								while((_g < keys9->length)){
HXLINE(1053)									int key = keys9->__get(_g);
HXDLIN(1053)									_g = (_g + 1);
HXDLIN(1053)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1053)									int state = 1;
HXDLIN(1053)									int _g = 0;
HXDLIN(1053)									while((_g < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g);
HXDLIN(1053)										_g = (_g + 1);
HXDLIN(1053)										action->addKey(key,state);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1053)									int state1 = 2;
HXDLIN(1053)									int _g1 = 0;
HXDLIN(1053)									while((_g1 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g1);
HXDLIN(1053)										_g1 = (_g1 + 1);
HXDLIN(1053)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1053)								{
HXLINE(1053)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1053)									int state2 = -1;
HXDLIN(1053)									int _g2 = 0;
HXDLIN(1053)									while((_g2 < keys9->length)){
HXLINE(1053)										int key = keys9->__get(_g2);
HXDLIN(1053)										_g2 = (_g2 + 1);
HXDLIN(1053)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1054)					{
HXLINE(1054)						::Array< int > keys10 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4019,1);
HXDLIN(1054)						switch((int)(::Control_obj::L2_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1054)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1054)								int state = 2;
HXDLIN(1054)								int _g = 0;
HXDLIN(1054)								while((_g < keys10->length)){
HXLINE(1054)									int key = keys10->__get(_g);
HXDLIN(1054)									_g = (_g + 1);
HXDLIN(1054)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1054)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1054)								int state = 2;
HXDLIN(1054)								int _g = 0;
HXDLIN(1054)								while((_g < keys10->length)){
HXLINE(1054)									int key = keys10->__get(_g);
HXDLIN(1054)									_g = (_g + 1);
HXDLIN(1054)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1054)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1054)								int state = 2;
HXDLIN(1054)								int _g = 0;
HXDLIN(1054)								while((_g < keys10->length)){
HXLINE(1054)									int key = keys10->__get(_g);
HXDLIN(1054)									_g = (_g + 1);
HXDLIN(1054)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1054)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1054)								int state = 2;
HXDLIN(1054)								int _g = 0;
HXDLIN(1054)								while((_g < keys10->length)){
HXLINE(1054)									int key = keys10->__get(_g);
HXDLIN(1054)									_g = (_g + 1);
HXDLIN(1054)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1054)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1054)								int state = 2;
HXDLIN(1054)								int _g = 0;
HXDLIN(1054)								while((_g < keys10->length)){
HXLINE(1054)									int key = keys10->__get(_g);
HXDLIN(1054)									_g = (_g + 1);
HXDLIN(1054)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1054)									int state = 1;
HXDLIN(1054)									int _g = 0;
HXDLIN(1054)									while((_g < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g);
HXDLIN(1054)										_g = (_g + 1);
HXDLIN(1054)										action->addKey(key,state);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1054)									int state1 = 2;
HXDLIN(1054)									int _g1 = 0;
HXDLIN(1054)									while((_g1 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g1);
HXDLIN(1054)										_g1 = (_g1 + 1);
HXDLIN(1054)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1054)								{
HXLINE(1054)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1054)									int state2 = -1;
HXDLIN(1054)									int _g2 = 0;
HXDLIN(1054)									while((_g2 < keys10->length)){
HXLINE(1054)										int key = keys10->__get(_g2);
HXDLIN(1054)										_g2 = (_g2 + 1);
HXDLIN(1054)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1055)					{
HXLINE(1055)						::Array< int > keys11 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4020,1);
HXDLIN(1055)						switch((int)(::Control_obj::D1_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1055)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1055)								int state = 2;
HXDLIN(1055)								int _g = 0;
HXDLIN(1055)								while((_g < keys11->length)){
HXLINE(1055)									int key = keys11->__get(_g);
HXDLIN(1055)									_g = (_g + 1);
HXDLIN(1055)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1055)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1055)								int state = 2;
HXDLIN(1055)								int _g = 0;
HXDLIN(1055)								while((_g < keys11->length)){
HXLINE(1055)									int key = keys11->__get(_g);
HXDLIN(1055)									_g = (_g + 1);
HXDLIN(1055)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1055)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1055)								int state = 2;
HXDLIN(1055)								int _g = 0;
HXDLIN(1055)								while((_g < keys11->length)){
HXLINE(1055)									int key = keys11->__get(_g);
HXDLIN(1055)									_g = (_g + 1);
HXDLIN(1055)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1055)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1055)								int state = 2;
HXDLIN(1055)								int _g = 0;
HXDLIN(1055)								while((_g < keys11->length)){
HXLINE(1055)									int key = keys11->__get(_g);
HXDLIN(1055)									_g = (_g + 1);
HXDLIN(1055)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1055)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1055)								int state = 2;
HXDLIN(1055)								int _g = 0;
HXDLIN(1055)								while((_g < keys11->length)){
HXLINE(1055)									int key = keys11->__get(_g);
HXDLIN(1055)									_g = (_g + 1);
HXDLIN(1055)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1055)									int state = 1;
HXDLIN(1055)									int _g = 0;
HXDLIN(1055)									while((_g < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g);
HXDLIN(1055)										_g = (_g + 1);
HXDLIN(1055)										action->addKey(key,state);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1055)									int state1 = 2;
HXDLIN(1055)									int _g1 = 0;
HXDLIN(1055)									while((_g1 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g1);
HXDLIN(1055)										_g1 = (_g1 + 1);
HXDLIN(1055)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1055)								{
HXLINE(1055)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1055)									int state2 = -1;
HXDLIN(1055)									int _g2 = 0;
HXDLIN(1055)									while((_g2 < keys11->length)){
HXLINE(1055)										int key = keys11->__get(_g2);
HXDLIN(1055)										_g2 = (_g2 + 1);
HXDLIN(1055)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1056)					{
HXLINE(1056)						::Array< int > keys12 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4021,1);
HXDLIN(1056)						switch((int)(::Control_obj::R2_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1056)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1056)								int state = 2;
HXDLIN(1056)								int _g = 0;
HXDLIN(1056)								while((_g < keys12->length)){
HXLINE(1056)									int key = keys12->__get(_g);
HXDLIN(1056)									_g = (_g + 1);
HXDLIN(1056)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1056)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1056)								int state = 2;
HXDLIN(1056)								int _g = 0;
HXDLIN(1056)								while((_g < keys12->length)){
HXLINE(1056)									int key = keys12->__get(_g);
HXDLIN(1056)									_g = (_g + 1);
HXDLIN(1056)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1056)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1056)								int state = 2;
HXDLIN(1056)								int _g = 0;
HXDLIN(1056)								while((_g < keys12->length)){
HXLINE(1056)									int key = keys12->__get(_g);
HXDLIN(1056)									_g = (_g + 1);
HXDLIN(1056)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1056)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1056)								int state = 2;
HXDLIN(1056)								int _g = 0;
HXDLIN(1056)								while((_g < keys12->length)){
HXLINE(1056)									int key = keys12->__get(_g);
HXDLIN(1056)									_g = (_g + 1);
HXDLIN(1056)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1056)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1056)								int state = 2;
HXDLIN(1056)								int _g = 0;
HXDLIN(1056)								while((_g < keys12->length)){
HXLINE(1056)									int key = keys12->__get(_g);
HXDLIN(1056)									_g = (_g + 1);
HXDLIN(1056)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1056)									int state = 1;
HXDLIN(1056)									int _g = 0;
HXDLIN(1056)									while((_g < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g);
HXDLIN(1056)										_g = (_g + 1);
HXDLIN(1056)										action->addKey(key,state);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1056)									int state1 = 2;
HXDLIN(1056)									int _g1 = 0;
HXDLIN(1056)									while((_g1 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g1);
HXDLIN(1056)										_g1 = (_g1 + 1);
HXDLIN(1056)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1056)								{
HXLINE(1056)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1056)									int state2 = -1;
HXDLIN(1056)									int _g2 = 0;
HXDLIN(1056)									while((_g2 < keys12->length)){
HXLINE(1056)										int key = keys12->__get(_g2);
HXDLIN(1056)										_g2 = (_g2 + 1);
HXDLIN(1056)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            				else {
HXLINE(1058)					{
HXLINE(1058)						::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4022,1);
HXDLIN(1058)						switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1058)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1058)								int state = 2;
HXDLIN(1058)								int _g = 0;
HXDLIN(1058)								while((_g < keys->length)){
HXLINE(1058)									int key = keys->__get(_g);
HXDLIN(1058)									_g = (_g + 1);
HXDLIN(1058)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1058)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1058)								int state = 2;
HXDLIN(1058)								int _g = 0;
HXDLIN(1058)								while((_g < keys->length)){
HXLINE(1058)									int key = keys->__get(_g);
HXDLIN(1058)									_g = (_g + 1);
HXDLIN(1058)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1058)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1058)								int state = 2;
HXDLIN(1058)								int _g = 0;
HXDLIN(1058)								while((_g < keys->length)){
HXLINE(1058)									int key = keys->__get(_g);
HXDLIN(1058)									_g = (_g + 1);
HXDLIN(1058)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1058)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1058)								int state = 2;
HXDLIN(1058)								int _g = 0;
HXDLIN(1058)								while((_g < keys->length)){
HXLINE(1058)									int key = keys->__get(_g);
HXDLIN(1058)									_g = (_g + 1);
HXDLIN(1058)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1058)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1058)								int state = 2;
HXDLIN(1058)								int _g = 0;
HXDLIN(1058)								while((_g < keys->length)){
HXLINE(1058)									int key = keys->__get(_g);
HXDLIN(1058)									_g = (_g + 1);
HXDLIN(1058)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1058)									int state = 1;
HXDLIN(1058)									int _g = 0;
HXDLIN(1058)									while((_g < keys->length)){
HXLINE(1058)										int key = keys->__get(_g);
HXDLIN(1058)										_g = (_g + 1);
HXDLIN(1058)										action->addKey(key,state);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1058)									int state1 = 2;
HXDLIN(1058)									int _g1 = 0;
HXDLIN(1058)									while((_g1 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g1);
HXDLIN(1058)										_g1 = (_g1 + 1);
HXDLIN(1058)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1058)								{
HXLINE(1058)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1058)									int state2 = -1;
HXDLIN(1058)									int _g2 = 0;
HXDLIN(1058)									while((_g2 < keys->length)){
HXLINE(1058)										int key = keys->__get(_g2);
HXDLIN(1058)										_g2 = (_g2 + 1);
HXDLIN(1058)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1059)					{
HXLINE(1059)						::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4023,1);
HXDLIN(1059)						switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1059)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1059)								int state = 2;
HXDLIN(1059)								int _g = 0;
HXDLIN(1059)								while((_g < keys1->length)){
HXLINE(1059)									int key = keys1->__get(_g);
HXDLIN(1059)									_g = (_g + 1);
HXDLIN(1059)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1059)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1059)								int state = 2;
HXDLIN(1059)								int _g = 0;
HXDLIN(1059)								while((_g < keys1->length)){
HXLINE(1059)									int key = keys1->__get(_g);
HXDLIN(1059)									_g = (_g + 1);
HXDLIN(1059)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1059)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1059)								int state = 2;
HXDLIN(1059)								int _g = 0;
HXDLIN(1059)								while((_g < keys1->length)){
HXLINE(1059)									int key = keys1->__get(_g);
HXDLIN(1059)									_g = (_g + 1);
HXDLIN(1059)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1059)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1059)								int state = 2;
HXDLIN(1059)								int _g = 0;
HXDLIN(1059)								while((_g < keys1->length)){
HXLINE(1059)									int key = keys1->__get(_g);
HXDLIN(1059)									_g = (_g + 1);
HXDLIN(1059)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1059)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1059)								int state = 2;
HXDLIN(1059)								int _g = 0;
HXDLIN(1059)								while((_g < keys1->length)){
HXLINE(1059)									int key = keys1->__get(_g);
HXDLIN(1059)									_g = (_g + 1);
HXDLIN(1059)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1059)									int state = 1;
HXDLIN(1059)									int _g = 0;
HXDLIN(1059)									while((_g < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g);
HXDLIN(1059)										_g = (_g + 1);
HXDLIN(1059)										action->addKey(key,state);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1059)									int state1 = 2;
HXDLIN(1059)									int _g1 = 0;
HXDLIN(1059)									while((_g1 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g1);
HXDLIN(1059)										_g1 = (_g1 + 1);
HXDLIN(1059)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1059)								{
HXLINE(1059)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1059)									int state2 = -1;
HXDLIN(1059)									int _g2 = 0;
HXDLIN(1059)									while((_g2 < keys1->length)){
HXLINE(1059)										int key = keys1->__get(_g2);
HXDLIN(1059)										_g2 = (_g2 + 1);
HXDLIN(1059)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1060)					{
HXLINE(1060)						::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4024,1);
HXDLIN(1060)						switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1060)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1060)								int state = 2;
HXDLIN(1060)								int _g = 0;
HXDLIN(1060)								while((_g < keys2->length)){
HXLINE(1060)									int key = keys2->__get(_g);
HXDLIN(1060)									_g = (_g + 1);
HXDLIN(1060)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1060)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1060)								int state = 2;
HXDLIN(1060)								int _g = 0;
HXDLIN(1060)								while((_g < keys2->length)){
HXLINE(1060)									int key = keys2->__get(_g);
HXDLIN(1060)									_g = (_g + 1);
HXDLIN(1060)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1060)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1060)								int state = 2;
HXDLIN(1060)								int _g = 0;
HXDLIN(1060)								while((_g < keys2->length)){
HXLINE(1060)									int key = keys2->__get(_g);
HXDLIN(1060)									_g = (_g + 1);
HXDLIN(1060)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1060)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1060)								int state = 2;
HXDLIN(1060)								int _g = 0;
HXDLIN(1060)								while((_g < keys2->length)){
HXLINE(1060)									int key = keys2->__get(_g);
HXDLIN(1060)									_g = (_g + 1);
HXDLIN(1060)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1060)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1060)								int state = 2;
HXDLIN(1060)								int _g = 0;
HXDLIN(1060)								while((_g < keys2->length)){
HXLINE(1060)									int key = keys2->__get(_g);
HXDLIN(1060)									_g = (_g + 1);
HXDLIN(1060)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1060)									int state = 1;
HXDLIN(1060)									int _g = 0;
HXDLIN(1060)									while((_g < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g);
HXDLIN(1060)										_g = (_g + 1);
HXDLIN(1060)										action->addKey(key,state);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1060)									int state1 = 2;
HXDLIN(1060)									int _g1 = 0;
HXDLIN(1060)									while((_g1 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g1);
HXDLIN(1060)										_g1 = (_g1 + 1);
HXDLIN(1060)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1060)								{
HXLINE(1060)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1060)									int state2 = -1;
HXDLIN(1060)									int _g2 = 0;
HXDLIN(1060)									while((_g2 < keys2->length)){
HXLINE(1060)										int key = keys2->__get(_g2);
HXDLIN(1060)										_g2 = (_g2 + 1);
HXDLIN(1060)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1061)					{
HXLINE(1061)						::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4025,1);
HXDLIN(1061)						switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1061)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1061)								int state = 2;
HXDLIN(1061)								int _g = 0;
HXDLIN(1061)								while((_g < keys3->length)){
HXLINE(1061)									int key = keys3->__get(_g);
HXDLIN(1061)									_g = (_g + 1);
HXDLIN(1061)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1061)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1061)								int state = 2;
HXDLIN(1061)								int _g = 0;
HXDLIN(1061)								while((_g < keys3->length)){
HXLINE(1061)									int key = keys3->__get(_g);
HXDLIN(1061)									_g = (_g + 1);
HXDLIN(1061)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1061)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1061)								int state = 2;
HXDLIN(1061)								int _g = 0;
HXDLIN(1061)								while((_g < keys3->length)){
HXLINE(1061)									int key = keys3->__get(_g);
HXDLIN(1061)									_g = (_g + 1);
HXDLIN(1061)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1061)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1061)								int state = 2;
HXDLIN(1061)								int _g = 0;
HXDLIN(1061)								while((_g < keys3->length)){
HXLINE(1061)									int key = keys3->__get(_g);
HXDLIN(1061)									_g = (_g + 1);
HXDLIN(1061)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1061)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1061)								int state = 2;
HXDLIN(1061)								int _g = 0;
HXDLIN(1061)								while((_g < keys3->length)){
HXLINE(1061)									int key = keys3->__get(_g);
HXDLIN(1061)									_g = (_g + 1);
HXDLIN(1061)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1061)									int state = 1;
HXDLIN(1061)									int _g = 0;
HXDLIN(1061)									while((_g < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g);
HXDLIN(1061)										_g = (_g + 1);
HXDLIN(1061)										action->addKey(key,state);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1061)									int state1 = 2;
HXDLIN(1061)									int _g1 = 0;
HXDLIN(1061)									while((_g1 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g1);
HXDLIN(1061)										_g1 = (_g1 + 1);
HXDLIN(1061)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1061)								{
HXLINE(1061)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1061)									int state2 = -1;
HXDLIN(1061)									int _g2 = 0;
HXDLIN(1061)									while((_g2 < keys3->length)){
HXLINE(1061)										int key = keys3->__get(_g2);
HXDLIN(1061)										_g2 = (_g2 + 1);
HXDLIN(1061)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1062)					{
HXLINE(1062)						::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4026,1);
HXDLIN(1062)						switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1062)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1062)								int state = 2;
HXDLIN(1062)								int _g = 0;
HXDLIN(1062)								while((_g < keys4->length)){
HXLINE(1062)									int key = keys4->__get(_g);
HXDLIN(1062)									_g = (_g + 1);
HXDLIN(1062)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1062)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1062)								int state = 2;
HXDLIN(1062)								int _g = 0;
HXDLIN(1062)								while((_g < keys4->length)){
HXLINE(1062)									int key = keys4->__get(_g);
HXDLIN(1062)									_g = (_g + 1);
HXDLIN(1062)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1062)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1062)								int state = 2;
HXDLIN(1062)								int _g = 0;
HXDLIN(1062)								while((_g < keys4->length)){
HXLINE(1062)									int key = keys4->__get(_g);
HXDLIN(1062)									_g = (_g + 1);
HXDLIN(1062)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1062)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1062)								int state = 2;
HXDLIN(1062)								int _g = 0;
HXDLIN(1062)								while((_g < keys4->length)){
HXLINE(1062)									int key = keys4->__get(_g);
HXDLIN(1062)									_g = (_g + 1);
HXDLIN(1062)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1062)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1062)								int state = 2;
HXDLIN(1062)								int _g = 0;
HXDLIN(1062)								while((_g < keys4->length)){
HXLINE(1062)									int key = keys4->__get(_g);
HXDLIN(1062)									_g = (_g + 1);
HXDLIN(1062)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1062)									int state = 1;
HXDLIN(1062)									int _g = 0;
HXDLIN(1062)									while((_g < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g);
HXDLIN(1062)										_g = (_g + 1);
HXDLIN(1062)										action->addKey(key,state);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1062)									int state1 = 2;
HXDLIN(1062)									int _g1 = 0;
HXDLIN(1062)									while((_g1 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g1);
HXDLIN(1062)										_g1 = (_g1 + 1);
HXDLIN(1062)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1062)								{
HXLINE(1062)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1062)									int state2 = -1;
HXDLIN(1062)									int _g2 = 0;
HXDLIN(1062)									while((_g2 < keys4->length)){
HXLINE(1062)										int key = keys4->__get(_g2);
HXDLIN(1062)										_g2 = (_g2 + 1);
HXDLIN(1062)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1063)					{
HXLINE(1063)						::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4027,1);
HXDLIN(1063)						switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1063)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1063)								int state = 2;
HXDLIN(1063)								int _g = 0;
HXDLIN(1063)								while((_g < keys5->length)){
HXLINE(1063)									int key = keys5->__get(_g);
HXDLIN(1063)									_g = (_g + 1);
HXDLIN(1063)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1063)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1063)								int state = 2;
HXDLIN(1063)								int _g = 0;
HXDLIN(1063)								while((_g < keys5->length)){
HXLINE(1063)									int key = keys5->__get(_g);
HXDLIN(1063)									_g = (_g + 1);
HXDLIN(1063)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1063)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1063)								int state = 2;
HXDLIN(1063)								int _g = 0;
HXDLIN(1063)								while((_g < keys5->length)){
HXLINE(1063)									int key = keys5->__get(_g);
HXDLIN(1063)									_g = (_g + 1);
HXDLIN(1063)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1063)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1063)								int state = 2;
HXDLIN(1063)								int _g = 0;
HXDLIN(1063)								while((_g < keys5->length)){
HXLINE(1063)									int key = keys5->__get(_g);
HXDLIN(1063)									_g = (_g + 1);
HXDLIN(1063)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1063)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1063)								int state = 2;
HXDLIN(1063)								int _g = 0;
HXDLIN(1063)								while((_g < keys5->length)){
HXLINE(1063)									int key = keys5->__get(_g);
HXDLIN(1063)									_g = (_g + 1);
HXDLIN(1063)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1063)									int state = 1;
HXDLIN(1063)									int _g = 0;
HXDLIN(1063)									while((_g < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g);
HXDLIN(1063)										_g = (_g + 1);
HXDLIN(1063)										action->addKey(key,state);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1063)									int state1 = 2;
HXDLIN(1063)									int _g1 = 0;
HXDLIN(1063)									while((_g1 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g1);
HXDLIN(1063)										_g1 = (_g1 + 1);
HXDLIN(1063)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1063)								{
HXLINE(1063)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1063)									int state2 = -1;
HXDLIN(1063)									int _g2 = 0;
HXDLIN(1063)									while((_g2 < keys5->length)){
HXLINE(1063)										int key = keys5->__get(_g2);
HXDLIN(1063)										_g2 = (_g2 + 1);
HXDLIN(1063)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1064)					{
HXLINE(1064)						::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4028,1);
HXDLIN(1064)						switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1064)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1064)								int state = 2;
HXDLIN(1064)								int _g = 0;
HXDLIN(1064)								while((_g < keys6->length)){
HXLINE(1064)									int key = keys6->__get(_g);
HXDLIN(1064)									_g = (_g + 1);
HXDLIN(1064)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1064)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1064)								int state = 2;
HXDLIN(1064)								int _g = 0;
HXDLIN(1064)								while((_g < keys6->length)){
HXLINE(1064)									int key = keys6->__get(_g);
HXDLIN(1064)									_g = (_g + 1);
HXDLIN(1064)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1064)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1064)								int state = 2;
HXDLIN(1064)								int _g = 0;
HXDLIN(1064)								while((_g < keys6->length)){
HXLINE(1064)									int key = keys6->__get(_g);
HXDLIN(1064)									_g = (_g + 1);
HXDLIN(1064)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1064)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1064)								int state = 2;
HXDLIN(1064)								int _g = 0;
HXDLIN(1064)								while((_g < keys6->length)){
HXLINE(1064)									int key = keys6->__get(_g);
HXDLIN(1064)									_g = (_g + 1);
HXDLIN(1064)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1064)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1064)								int state = 2;
HXDLIN(1064)								int _g = 0;
HXDLIN(1064)								while((_g < keys6->length)){
HXLINE(1064)									int key = keys6->__get(_g);
HXDLIN(1064)									_g = (_g + 1);
HXDLIN(1064)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1064)									int state = 1;
HXDLIN(1064)									int _g = 0;
HXDLIN(1064)									while((_g < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g);
HXDLIN(1064)										_g = (_g + 1);
HXDLIN(1064)										action->addKey(key,state);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1064)									int state1 = 2;
HXDLIN(1064)									int _g1 = 0;
HXDLIN(1064)									while((_g1 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g1);
HXDLIN(1064)										_g1 = (_g1 + 1);
HXDLIN(1064)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1064)								{
HXLINE(1064)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1064)									int state2 = -1;
HXDLIN(1064)									int _g2 = 0;
HXDLIN(1064)									while((_g2 < keys6->length)){
HXLINE(1064)										int key = keys6->__get(_g2);
HXDLIN(1064)										_g2 = (_g2 + 1);
HXDLIN(1064)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
HXLINE(1065)					{
HXLINE(1065)						::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4029,1);
HXDLIN(1065)						switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE(1065)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1065)								int state = 2;
HXDLIN(1065)								int _g = 0;
HXDLIN(1065)								while((_g < keys7->length)){
HXLINE(1065)									int key = keys7->__get(_g);
HXDLIN(1065)									_g = (_g + 1);
HXDLIN(1065)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE(1065)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1065)								int state = 2;
HXDLIN(1065)								int _g = 0;
HXDLIN(1065)								while((_g < keys7->length)){
HXLINE(1065)									int key = keys7->__get(_g);
HXDLIN(1065)									_g = (_g + 1);
HXDLIN(1065)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE(1065)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1065)								int state = 2;
HXDLIN(1065)								int _g = 0;
HXDLIN(1065)								while((_g < keys7->length)){
HXLINE(1065)									int key = keys7->__get(_g);
HXDLIN(1065)									_g = (_g + 1);
HXDLIN(1065)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE(1065)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1065)								int state = 2;
HXDLIN(1065)								int _g = 0;
HXDLIN(1065)								while((_g < keys7->length)){
HXLINE(1065)									int key = keys7->__get(_g);
HXDLIN(1065)									_g = (_g + 1);
HXDLIN(1065)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE(1065)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1065)								int state = 2;
HXDLIN(1065)								int _g = 0;
HXDLIN(1065)								while((_g < keys7->length)){
HXLINE(1065)									int key = keys7->__get(_g);
HXDLIN(1065)									_g = (_g + 1);
HXDLIN(1065)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)9: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)10: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)11: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)12: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)13: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)14: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)15: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)16: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)17: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)18: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)19: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)20: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)21: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)22: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)23: {
HXLINE(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1065)									int state = 1;
HXDLIN(1065)									int _g = 0;
HXDLIN(1065)									while((_g < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g);
HXDLIN(1065)										_g = (_g + 1);
HXDLIN(1065)										action->addKey(key,state);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1065)									int state1 = 2;
HXDLIN(1065)									int _g1 = 0;
HXDLIN(1065)									while((_g1 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g1);
HXDLIN(1065)										_g1 = (_g1 + 1);
HXDLIN(1065)										action1->addKey(key,state1);
            									}
            								}
HXDLIN(1065)								{
HXLINE(1065)									 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1065)									int state2 = -1;
HXDLIN(1065)									int _g2 = 0;
HXDLIN(1065)									while((_g2 < keys7->length)){
HXLINE(1065)										int key = keys7->__get(_g2);
HXDLIN(1065)										_g2 = (_g2 + 1);
HXDLIN(1065)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            			case (int)3: {
            			}
            			break;
            			case (int)4: {
HXLINE(1069)				::Main_obj::woops = true;
HXLINE(1070)				{
HXLINE(1070)					::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4030,3);
HXDLIN(1070)					switch((int)(::Control_obj::UP_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1070)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1070)							int state = 2;
HXDLIN(1070)							int _g = 0;
HXDLIN(1070)							while((_g < keys->length)){
HXLINE(1070)								int key = keys->__get(_g);
HXDLIN(1070)								_g = (_g + 1);
HXDLIN(1070)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1070)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1070)							int state = 2;
HXDLIN(1070)							int _g = 0;
HXDLIN(1070)							while((_g < keys->length)){
HXLINE(1070)								int key = keys->__get(_g);
HXDLIN(1070)								_g = (_g + 1);
HXDLIN(1070)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1070)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1070)							int state = 2;
HXDLIN(1070)							int _g = 0;
HXDLIN(1070)							while((_g < keys->length)){
HXLINE(1070)								int key = keys->__get(_g);
HXDLIN(1070)								_g = (_g + 1);
HXDLIN(1070)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1070)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1070)							int state = 2;
HXDLIN(1070)							int _g = 0;
HXDLIN(1070)							while((_g < keys->length)){
HXLINE(1070)								int key = keys->__get(_g);
HXDLIN(1070)								_g = (_g + 1);
HXDLIN(1070)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1070)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1070)							int state = 2;
HXDLIN(1070)							int _g = 0;
HXDLIN(1070)							while((_g < keys->length)){
HXLINE(1070)								int key = keys->__get(_g);
HXDLIN(1070)								_g = (_g + 1);
HXDLIN(1070)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1070)								int state = 1;
HXDLIN(1070)								int _g = 0;
HXDLIN(1070)								while((_g < keys->length)){
HXLINE(1070)									int key = keys->__get(_g);
HXDLIN(1070)									_g = (_g + 1);
HXDLIN(1070)									action->addKey(key,state);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1070)								int state1 = 2;
HXDLIN(1070)								int _g1 = 0;
HXDLIN(1070)								while((_g1 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g1);
HXDLIN(1070)									_g1 = (_g1 + 1);
HXDLIN(1070)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1070)							{
HXLINE(1070)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1070)								int state2 = -1;
HXDLIN(1070)								int _g2 = 0;
HXDLIN(1070)								while((_g2 < keys->length)){
HXLINE(1070)									int key = keys->__get(_g2);
HXDLIN(1070)									_g2 = (_g2 + 1);
HXDLIN(1070)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1071)				{
HXLINE(1071)					::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4031,2);
HXDLIN(1071)					switch((int)(::Control_obj::DOWN_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1071)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1071)							int state = 2;
HXDLIN(1071)							int _g = 0;
HXDLIN(1071)							while((_g < keys1->length)){
HXLINE(1071)								int key = keys1->__get(_g);
HXDLIN(1071)								_g = (_g + 1);
HXDLIN(1071)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1071)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1071)							int state = 2;
HXDLIN(1071)							int _g = 0;
HXDLIN(1071)							while((_g < keys1->length)){
HXLINE(1071)								int key = keys1->__get(_g);
HXDLIN(1071)								_g = (_g + 1);
HXDLIN(1071)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1071)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1071)							int state = 2;
HXDLIN(1071)							int _g = 0;
HXDLIN(1071)							while((_g < keys1->length)){
HXLINE(1071)								int key = keys1->__get(_g);
HXDLIN(1071)								_g = (_g + 1);
HXDLIN(1071)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1071)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1071)							int state = 2;
HXDLIN(1071)							int _g = 0;
HXDLIN(1071)							while((_g < keys1->length)){
HXLINE(1071)								int key = keys1->__get(_g);
HXDLIN(1071)								_g = (_g + 1);
HXDLIN(1071)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1071)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1071)							int state = 2;
HXDLIN(1071)							int _g = 0;
HXDLIN(1071)							while((_g < keys1->length)){
HXLINE(1071)								int key = keys1->__get(_g);
HXDLIN(1071)								_g = (_g + 1);
HXDLIN(1071)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1071)								int state = 1;
HXDLIN(1071)								int _g = 0;
HXDLIN(1071)								while((_g < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g);
HXDLIN(1071)									_g = (_g + 1);
HXDLIN(1071)									action->addKey(key,state);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1071)								int state1 = 2;
HXDLIN(1071)								int _g1 = 0;
HXDLIN(1071)								while((_g1 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g1);
HXDLIN(1071)									_g1 = (_g1 + 1);
HXDLIN(1071)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1071)							{
HXLINE(1071)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1071)								int state2 = -1;
HXDLIN(1071)								int _g2 = 0;
HXDLIN(1071)								while((_g2 < keys1->length)){
HXLINE(1071)									int key = keys1->__get(_g2);
HXDLIN(1071)									_g2 = (_g2 + 1);
HXDLIN(1071)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1072)				{
HXLINE(1072)					::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4032,2);
HXDLIN(1072)					switch((int)(::Control_obj::LEFT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1072)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1072)							int state = 2;
HXDLIN(1072)							int _g = 0;
HXDLIN(1072)							while((_g < keys2->length)){
HXLINE(1072)								int key = keys2->__get(_g);
HXDLIN(1072)								_g = (_g + 1);
HXDLIN(1072)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1072)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1072)							int state = 2;
HXDLIN(1072)							int _g = 0;
HXDLIN(1072)							while((_g < keys2->length)){
HXLINE(1072)								int key = keys2->__get(_g);
HXDLIN(1072)								_g = (_g + 1);
HXDLIN(1072)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1072)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1072)							int state = 2;
HXDLIN(1072)							int _g = 0;
HXDLIN(1072)							while((_g < keys2->length)){
HXLINE(1072)								int key = keys2->__get(_g);
HXDLIN(1072)								_g = (_g + 1);
HXDLIN(1072)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1072)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1072)							int state = 2;
HXDLIN(1072)							int _g = 0;
HXDLIN(1072)							while((_g < keys2->length)){
HXLINE(1072)								int key = keys2->__get(_g);
HXDLIN(1072)								_g = (_g + 1);
HXDLIN(1072)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1072)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1072)							int state = 2;
HXDLIN(1072)							int _g = 0;
HXDLIN(1072)							while((_g < keys2->length)){
HXLINE(1072)								int key = keys2->__get(_g);
HXDLIN(1072)								_g = (_g + 1);
HXDLIN(1072)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1072)								int state = 1;
HXDLIN(1072)								int _g = 0;
HXDLIN(1072)								while((_g < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g);
HXDLIN(1072)									_g = (_g + 1);
HXDLIN(1072)									action->addKey(key,state);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1072)								int state1 = 2;
HXDLIN(1072)								int _g1 = 0;
HXDLIN(1072)								while((_g1 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g1);
HXDLIN(1072)									_g1 = (_g1 + 1);
HXDLIN(1072)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1072)							{
HXLINE(1072)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1072)								int state2 = -1;
HXDLIN(1072)								int _g2 = 0;
HXDLIN(1072)								while((_g2 < keys2->length)){
HXLINE(1072)									int key = keys2->__get(_g2);
HXDLIN(1072)									_g2 = (_g2 + 1);
HXDLIN(1072)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1073)				{
HXLINE(1073)					::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4033,3);
HXDLIN(1073)					switch((int)(::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1073)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1073)							int state = 2;
HXDLIN(1073)							int _g = 0;
HXDLIN(1073)							while((_g < keys3->length)){
HXLINE(1073)								int key = keys3->__get(_g);
HXDLIN(1073)								_g = (_g + 1);
HXDLIN(1073)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1073)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1073)							int state = 2;
HXDLIN(1073)							int _g = 0;
HXDLIN(1073)							while((_g < keys3->length)){
HXLINE(1073)								int key = keys3->__get(_g);
HXDLIN(1073)								_g = (_g + 1);
HXDLIN(1073)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1073)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1073)							int state = 2;
HXDLIN(1073)							int _g = 0;
HXDLIN(1073)							while((_g < keys3->length)){
HXLINE(1073)								int key = keys3->__get(_g);
HXDLIN(1073)								_g = (_g + 1);
HXDLIN(1073)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1073)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1073)							int state = 2;
HXDLIN(1073)							int _g = 0;
HXDLIN(1073)							while((_g < keys3->length)){
HXLINE(1073)								int key = keys3->__get(_g);
HXDLIN(1073)								_g = (_g + 1);
HXDLIN(1073)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1073)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1073)							int state = 2;
HXDLIN(1073)							int _g = 0;
HXDLIN(1073)							while((_g < keys3->length)){
HXLINE(1073)								int key = keys3->__get(_g);
HXDLIN(1073)								_g = (_g + 1);
HXDLIN(1073)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1073)								int state = 1;
HXDLIN(1073)								int _g = 0;
HXDLIN(1073)								while((_g < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g);
HXDLIN(1073)									_g = (_g + 1);
HXDLIN(1073)									action->addKey(key,state);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1073)								int state1 = 2;
HXDLIN(1073)								int _g1 = 0;
HXDLIN(1073)								while((_g1 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g1);
HXDLIN(1073)									_g1 = (_g1 + 1);
HXDLIN(1073)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1073)							{
HXLINE(1073)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1073)								int state2 = -1;
HXDLIN(1073)								int _g2 = 0;
HXDLIN(1073)								while((_g2 < keys3->length)){
HXLINE(1073)									int key = keys3->__get(_g2);
HXDLIN(1073)									_g2 = (_g2 + 1);
HXDLIN(1073)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1074)				{
HXLINE(1074)					::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4034,2);
HXDLIN(1074)					switch((int)(::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1074)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1074)							int state = 2;
HXDLIN(1074)							int _g = 0;
HXDLIN(1074)							while((_g < keys4->length)){
HXLINE(1074)								int key = keys4->__get(_g);
HXDLIN(1074)								_g = (_g + 1);
HXDLIN(1074)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1074)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1074)							int state = 2;
HXDLIN(1074)							int _g = 0;
HXDLIN(1074)							while((_g < keys4->length)){
HXLINE(1074)								int key = keys4->__get(_g);
HXDLIN(1074)								_g = (_g + 1);
HXDLIN(1074)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1074)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1074)							int state = 2;
HXDLIN(1074)							int _g = 0;
HXDLIN(1074)							while((_g < keys4->length)){
HXLINE(1074)								int key = keys4->__get(_g);
HXDLIN(1074)								_g = (_g + 1);
HXDLIN(1074)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1074)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1074)							int state = 2;
HXDLIN(1074)							int _g = 0;
HXDLIN(1074)							while((_g < keys4->length)){
HXLINE(1074)								int key = keys4->__get(_g);
HXDLIN(1074)								_g = (_g + 1);
HXDLIN(1074)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1074)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1074)							int state = 2;
HXDLIN(1074)							int _g = 0;
HXDLIN(1074)							while((_g < keys4->length)){
HXLINE(1074)								int key = keys4->__get(_g);
HXDLIN(1074)								_g = (_g + 1);
HXDLIN(1074)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1074)								int state = 1;
HXDLIN(1074)								int _g = 0;
HXDLIN(1074)								while((_g < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g);
HXDLIN(1074)									_g = (_g + 1);
HXDLIN(1074)									action->addKey(key,state);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1074)								int state1 = 2;
HXDLIN(1074)								int _g1 = 0;
HXDLIN(1074)								while((_g1 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g1);
HXDLIN(1074)									_g1 = (_g1 + 1);
HXDLIN(1074)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1074)							{
HXLINE(1074)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1074)								int state2 = -1;
HXDLIN(1074)								int _g2 = 0;
HXDLIN(1074)								while((_g2 < keys4->length)){
HXLINE(1074)									int key = keys4->__get(_g2);
HXDLIN(1074)									_g2 = (_g2 + 1);
HXDLIN(1074)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1075)				{
HXLINE(1075)					::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4035,2);
HXDLIN(1075)					switch((int)(::Control_obj::BACK_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1075)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1075)							int state = 2;
HXDLIN(1075)							int _g = 0;
HXDLIN(1075)							while((_g < keys5->length)){
HXLINE(1075)								int key = keys5->__get(_g);
HXDLIN(1075)								_g = (_g + 1);
HXDLIN(1075)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1075)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1075)							int state = 2;
HXDLIN(1075)							int _g = 0;
HXDLIN(1075)							while((_g < keys5->length)){
HXLINE(1075)								int key = keys5->__get(_g);
HXDLIN(1075)								_g = (_g + 1);
HXDLIN(1075)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1075)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1075)							int state = 2;
HXDLIN(1075)							int _g = 0;
HXDLIN(1075)							while((_g < keys5->length)){
HXLINE(1075)								int key = keys5->__get(_g);
HXDLIN(1075)								_g = (_g + 1);
HXDLIN(1075)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1075)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1075)							int state = 2;
HXDLIN(1075)							int _g = 0;
HXDLIN(1075)							while((_g < keys5->length)){
HXLINE(1075)								int key = keys5->__get(_g);
HXDLIN(1075)								_g = (_g + 1);
HXDLIN(1075)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1075)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1075)							int state = 2;
HXDLIN(1075)							int _g = 0;
HXDLIN(1075)							while((_g < keys5->length)){
HXLINE(1075)								int key = keys5->__get(_g);
HXDLIN(1075)								_g = (_g + 1);
HXDLIN(1075)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1075)								int state = 1;
HXDLIN(1075)								int _g = 0;
HXDLIN(1075)								while((_g < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g);
HXDLIN(1075)									_g = (_g + 1);
HXDLIN(1075)									action->addKey(key,state);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1075)								int state1 = 2;
HXDLIN(1075)								int _g1 = 0;
HXDLIN(1075)								while((_g1 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g1);
HXDLIN(1075)									_g1 = (_g1 + 1);
HXDLIN(1075)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1075)							{
HXLINE(1075)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1075)								int state2 = -1;
HXDLIN(1075)								int _g2 = 0;
HXDLIN(1075)								while((_g2 < keys5->length)){
HXLINE(1075)									int key = keys5->__get(_g2);
HXDLIN(1075)									_g2 = (_g2 + 1);
HXDLIN(1075)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1076)				{
HXLINE(1076)					::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4036,3);
HXDLIN(1076)					switch((int)(::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1076)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1076)							int state = 2;
HXDLIN(1076)							int _g = 0;
HXDLIN(1076)							while((_g < keys6->length)){
HXLINE(1076)								int key = keys6->__get(_g);
HXDLIN(1076)								_g = (_g + 1);
HXDLIN(1076)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1076)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1076)							int state = 2;
HXDLIN(1076)							int _g = 0;
HXDLIN(1076)							while((_g < keys6->length)){
HXLINE(1076)								int key = keys6->__get(_g);
HXDLIN(1076)								_g = (_g + 1);
HXDLIN(1076)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1076)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1076)							int state = 2;
HXDLIN(1076)							int _g = 0;
HXDLIN(1076)							while((_g < keys6->length)){
HXLINE(1076)								int key = keys6->__get(_g);
HXDLIN(1076)								_g = (_g + 1);
HXDLIN(1076)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1076)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1076)							int state = 2;
HXDLIN(1076)							int _g = 0;
HXDLIN(1076)							while((_g < keys6->length)){
HXLINE(1076)								int key = keys6->__get(_g);
HXDLIN(1076)								_g = (_g + 1);
HXDLIN(1076)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1076)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1076)							int state = 2;
HXDLIN(1076)							int _g = 0;
HXDLIN(1076)							while((_g < keys6->length)){
HXLINE(1076)								int key = keys6->__get(_g);
HXDLIN(1076)								_g = (_g + 1);
HXDLIN(1076)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1076)								int state = 1;
HXDLIN(1076)								int _g = 0;
HXDLIN(1076)								while((_g < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g);
HXDLIN(1076)									_g = (_g + 1);
HXDLIN(1076)									action->addKey(key,state);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1076)								int state1 = 2;
HXDLIN(1076)								int _g1 = 0;
HXDLIN(1076)								while((_g1 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g1);
HXDLIN(1076)									_g1 = (_g1 + 1);
HXDLIN(1076)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1076)							{
HXLINE(1076)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1076)								int state2 = -1;
HXDLIN(1076)								int _g2 = 0;
HXDLIN(1076)								while((_g2 < keys6->length)){
HXLINE(1076)									int key = keys6->__get(_g2);
HXDLIN(1076)									_g2 = (_g2 + 1);
HXDLIN(1076)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1077)				{
HXLINE(1077)					::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4037,1);
HXDLIN(1077)					switch((int)(::Control_obj::RESET_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1077)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1077)							int state = 2;
HXDLIN(1077)							int _g = 0;
HXDLIN(1077)							while((_g < keys7->length)){
HXLINE(1077)								int key = keys7->__get(_g);
HXDLIN(1077)								_g = (_g + 1);
HXDLIN(1077)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1077)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1077)							int state = 2;
HXDLIN(1077)							int _g = 0;
HXDLIN(1077)							while((_g < keys7->length)){
HXLINE(1077)								int key = keys7->__get(_g);
HXDLIN(1077)								_g = (_g + 1);
HXDLIN(1077)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1077)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1077)							int state = 2;
HXDLIN(1077)							int _g = 0;
HXDLIN(1077)							while((_g < keys7->length)){
HXLINE(1077)								int key = keys7->__get(_g);
HXDLIN(1077)								_g = (_g + 1);
HXDLIN(1077)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1077)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1077)							int state = 2;
HXDLIN(1077)							int _g = 0;
HXDLIN(1077)							while((_g < keys7->length)){
HXLINE(1077)								int key = keys7->__get(_g);
HXDLIN(1077)								_g = (_g + 1);
HXDLIN(1077)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1077)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1077)							int state = 2;
HXDLIN(1077)							int _g = 0;
HXDLIN(1077)							while((_g < keys7->length)){
HXLINE(1077)								int key = keys7->__get(_g);
HXDLIN(1077)								_g = (_g + 1);
HXDLIN(1077)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1077)								int state = 1;
HXDLIN(1077)								int _g = 0;
HXDLIN(1077)								while((_g < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g);
HXDLIN(1077)									_g = (_g + 1);
HXDLIN(1077)									action->addKey(key,state);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1077)								int state1 = 2;
HXDLIN(1077)								int _g1 = 0;
HXDLIN(1077)								while((_g1 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g1);
HXDLIN(1077)									_g1 = (_g1 + 1);
HXDLIN(1077)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1077)							{
HXLINE(1077)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1077)								int state2 = -1;
HXDLIN(1077)								int _g2 = 0;
HXDLIN(1077)								while((_g2 < keys7->length)){
HXLINE(1077)									int key = keys7->__get(_g2);
HXDLIN(1077)									_g2 = (_g2 + 1);
HXDLIN(1077)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1079)				{
HXLINE(1079)					::Array< int > keys8 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4038,1);
HXDLIN(1079)					switch((int)(::Control_obj::L1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1079)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1079)							int state = 2;
HXDLIN(1079)							int _g = 0;
HXDLIN(1079)							while((_g < keys8->length)){
HXLINE(1079)								int key = keys8->__get(_g);
HXDLIN(1079)								_g = (_g + 1);
HXDLIN(1079)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1079)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1079)							int state = 2;
HXDLIN(1079)							int _g = 0;
HXDLIN(1079)							while((_g < keys8->length)){
HXLINE(1079)								int key = keys8->__get(_g);
HXDLIN(1079)								_g = (_g + 1);
HXDLIN(1079)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1079)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1079)							int state = 2;
HXDLIN(1079)							int _g = 0;
HXDLIN(1079)							while((_g < keys8->length)){
HXLINE(1079)								int key = keys8->__get(_g);
HXDLIN(1079)								_g = (_g + 1);
HXDLIN(1079)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1079)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1079)							int state = 2;
HXDLIN(1079)							int _g = 0;
HXDLIN(1079)							while((_g < keys8->length)){
HXLINE(1079)								int key = keys8->__get(_g);
HXDLIN(1079)								_g = (_g + 1);
HXDLIN(1079)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1079)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1079)							int state = 2;
HXDLIN(1079)							int _g = 0;
HXDLIN(1079)							while((_g < keys8->length)){
HXLINE(1079)								int key = keys8->__get(_g);
HXDLIN(1079)								_g = (_g + 1);
HXDLIN(1079)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1079)								int state = 1;
HXDLIN(1079)								int _g = 0;
HXDLIN(1079)								while((_g < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g);
HXDLIN(1079)									_g = (_g + 1);
HXDLIN(1079)									action->addKey(key,state);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1079)								int state1 = 2;
HXDLIN(1079)								int _g1 = 0;
HXDLIN(1079)								while((_g1 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g1);
HXDLIN(1079)									_g1 = (_g1 + 1);
HXDLIN(1079)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1079)							{
HXLINE(1079)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1079)								int state2 = -1;
HXDLIN(1079)								int _g2 = 0;
HXDLIN(1079)								while((_g2 < keys8->length)){
HXLINE(1079)									int key = keys8->__get(_g2);
HXDLIN(1079)									_g2 = (_g2 + 1);
HXDLIN(1079)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1080)				{
HXLINE(1080)					::Array< int > keys9 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4039,1);
HXDLIN(1080)					switch((int)(::Control_obj::U1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1080)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1080)							int state = 2;
HXDLIN(1080)							int _g = 0;
HXDLIN(1080)							while((_g < keys9->length)){
HXLINE(1080)								int key = keys9->__get(_g);
HXDLIN(1080)								_g = (_g + 1);
HXDLIN(1080)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1080)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1080)							int state = 2;
HXDLIN(1080)							int _g = 0;
HXDLIN(1080)							while((_g < keys9->length)){
HXLINE(1080)								int key = keys9->__get(_g);
HXDLIN(1080)								_g = (_g + 1);
HXDLIN(1080)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1080)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1080)							int state = 2;
HXDLIN(1080)							int _g = 0;
HXDLIN(1080)							while((_g < keys9->length)){
HXLINE(1080)								int key = keys9->__get(_g);
HXDLIN(1080)								_g = (_g + 1);
HXDLIN(1080)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1080)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1080)							int state = 2;
HXDLIN(1080)							int _g = 0;
HXDLIN(1080)							while((_g < keys9->length)){
HXLINE(1080)								int key = keys9->__get(_g);
HXDLIN(1080)								_g = (_g + 1);
HXDLIN(1080)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1080)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1080)							int state = 2;
HXDLIN(1080)							int _g = 0;
HXDLIN(1080)							while((_g < keys9->length)){
HXLINE(1080)								int key = keys9->__get(_g);
HXDLIN(1080)								_g = (_g + 1);
HXDLIN(1080)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1080)								int state = 1;
HXDLIN(1080)								int _g = 0;
HXDLIN(1080)								while((_g < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g);
HXDLIN(1080)									_g = (_g + 1);
HXDLIN(1080)									action->addKey(key,state);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1080)								int state1 = 2;
HXDLIN(1080)								int _g1 = 0;
HXDLIN(1080)								while((_g1 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g1);
HXDLIN(1080)									_g1 = (_g1 + 1);
HXDLIN(1080)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1080)							{
HXLINE(1080)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1080)								int state2 = -1;
HXDLIN(1080)								int _g2 = 0;
HXDLIN(1080)								while((_g2 < keys9->length)){
HXLINE(1080)									int key = keys9->__get(_g2);
HXDLIN(1080)									_g2 = (_g2 + 1);
HXDLIN(1080)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1081)				{
HXLINE(1081)					::Array< int > keys10 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4040,1);
HXDLIN(1081)					switch((int)(::Control_obj::R1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1081)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1081)							int state = 2;
HXDLIN(1081)							int _g = 0;
HXDLIN(1081)							while((_g < keys10->length)){
HXLINE(1081)								int key = keys10->__get(_g);
HXDLIN(1081)								_g = (_g + 1);
HXDLIN(1081)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1081)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1081)							int state = 2;
HXDLIN(1081)							int _g = 0;
HXDLIN(1081)							while((_g < keys10->length)){
HXLINE(1081)								int key = keys10->__get(_g);
HXDLIN(1081)								_g = (_g + 1);
HXDLIN(1081)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1081)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1081)							int state = 2;
HXDLIN(1081)							int _g = 0;
HXDLIN(1081)							while((_g < keys10->length)){
HXLINE(1081)								int key = keys10->__get(_g);
HXDLIN(1081)								_g = (_g + 1);
HXDLIN(1081)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1081)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1081)							int state = 2;
HXDLIN(1081)							int _g = 0;
HXDLIN(1081)							while((_g < keys10->length)){
HXLINE(1081)								int key = keys10->__get(_g);
HXDLIN(1081)								_g = (_g + 1);
HXDLIN(1081)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1081)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1081)							int state = 2;
HXDLIN(1081)							int _g = 0;
HXDLIN(1081)							while((_g < keys10->length)){
HXLINE(1081)								int key = keys10->__get(_g);
HXDLIN(1081)								_g = (_g + 1);
HXDLIN(1081)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1081)								int state = 1;
HXDLIN(1081)								int _g = 0;
HXDLIN(1081)								while((_g < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g);
HXDLIN(1081)									_g = (_g + 1);
HXDLIN(1081)									action->addKey(key,state);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1081)								int state1 = 2;
HXDLIN(1081)								int _g1 = 0;
HXDLIN(1081)								while((_g1 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g1);
HXDLIN(1081)									_g1 = (_g1 + 1);
HXDLIN(1081)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1081)							{
HXLINE(1081)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1081)								int state2 = -1;
HXDLIN(1081)								int _g2 = 0;
HXDLIN(1081)								while((_g2 < keys10->length)){
HXLINE(1081)									int key = keys10->__get(_g2);
HXDLIN(1081)									_g2 = (_g2 + 1);
HXDLIN(1081)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1082)				{
HXLINE(1082)					::Array< int > keys11 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4041,2);
HXDLIN(1082)					switch((int)(::Control_obj::L2_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1082)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1082)							int state = 2;
HXDLIN(1082)							int _g = 0;
HXDLIN(1082)							while((_g < keys11->length)){
HXLINE(1082)								int key = keys11->__get(_g);
HXDLIN(1082)								_g = (_g + 1);
HXDLIN(1082)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1082)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1082)							int state = 2;
HXDLIN(1082)							int _g = 0;
HXDLIN(1082)							while((_g < keys11->length)){
HXLINE(1082)								int key = keys11->__get(_g);
HXDLIN(1082)								_g = (_g + 1);
HXDLIN(1082)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1082)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1082)							int state = 2;
HXDLIN(1082)							int _g = 0;
HXDLIN(1082)							while((_g < keys11->length)){
HXLINE(1082)								int key = keys11->__get(_g);
HXDLIN(1082)								_g = (_g + 1);
HXDLIN(1082)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1082)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1082)							int state = 2;
HXDLIN(1082)							int _g = 0;
HXDLIN(1082)							while((_g < keys11->length)){
HXLINE(1082)								int key = keys11->__get(_g);
HXDLIN(1082)								_g = (_g + 1);
HXDLIN(1082)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1082)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1082)							int state = 2;
HXDLIN(1082)							int _g = 0;
HXDLIN(1082)							while((_g < keys11->length)){
HXLINE(1082)								int key = keys11->__get(_g);
HXDLIN(1082)								_g = (_g + 1);
HXDLIN(1082)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1082)								int state = 1;
HXDLIN(1082)								int _g = 0;
HXDLIN(1082)								while((_g < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g);
HXDLIN(1082)									_g = (_g + 1);
HXDLIN(1082)									action->addKey(key,state);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1082)								int state1 = 2;
HXDLIN(1082)								int _g1 = 0;
HXDLIN(1082)								while((_g1 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g1);
HXDLIN(1082)									_g1 = (_g1 + 1);
HXDLIN(1082)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1082)							{
HXLINE(1082)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1082)								int state2 = -1;
HXDLIN(1082)								int _g2 = 0;
HXDLIN(1082)								while((_g2 < keys11->length)){
HXLINE(1082)									int key = keys11->__get(_g2);
HXDLIN(1082)									_g2 = (_g2 + 1);
HXDLIN(1082)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1083)				{
HXLINE(1083)					::Array< int > keys12 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4042,2);
HXDLIN(1083)					switch((int)(::Control_obj::D1_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1083)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1083)							int state = 2;
HXDLIN(1083)							int _g = 0;
HXDLIN(1083)							while((_g < keys12->length)){
HXLINE(1083)								int key = keys12->__get(_g);
HXDLIN(1083)								_g = (_g + 1);
HXDLIN(1083)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1083)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1083)							int state = 2;
HXDLIN(1083)							int _g = 0;
HXDLIN(1083)							while((_g < keys12->length)){
HXLINE(1083)								int key = keys12->__get(_g);
HXDLIN(1083)								_g = (_g + 1);
HXDLIN(1083)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1083)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1083)							int state = 2;
HXDLIN(1083)							int _g = 0;
HXDLIN(1083)							while((_g < keys12->length)){
HXLINE(1083)								int key = keys12->__get(_g);
HXDLIN(1083)								_g = (_g + 1);
HXDLIN(1083)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1083)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1083)							int state = 2;
HXDLIN(1083)							int _g = 0;
HXDLIN(1083)							while((_g < keys12->length)){
HXLINE(1083)								int key = keys12->__get(_g);
HXDLIN(1083)								_g = (_g + 1);
HXDLIN(1083)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1083)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1083)							int state = 2;
HXDLIN(1083)							int _g = 0;
HXDLIN(1083)							while((_g < keys12->length)){
HXLINE(1083)								int key = keys12->__get(_g);
HXDLIN(1083)								_g = (_g + 1);
HXDLIN(1083)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1083)								int state = 1;
HXDLIN(1083)								int _g = 0;
HXDLIN(1083)								while((_g < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g);
HXDLIN(1083)									_g = (_g + 1);
HXDLIN(1083)									action->addKey(key,state);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1083)								int state1 = 2;
HXDLIN(1083)								int _g1 = 0;
HXDLIN(1083)								while((_g1 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g1);
HXDLIN(1083)									_g1 = (_g1 + 1);
HXDLIN(1083)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1083)							{
HXLINE(1083)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1083)								int state2 = -1;
HXDLIN(1083)								int _g2 = 0;
HXDLIN(1083)								while((_g2 < keys12->length)){
HXLINE(1083)									int key = keys12->__get(_g2);
HXDLIN(1083)									_g2 = (_g2 + 1);
HXDLIN(1083)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1084)				{
HXLINE(1084)					::Array< int > keys13 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4043,2);
HXDLIN(1084)					switch((int)(::Control_obj::R2_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1084)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1084)							int state = 2;
HXDLIN(1084)							int _g = 0;
HXDLIN(1084)							while((_g < keys13->length)){
HXLINE(1084)								int key = keys13->__get(_g);
HXDLIN(1084)								_g = (_g + 1);
HXDLIN(1084)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1084)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1084)							int state = 2;
HXDLIN(1084)							int _g = 0;
HXDLIN(1084)							while((_g < keys13->length)){
HXLINE(1084)								int key = keys13->__get(_g);
HXDLIN(1084)								_g = (_g + 1);
HXDLIN(1084)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1084)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1084)							int state = 2;
HXDLIN(1084)							int _g = 0;
HXDLIN(1084)							while((_g < keys13->length)){
HXLINE(1084)								int key = keys13->__get(_g);
HXDLIN(1084)								_g = (_g + 1);
HXDLIN(1084)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1084)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1084)							int state = 2;
HXDLIN(1084)							int _g = 0;
HXDLIN(1084)							while((_g < keys13->length)){
HXLINE(1084)								int key = keys13->__get(_g);
HXDLIN(1084)								_g = (_g + 1);
HXDLIN(1084)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1084)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1084)							int state = 2;
HXDLIN(1084)							int _g = 0;
HXDLIN(1084)							while((_g < keys13->length)){
HXLINE(1084)								int key = keys13->__get(_g);
HXDLIN(1084)								_g = (_g + 1);
HXDLIN(1084)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1084)								int state = 1;
HXDLIN(1084)								int _g = 0;
HXDLIN(1084)								while((_g < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g);
HXDLIN(1084)									_g = (_g + 1);
HXDLIN(1084)									action->addKey(key,state);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1084)								int state1 = 2;
HXDLIN(1084)								int _g1 = 0;
HXDLIN(1084)								while((_g1 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g1);
HXDLIN(1084)									_g1 = (_g1 + 1);
HXDLIN(1084)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1084)							{
HXLINE(1084)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1084)								int state2 = -1;
HXDLIN(1084)								int _g2 = 0;
HXDLIN(1084)								while((_g2 < keys13->length)){
HXLINE(1084)									int key = keys13->__get(_g2);
HXDLIN(1084)									_g2 = (_g2 + 1);
HXDLIN(1084)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1086)				{
HXLINE(1086)					::Array< int > keys14 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4044,2);
HXDLIN(1086)					switch((int)(::Control_obj::N5_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1086)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1086)							int state = 2;
HXDLIN(1086)							int _g = 0;
HXDLIN(1086)							while((_g < keys14->length)){
HXLINE(1086)								int key = keys14->__get(_g);
HXDLIN(1086)								_g = (_g + 1);
HXDLIN(1086)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1086)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1086)							int state = 2;
HXDLIN(1086)							int _g = 0;
HXDLIN(1086)							while((_g < keys14->length)){
HXLINE(1086)								int key = keys14->__get(_g);
HXDLIN(1086)								_g = (_g + 1);
HXDLIN(1086)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1086)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1086)							int state = 2;
HXDLIN(1086)							int _g = 0;
HXDLIN(1086)							while((_g < keys14->length)){
HXLINE(1086)								int key = keys14->__get(_g);
HXDLIN(1086)								_g = (_g + 1);
HXDLIN(1086)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1086)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1086)							int state = 2;
HXDLIN(1086)							int _g = 0;
HXDLIN(1086)							while((_g < keys14->length)){
HXLINE(1086)								int key = keys14->__get(_g);
HXDLIN(1086)								_g = (_g + 1);
HXDLIN(1086)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1086)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1086)							int state = 2;
HXDLIN(1086)							int _g = 0;
HXDLIN(1086)							while((_g < keys14->length)){
HXLINE(1086)								int key = keys14->__get(_g);
HXDLIN(1086)								_g = (_g + 1);
HXDLIN(1086)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1086)								int state = 1;
HXDLIN(1086)								int _g = 0;
HXDLIN(1086)								while((_g < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g);
HXDLIN(1086)									_g = (_g + 1);
HXDLIN(1086)									action->addKey(key,state);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1086)								int state1 = 2;
HXDLIN(1086)								int _g1 = 0;
HXDLIN(1086)								while((_g1 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g1);
HXDLIN(1086)									_g1 = (_g1 + 1);
HXDLIN(1086)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1086)							{
HXLINE(1086)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1086)								int state2 = -1;
HXDLIN(1086)								int _g2 = 0;
HXDLIN(1086)								while((_g2 < keys14->length)){
HXLINE(1086)									int key = keys14->__get(_g2);
HXDLIN(1086)									_g2 = (_g2 + 1);
HXDLIN(1086)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1087)				{
HXLINE(1087)					::Array< int > keys15 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4045,2);
HXDLIN(1087)					switch((int)(::Control_obj::N6_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1087)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1087)							int state = 2;
HXDLIN(1087)							int _g = 0;
HXDLIN(1087)							while((_g < keys15->length)){
HXLINE(1087)								int key = keys15->__get(_g);
HXDLIN(1087)								_g = (_g + 1);
HXDLIN(1087)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1087)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1087)							int state = 2;
HXDLIN(1087)							int _g = 0;
HXDLIN(1087)							while((_g < keys15->length)){
HXLINE(1087)								int key = keys15->__get(_g);
HXDLIN(1087)								_g = (_g + 1);
HXDLIN(1087)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1087)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1087)							int state = 2;
HXDLIN(1087)							int _g = 0;
HXDLIN(1087)							while((_g < keys15->length)){
HXLINE(1087)								int key = keys15->__get(_g);
HXDLIN(1087)								_g = (_g + 1);
HXDLIN(1087)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1087)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1087)							int state = 2;
HXDLIN(1087)							int _g = 0;
HXDLIN(1087)							while((_g < keys15->length)){
HXLINE(1087)								int key = keys15->__get(_g);
HXDLIN(1087)								_g = (_g + 1);
HXDLIN(1087)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1087)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1087)							int state = 2;
HXDLIN(1087)							int _g = 0;
HXDLIN(1087)							while((_g < keys15->length)){
HXLINE(1087)								int key = keys15->__get(_g);
HXDLIN(1087)								_g = (_g + 1);
HXDLIN(1087)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1087)								int state = 1;
HXDLIN(1087)								int _g = 0;
HXDLIN(1087)								while((_g < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g);
HXDLIN(1087)									_g = (_g + 1);
HXDLIN(1087)									action->addKey(key,state);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1087)								int state1 = 2;
HXDLIN(1087)								int _g1 = 0;
HXDLIN(1087)								while((_g1 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g1);
HXDLIN(1087)									_g1 = (_g1 + 1);
HXDLIN(1087)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1087)							{
HXLINE(1087)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1087)								int state2 = -1;
HXDLIN(1087)								int _g2 = 0;
HXDLIN(1087)								while((_g2 < keys15->length)){
HXLINE(1087)									int key = keys15->__get(_g2);
HXDLIN(1087)									_g2 = (_g2 + 1);
HXDLIN(1087)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1088)				{
HXLINE(1088)					::Array< int > keys16 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4046,2);
HXDLIN(1088)					switch((int)(::Control_obj::N7_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1088)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1088)							int state = 2;
HXDLIN(1088)							int _g = 0;
HXDLIN(1088)							while((_g < keys16->length)){
HXLINE(1088)								int key = keys16->__get(_g);
HXDLIN(1088)								_g = (_g + 1);
HXDLIN(1088)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1088)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1088)							int state = 2;
HXDLIN(1088)							int _g = 0;
HXDLIN(1088)							while((_g < keys16->length)){
HXLINE(1088)								int key = keys16->__get(_g);
HXDLIN(1088)								_g = (_g + 1);
HXDLIN(1088)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1088)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1088)							int state = 2;
HXDLIN(1088)							int _g = 0;
HXDLIN(1088)							while((_g < keys16->length)){
HXLINE(1088)								int key = keys16->__get(_g);
HXDLIN(1088)								_g = (_g + 1);
HXDLIN(1088)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1088)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1088)							int state = 2;
HXDLIN(1088)							int _g = 0;
HXDLIN(1088)							while((_g < keys16->length)){
HXLINE(1088)								int key = keys16->__get(_g);
HXDLIN(1088)								_g = (_g + 1);
HXDLIN(1088)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1088)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1088)							int state = 2;
HXDLIN(1088)							int _g = 0;
HXDLIN(1088)							while((_g < keys16->length)){
HXLINE(1088)								int key = keys16->__get(_g);
HXDLIN(1088)								_g = (_g + 1);
HXDLIN(1088)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1088)								int state = 1;
HXDLIN(1088)								int _g = 0;
HXDLIN(1088)								while((_g < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g);
HXDLIN(1088)									_g = (_g + 1);
HXDLIN(1088)									action->addKey(key,state);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1088)								int state1 = 2;
HXDLIN(1088)								int _g1 = 0;
HXDLIN(1088)								while((_g1 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g1);
HXDLIN(1088)									_g1 = (_g1 + 1);
HXDLIN(1088)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1088)							{
HXLINE(1088)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1088)								int state2 = -1;
HXDLIN(1088)								int _g2 = 0;
HXDLIN(1088)								while((_g2 < keys16->length)){
HXLINE(1088)									int key = keys16->__get(_g2);
HXDLIN(1088)									_g2 = (_g2 + 1);
HXDLIN(1088)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
HXLINE(1089)				{
HXLINE(1089)					::Array< int > keys17 = ::Array_obj< int >::fromData( _hx_array_data_116e4296_4047,1);
HXDLIN(1089)					switch((int)(::Control_obj::N8_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1089)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1089)							int state = 2;
HXDLIN(1089)							int _g = 0;
HXDLIN(1089)							while((_g < keys17->length)){
HXLINE(1089)								int key = keys17->__get(_g);
HXDLIN(1089)								_g = (_g + 1);
HXDLIN(1089)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1089)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1089)							int state = 2;
HXDLIN(1089)							int _g = 0;
HXDLIN(1089)							while((_g < keys17->length)){
HXLINE(1089)								int key = keys17->__get(_g);
HXDLIN(1089)								_g = (_g + 1);
HXDLIN(1089)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1089)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1089)							int state = 2;
HXDLIN(1089)							int _g = 0;
HXDLIN(1089)							while((_g < keys17->length)){
HXLINE(1089)								int key = keys17->__get(_g);
HXDLIN(1089)								_g = (_g + 1);
HXDLIN(1089)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1089)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1089)							int state = 2;
HXDLIN(1089)							int _g = 0;
HXDLIN(1089)							while((_g < keys17->length)){
HXLINE(1089)								int key = keys17->__get(_g);
HXDLIN(1089)								_g = (_g + 1);
HXDLIN(1089)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1089)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1089)							int state = 2;
HXDLIN(1089)							int _g = 0;
HXDLIN(1089)							while((_g < keys17->length)){
HXLINE(1089)								int key = keys17->__get(_g);
HXDLIN(1089)								_g = (_g + 1);
HXDLIN(1089)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1089)								int state = 1;
HXDLIN(1089)								int _g = 0;
HXDLIN(1089)								while((_g < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g);
HXDLIN(1089)									_g = (_g + 1);
HXDLIN(1089)									action->addKey(key,state);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1089)								int state1 = 2;
HXDLIN(1089)								int _g1 = 0;
HXDLIN(1089)								while((_g1 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g1);
HXDLIN(1089)									_g1 = (_g1 + 1);
HXDLIN(1089)									action1->addKey(key,state1);
            								}
            							}
HXDLIN(1089)							{
HXLINE(1089)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1089)								int state2 = -1;
HXDLIN(1089)								int _g2 = 0;
HXDLIN(1089)								while((_g2 < keys17->length)){
HXLINE(1089)									int key = keys17->__get(_g2);
HXDLIN(1089)									_g2 = (_g2 + 1);
HXDLIN(1089)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,setKeyboardScheme,(void))

void Controls_obj::removeKeyboard(){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1174_removeKeyboard)
HXDLIN(1174)		int _g = 0;
HXDLIN(1174)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN(1174)		while((_g < _g1->length)){
HXDLIN(1174)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN(1174)			_g = (_g + 1);
HXLINE(1176)			int i = action->inputs->length;
HXLINE(1177)			while(true){
HXLINE(1177)				i = (i - 1);
HXDLIN(1177)				if (!(((i + 1) > 0))) {
HXLINE(1177)					goto _hx_goto_4049;
            				}
HXLINE(1179)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE(1180)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE(1181)					action->remove(input,null());
            				}
            			}
            			_hx_goto_4049:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,removeKeyboard,(void))

void Controls_obj::addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1187_addGamepad)
HXLINE(1188)		this->gamepadsAdded->push(id);
HXLINE(1191)		{
HXLINE(1191)			::Dynamic map = buttonMap;
HXDLIN(1191)			::Dynamic _g_map = map;
HXDLIN(1191)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1191)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1191)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1191)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(1191)				 ::Control _g1_key = key;
HXDLIN(1191)				 ::Control control = _g1_key;
HXDLIN(1191)				::Array< int > buttons = _g1_value;
HXLINE(1192)				{
HXLINE(1192)					int id1 = id;
HXDLIN(1192)					::Array< int > buttons1 = buttons;
HXDLIN(1192)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1192)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1192)							int state = 2;
HXDLIN(1192)							int _g = 0;
HXDLIN(1192)							while((_g < buttons1->length)){
HXLINE(1192)								int button = buttons1->__get(_g);
HXDLIN(1192)								_g = (_g + 1);
HXDLIN(1192)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1192)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1192)							int state = 2;
HXDLIN(1192)							int _g = 0;
HXDLIN(1192)							while((_g < buttons1->length)){
HXLINE(1192)								int button = buttons1->__get(_g);
HXDLIN(1192)								_g = (_g + 1);
HXDLIN(1192)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1192)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1192)							int state = 2;
HXDLIN(1192)							int _g = 0;
HXDLIN(1192)							while((_g < buttons1->length)){
HXLINE(1192)								int button = buttons1->__get(_g);
HXDLIN(1192)								_g = (_g + 1);
HXDLIN(1192)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1192)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1192)							int state = 2;
HXDLIN(1192)							int _g = 0;
HXDLIN(1192)							while((_g < buttons1->length)){
HXLINE(1192)								int button = buttons1->__get(_g);
HXDLIN(1192)								_g = (_g + 1);
HXDLIN(1192)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1192)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1192)							int state = 2;
HXDLIN(1192)							int _g = 0;
HXDLIN(1192)							while((_g < buttons1->length)){
HXLINE(1192)								int button = buttons1->__get(_g);
HXDLIN(1192)								_g = (_g + 1);
HXDLIN(1192)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1192)								int state = 1;
HXDLIN(1192)								int _g = 0;
HXDLIN(1192)								while((_g < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g);
HXDLIN(1192)									_g = (_g + 1);
HXDLIN(1192)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1192)								int state1 = 2;
HXDLIN(1192)								int _g1 = 0;
HXDLIN(1192)								while((_g1 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g1);
HXDLIN(1192)									_g1 = (_g1 + 1);
HXDLIN(1192)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1192)							{
HXLINE(1192)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1192)								int state2 = -1;
HXDLIN(1192)								int _g2 = 0;
HXDLIN(1192)								while((_g2 < buttons1->length)){
HXLINE(1192)									int button = buttons1->__get(_g2);
HXDLIN(1192)									_g2 = (_g2 + 1);
HXDLIN(1192)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepad,(void))

void Controls_obj::addGamepadLiteral(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1200_addGamepadLiteral)
HXLINE(1201)		this->gamepadsAdded->push(id);
HXLINE(1204)		{
HXLINE(1204)			::Dynamic map = buttonMap;
HXDLIN(1204)			::Dynamic _g_map = map;
HXDLIN(1204)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1204)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1204)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1204)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(1204)				 ::Control _g1_key = key;
HXDLIN(1204)				 ::Control control = _g1_key;
HXDLIN(1204)				::Array< int > buttons = _g1_value;
HXLINE(1205)				{
HXLINE(1205)					int id1 = id;
HXDLIN(1205)					::Array< int > buttons1 = buttons;
HXDLIN(1205)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE(1205)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1205)							int state = 2;
HXDLIN(1205)							int _g = 0;
HXDLIN(1205)							while((_g < buttons1->length)){
HXLINE(1205)								int button = buttons1->__get(_g);
HXDLIN(1205)								_g = (_g + 1);
HXDLIN(1205)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE(1205)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1205)							int state = 2;
HXDLIN(1205)							int _g = 0;
HXDLIN(1205)							while((_g < buttons1->length)){
HXLINE(1205)								int button = buttons1->__get(_g);
HXDLIN(1205)								_g = (_g + 1);
HXDLIN(1205)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(1205)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1205)							int state = 2;
HXDLIN(1205)							int _g = 0;
HXDLIN(1205)							while((_g < buttons1->length)){
HXLINE(1205)								int button = buttons1->__get(_g);
HXDLIN(1205)								_g = (_g + 1);
HXDLIN(1205)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE(1205)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1205)							int state = 2;
HXDLIN(1205)							int _g = 0;
HXDLIN(1205)							while((_g < buttons1->length)){
HXLINE(1205)								int button = buttons1->__get(_g);
HXDLIN(1205)								_g = (_g + 1);
HXDLIN(1205)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE(1205)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1205)							int state = 2;
HXDLIN(1205)							int _g = 0;
HXDLIN(1205)							while((_g < buttons1->length)){
HXLINE(1205)								int button = buttons1->__get(_g);
HXDLIN(1205)								_g = (_g + 1);
HXDLIN(1205)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)9: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXLINE(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1205)								int state = 1;
HXDLIN(1205)								int _g = 0;
HXDLIN(1205)								while((_g < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g);
HXDLIN(1205)									_g = (_g + 1);
HXDLIN(1205)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1205)								int state1 = 2;
HXDLIN(1205)								int _g1 = 0;
HXDLIN(1205)								while((_g1 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g1);
HXDLIN(1205)									_g1 = (_g1 + 1);
HXDLIN(1205)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1205)							{
HXLINE(1205)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1205)								int state2 = -1;
HXDLIN(1205)								int _g2 = 0;
HXDLIN(1205)								while((_g2 < buttons1->length)){
HXLINE(1205)									int button = buttons1->__get(_g2);
HXDLIN(1205)									_g2 = (_g2 + 1);
HXDLIN(1205)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepadLiteral,(void))

void Controls_obj::removeGamepad(::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(-1);
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1213_removeGamepad)
HXLINE(1214)		{
HXLINE(1214)			int _g = 0;
HXDLIN(1214)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN(1214)			while((_g < _g1->length)){
HXLINE(1214)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN(1214)				_g = (_g + 1);
HXLINE(1216)				int i = action->inputs->length;
HXLINE(1217)				while(true){
HXLINE(1217)					i = (i - 1);
HXDLIN(1217)					if (!(((i + 1) > 0))) {
HXLINE(1217)						goto _hx_goto_4180;
            					}
HXLINE(1219)					 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE(1220)					bool _hx_tmp;
HXDLIN(1220)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE(1220)						if ((deviceID != -1)) {
HXLINE(1220)							_hx_tmp = (input->deviceID == deviceID);
            						}
            						else {
HXLINE(1220)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE(1220)						_hx_tmp = false;
            					}
HXDLIN(1220)					if (_hx_tmp) {
HXLINE(1221)						action->remove(input,null());
            					}
            				}
            				_hx_goto_4180:;
            			}
            		}
HXLINE(1225)		this->gamepadsAdded->remove(deviceID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeGamepad,(void))

void Controls_obj::addDefaultGamepad(int id){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_1231_addDefaultGamepad)
HXDLIN(1231)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(1231)		_g->set(::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4246,1));
HXDLIN(1231)		_g->set(::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4247,1));
HXDLIN(1231)		_g->set(::Control_obj::UP_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4248,2));
HXDLIN(1231)		_g->set(::Control_obj::DOWN_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4249,2));
HXDLIN(1231)		_g->set(::Control_obj::LEFT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4250,2));
HXDLIN(1231)		_g->set(::Control_obj::RIGHT_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4251,2));
HXDLIN(1231)		_g->set(::Control_obj::PAUSE_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4252,1));
HXDLIN(1231)		_g->set(::Control_obj::RESET_dyn(),::Array_obj< int >::fromData( _hx_array_data_116e4296_4253,1));
HXDLIN(1231)		this->gamepadsAdded->push(id);
HXDLIN(1231)		{
HXDLIN(1231)			::Dynamic map = _g;
HXDLIN(1231)			::Dynamic _g_map = map;
HXDLIN(1231)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1231)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(1231)				 ::Control key = _g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1231)				::Array< int > _g1_value = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(1231)				 ::Control _g1_key = key;
HXDLIN(1231)				 ::Control control = _g1_key;
HXDLIN(1231)				::Array< int > buttons = _g1_value;
HXDLIN(1231)				{
HXDLIN(1231)					int id1 = id;
HXDLIN(1231)					::Array< int > buttons1 = buttons;
HXDLIN(1231)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXDLIN(1231)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1231)							int state = 2;
HXDLIN(1231)							int _g = 0;
HXDLIN(1231)							while((_g < buttons1->length)){
HXDLIN(1231)								int button = buttons1->__get(_g);
HXDLIN(1231)								_g = (_g + 1);
HXDLIN(1231)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXDLIN(1231)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1231)							int state = 2;
HXDLIN(1231)							int _g = 0;
HXDLIN(1231)							while((_g < buttons1->length)){
HXDLIN(1231)								int button = buttons1->__get(_g);
HXDLIN(1231)								_g = (_g + 1);
HXDLIN(1231)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXDLIN(1231)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1231)							int state = 2;
HXDLIN(1231)							int _g = 0;
HXDLIN(1231)							while((_g < buttons1->length)){
HXDLIN(1231)								int button = buttons1->__get(_g);
HXDLIN(1231)								_g = (_g + 1);
HXDLIN(1231)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXDLIN(1231)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1231)							int state = 2;
HXDLIN(1231)							int _g = 0;
HXDLIN(1231)							while((_g < buttons1->length)){
HXDLIN(1231)								int button = buttons1->__get(_g);
HXDLIN(1231)								_g = (_g + 1);
HXDLIN(1231)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXDLIN(1231)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1231)							int state = 2;
HXDLIN(1231)							int _g = 0;
HXDLIN(1231)							while((_g < buttons1->length)){
HXDLIN(1231)								int button = buttons1->__get(_g);
HXDLIN(1231)								_g = (_g + 1);
HXDLIN(1231)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)9: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)10: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)11: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)12: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)13: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)14: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)15: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)16: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)18: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)19: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)20: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)21: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)22: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)23: {
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1231)								int state = 1;
HXDLIN(1231)								int _g = 0;
HXDLIN(1231)								while((_g < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g);
HXDLIN(1231)									_g = (_g + 1);
HXDLIN(1231)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1231)								int state1 = 2;
HXDLIN(1231)								int _g1 = 0;
HXDLIN(1231)								while((_g1 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g1);
HXDLIN(1231)									_g1 = (_g1 + 1);
HXDLIN(1231)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN(1231)							{
HXDLIN(1231)								 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1231)								int state2 = -1;
HXDLIN(1231)								int _g2 = 0;
HXDLIN(1231)								while((_g2 < buttons1->length)){
HXDLIN(1231)									int button = buttons1->__get(_g2);
HXDLIN(1231)									_g2 = (_g2 + 1);
HXDLIN(1231)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,addDefaultGamepad,(void))

void Controls_obj::bindButtons( ::Control control,int id,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1265_bindButtons)
HXDLIN(1265)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN(1265)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN(1265)				int state = 2;
HXDLIN(1265)				int _g = 0;
HXDLIN(1265)				while((_g < buttons->length)){
HXDLIN(1265)					int button = buttons->__get(_g);
HXDLIN(1265)					_g = (_g + 1);
HXDLIN(1265)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN(1265)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN(1265)				int state = 2;
HXDLIN(1265)				int _g = 0;
HXDLIN(1265)				while((_g < buttons->length)){
HXDLIN(1265)					int button = buttons->__get(_g);
HXDLIN(1265)					_g = (_g + 1);
HXDLIN(1265)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN(1265)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN(1265)				int state = 2;
HXDLIN(1265)				int _g = 0;
HXDLIN(1265)				while((_g < buttons->length)){
HXDLIN(1265)					int button = buttons->__get(_g);
HXDLIN(1265)					_g = (_g + 1);
HXDLIN(1265)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN(1265)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN(1265)				int state = 2;
HXDLIN(1265)				int _g = 0;
HXDLIN(1265)				while((_g < buttons->length)){
HXDLIN(1265)					int button = buttons->__get(_g);
HXDLIN(1265)					_g = (_g + 1);
HXDLIN(1265)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN(1265)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN(1265)				int state = 2;
HXDLIN(1265)				int _g = 0;
HXDLIN(1265)				while((_g < buttons->length)){
HXDLIN(1265)					int button = buttons->__get(_g);
HXDLIN(1265)					_g = (_g + 1);
HXDLIN(1265)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)9: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_l1;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_l1P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_l1R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)10: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_u;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_uP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_uR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)11: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_r1;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_r1P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_r1R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)12: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_l2;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_l2P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_l2R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)13: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_d;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_dP;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_dR;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)14: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_r2;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_r2P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_r2R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)15: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n0;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n0P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n0R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)16: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n1;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n1P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n1R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)17: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n2;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n2P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n2R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)18: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n3;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n3P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n3R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)19: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n4;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n4P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n4R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)20: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n5;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n5P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n5R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)21: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n6;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n6P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n6R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)22: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n7;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n7P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n7R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)23: {
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action = this->_n8;
HXDLIN(1265)					int state = 1;
HXDLIN(1265)					int _g = 0;
HXDLIN(1265)					while((_g < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g);
HXDLIN(1265)						_g = (_g + 1);
HXDLIN(1265)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action1 = this->_n8P;
HXDLIN(1265)					int state1 = 2;
HXDLIN(1265)					int _g1 = 0;
HXDLIN(1265)					while((_g1 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g1);
HXDLIN(1265)						_g1 = (_g1 + 1);
HXDLIN(1265)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN(1265)				{
HXDLIN(1265)					 ::flixel::input::actions::FlxActionDigital action2 = this->_n8R;
HXDLIN(1265)					int state2 = -1;
HXDLIN(1265)					int _g2 = 0;
HXDLIN(1265)					while((_g2 < buttons->length)){
HXDLIN(1265)						int button = buttons->__get(_g2);
HXDLIN(1265)						_g2 = (_g2 + 1);
HXDLIN(1265)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,bindButtons,(void))

void Controls_obj::unbindButtons( ::Control control,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1278_unbindButtons)
HXDLIN(1278)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_up,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_upP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_upR,gamepadID,buttons);
            			}
            			break;
            			case (int)1: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_left,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_leftP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_leftR,gamepadID,buttons);
            			}
            			break;
            			case (int)2: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_right,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_rightP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_rightR,gamepadID,buttons);
            			}
            			break;
            			case (int)3: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_down,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_downP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_downR,gamepadID,buttons);
            			}
            			break;
            			case (int)4: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_reset,gamepadID,buttons);
            			}
            			break;
            			case (int)5: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_accept,gamepadID,buttons);
            			}
            			break;
            			case (int)6: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_back,gamepadID,buttons);
            			}
            			break;
            			case (int)7: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_pause,gamepadID,buttons);
            			}
            			break;
            			case (int)8: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_cheat,gamepadID,buttons);
            			}
            			break;
            			case (int)9: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l1,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l1P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l1R,gamepadID,buttons);
            			}
            			break;
            			case (int)10: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_u,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_uP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_uR,gamepadID,buttons);
            			}
            			break;
            			case (int)11: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r1,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r1P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r1R,gamepadID,buttons);
            			}
            			break;
            			case (int)12: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l2,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l2P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_l2R,gamepadID,buttons);
            			}
            			break;
            			case (int)13: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_d,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_dP,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_dR,gamepadID,buttons);
            			}
            			break;
            			case (int)14: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r2,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r2P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_r2R,gamepadID,buttons);
            			}
            			break;
            			case (int)15: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n0,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n0P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n0R,gamepadID,buttons);
            			}
            			break;
            			case (int)16: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n1,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n1P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n1R,gamepadID,buttons);
            			}
            			break;
            			case (int)17: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n2,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n2P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n2R,gamepadID,buttons);
            			}
            			break;
            			case (int)18: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n3,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n3P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n3R,gamepadID,buttons);
            			}
            			break;
            			case (int)19: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n4,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n4P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n4R,gamepadID,buttons);
            			}
            			break;
            			case (int)20: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n5,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n5P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n5R,gamepadID,buttons);
            			}
            			break;
            			case (int)21: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n6,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n6P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n6R,gamepadID,buttons);
            			}
            			break;
            			case (int)22: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n7,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n7P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n7R,gamepadID,buttons);
            			}
            			break;
            			case (int)23: {
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n8,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n8P,gamepadID,buttons);
HXDLIN(1278)				::Controls_obj::removeButtons(this->_n8R,gamepadID,buttons);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,unbindButtons,(void))

::Array< int > Controls_obj::getInputsFor( ::Control control, ::Device device,::Array< int > list){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1302_getInputsFor)
HXLINE(1303)		if (::hx::IsNull( list )) {
HXLINE(1304)			list = ::Array_obj< int >::__new(0);
            		}
HXLINE(1306)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE(1309)				int _g = 0;
HXDLIN(1309)				::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN(1309)				while((_g < _g1->length)){
HXLINE(1309)					 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN(1309)					_g = (_g + 1);
HXLINE(1311)					if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE(1312)						list->push(input->inputID);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(1314)				int id = device->_hx_getInt(0);
HXLINE(1315)				{
HXLINE(1315)					int _g = 0;
HXDLIN(1315)					::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN(1315)					while((_g < _g1->length)){
HXLINE(1315)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN(1315)						_g = (_g + 1);
HXLINE(1317)						if ((input->deviceID == id)) {
HXLINE(1318)							list->push(input->inputID);
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE(1321)		return list;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,getInputsFor,return )

void Controls_obj::removeDevice( ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1326_removeDevice)
HXDLIN(1326)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE(1329)				this->setKeyboardScheme(::KeyboardScheme_obj::None_dyn(),null());
            			}
            			break;
            			case (int)1: {
HXLINE(1330)				int id = device->_hx_getInt(0);
HXLINE(1331)				this->removeGamepad(id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeDevice,(void))

void Controls_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_948b5caa279cd923_770_init)
HXLINE( 771)		 ::flixel::input::actions::FlxActionManager actions =  ::flixel::input::actions::FlxActionManager_obj::__alloc( HX_CTX );
HXLINE( 772)		::flixel::FlxG_obj::inputs->add_flixel_input_actions_FlxActionManager(actions);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,init,(void))

void Controls_obj::addKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys,int state){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_990_addKeys)
HXDLIN( 990)		int _g = 0;
HXDLIN( 990)		while((_g < keys->length)){
HXDLIN( 990)			int key = keys->__get(_g);
HXDLIN( 990)			_g = (_g + 1);
HXLINE( 991)			action->addKey(key,state);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,addKeys,(void))

void Controls_obj::removeKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_995_removeKeys)
HXLINE( 996)		int i = action->inputs->length;
HXLINE( 997)		while(true){
HXLINE( 997)			i = (i - 1);
HXDLIN( 997)			if (!(((i + 1) > 0))) {
HXLINE( 997)				goto _hx_goto_4325;
            			}
HXLINE( 999)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE(1000)			bool _hx_tmp;
HXDLIN(1000)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE(1000)				_hx_tmp = (keys->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE(1000)				_hx_tmp = false;
            			}
HXDLIN(1000)			if (_hx_tmp) {
HXLINE(1001)				action->remove(input,null());
            			}
            		}
            		_hx_goto_4325:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,removeKeys,(void))

void Controls_obj::addButtons( ::flixel::input::actions::FlxActionDigital action,::Array< int > buttons,int state,int id){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1286_addButtons)
HXDLIN(1286)		int _g = 0;
HXDLIN(1286)		while((_g < buttons->length)){
HXDLIN(1286)			int button = buttons->__get(_g);
HXDLIN(1286)			_g = (_g + 1);
HXLINE(1287)			action->addGamepad(button,state,id);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,addButtons,(void))

void Controls_obj::removeButtons( ::flixel::input::actions::FlxActionDigital action,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1291_removeButtons)
HXLINE(1292)		int i = action->inputs->length;
HXLINE(1293)		while(true){
HXLINE(1293)			i = (i - 1);
HXDLIN(1293)			if (!(((i + 1) > 0))) {
HXLINE(1293)				goto _hx_goto_4329;
            			}
HXLINE(1295)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE(1296)			bool _hx_tmp;
HXDLIN(1296)			bool _hx_tmp1;
HXDLIN(1296)			if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE(1296)				if ((gamepadID != -1)) {
HXLINE(1296)					_hx_tmp1 = (input->deviceID == gamepadID);
            				}
            				else {
HXLINE(1296)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(1296)				_hx_tmp1 = false;
            			}
HXDLIN(1296)			if (_hx_tmp1) {
HXLINE(1296)				_hx_tmp = (buttons->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE(1296)				_hx_tmp = false;
            			}
HXDLIN(1296)			if (_hx_tmp) {
HXLINE(1297)				action->remove(input,null());
            			}
            		}
            		_hx_goto_4329:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,removeButtons,(void))

bool Controls_obj::isDevice( ::flixel::input::actions::FlxActionInput input, ::Device device){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1337_isDevice)
HXDLIN(1337)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE(1339)				return ::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() );
            			}
            			break;
            			case (int)1: {
HXLINE(1340)				int id = device->_hx_getInt(0);
HXDLIN(1340)				if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE(1340)					if ((id != -1)) {
HXLINE(1340)						return (input->deviceID == id);
            					}
            					else {
HXLINE(1340)						return true;
            					}
            				}
            				else {
HXLINE(1340)					return false;
            				}
            			}
            			break;
            		}
HXLINE(1337)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isDevice,return )

bool Controls_obj::isGamepad( ::flixel::input::actions::FlxActionInput input,int deviceID){
            	HX_STACKFRAME(&_hx_pos_948b5caa279cd923_1346_isGamepad)
HXDLIN(1346)		if (::hx::IsPointerEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXDLIN(1346)			if ((deviceID != -1)) {
HXDLIN(1346)				return (input->deviceID == deviceID);
            			}
            			else {
HXDLIN(1346)				return true;
            			}
            		}
            		else {
HXDLIN(1346)			return false;
            		}
HXDLIN(1346)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isGamepad,return )


::hx::ObjectPtr< Controls_obj > Controls_obj::__new(::String name, ::KeyboardScheme __o_scheme) {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct(name,__o_scheme);
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::KeyboardScheme __o_scheme) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct(name,__o_scheme);
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	HX_MARK_MEMBER_NAME(_leftR,"_leftR");
	HX_MARK_MEMBER_NAME(_rightR,"_rightR");
	HX_MARK_MEMBER_NAME(_downR,"_downR");
	HX_MARK_MEMBER_NAME(_accept,"_accept");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_pause,"_pause");
	HX_MARK_MEMBER_NAME(_reset,"_reset");
	HX_MARK_MEMBER_NAME(_cheat,"_cheat");
	HX_MARK_MEMBER_NAME(_l1,"_l1");
	HX_MARK_MEMBER_NAME(_l1P,"_l1P");
	HX_MARK_MEMBER_NAME(_l1R,"_l1R");
	HX_MARK_MEMBER_NAME(_u,"_u");
	HX_MARK_MEMBER_NAME(_uP,"_uP");
	HX_MARK_MEMBER_NAME(_uR,"_uR");
	HX_MARK_MEMBER_NAME(_r1,"_r1");
	HX_MARK_MEMBER_NAME(_r1P,"_r1P");
	HX_MARK_MEMBER_NAME(_r1R,"_r1R");
	HX_MARK_MEMBER_NAME(_l2,"_l2");
	HX_MARK_MEMBER_NAME(_l2P,"_l2P");
	HX_MARK_MEMBER_NAME(_l2R,"_l2R");
	HX_MARK_MEMBER_NAME(_d,"_d");
	HX_MARK_MEMBER_NAME(_dP,"_dP");
	HX_MARK_MEMBER_NAME(_dR,"_dR");
	HX_MARK_MEMBER_NAME(_r2,"_r2");
	HX_MARK_MEMBER_NAME(_r2P,"_r2P");
	HX_MARK_MEMBER_NAME(_r2R,"_r2R");
	HX_MARK_MEMBER_NAME(_n0,"_n0");
	HX_MARK_MEMBER_NAME(_n1,"_n1");
	HX_MARK_MEMBER_NAME(_n2,"_n2");
	HX_MARK_MEMBER_NAME(_n3,"_n3");
	HX_MARK_MEMBER_NAME(_n4,"_n4");
	HX_MARK_MEMBER_NAME(_n5,"_n5");
	HX_MARK_MEMBER_NAME(_n6,"_n6");
	HX_MARK_MEMBER_NAME(_n7,"_n7");
	HX_MARK_MEMBER_NAME(_n8,"_n8");
	HX_MARK_MEMBER_NAME(_n0P,"_n0P");
	HX_MARK_MEMBER_NAME(_n1P,"_n1P");
	HX_MARK_MEMBER_NAME(_n2P,"_n2P");
	HX_MARK_MEMBER_NAME(_n3P,"_n3P");
	HX_MARK_MEMBER_NAME(_n4P,"_n4P");
	HX_MARK_MEMBER_NAME(_n5P,"_n5P");
	HX_MARK_MEMBER_NAME(_n6P,"_n6P");
	HX_MARK_MEMBER_NAME(_n7P,"_n7P");
	HX_MARK_MEMBER_NAME(_n8P,"_n8P");
	HX_MARK_MEMBER_NAME(_n0R,"_n0R");
	HX_MARK_MEMBER_NAME(_n1R,"_n1R");
	HX_MARK_MEMBER_NAME(_n2R,"_n2R");
	HX_MARK_MEMBER_NAME(_n3R,"_n3R");
	HX_MARK_MEMBER_NAME(_n4R,"_n4R");
	HX_MARK_MEMBER_NAME(_n5R,"_n5R");
	HX_MARK_MEMBER_NAME(_n6R,"_n6R");
	HX_MARK_MEMBER_NAME(_n7R,"_n7R");
	HX_MARK_MEMBER_NAME(_n8R,"_n8R");
	HX_MARK_MEMBER_NAME(byName,"byName");
	HX_MARK_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_MARK_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	HX_VISIT_MEMBER_NAME(_leftR,"_leftR");
	HX_VISIT_MEMBER_NAME(_rightR,"_rightR");
	HX_VISIT_MEMBER_NAME(_downR,"_downR");
	HX_VISIT_MEMBER_NAME(_accept,"_accept");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_pause,"_pause");
	HX_VISIT_MEMBER_NAME(_reset,"_reset");
	HX_VISIT_MEMBER_NAME(_cheat,"_cheat");
	HX_VISIT_MEMBER_NAME(_l1,"_l1");
	HX_VISIT_MEMBER_NAME(_l1P,"_l1P");
	HX_VISIT_MEMBER_NAME(_l1R,"_l1R");
	HX_VISIT_MEMBER_NAME(_u,"_u");
	HX_VISIT_MEMBER_NAME(_uP,"_uP");
	HX_VISIT_MEMBER_NAME(_uR,"_uR");
	HX_VISIT_MEMBER_NAME(_r1,"_r1");
	HX_VISIT_MEMBER_NAME(_r1P,"_r1P");
	HX_VISIT_MEMBER_NAME(_r1R,"_r1R");
	HX_VISIT_MEMBER_NAME(_l2,"_l2");
	HX_VISIT_MEMBER_NAME(_l2P,"_l2P");
	HX_VISIT_MEMBER_NAME(_l2R,"_l2R");
	HX_VISIT_MEMBER_NAME(_d,"_d");
	HX_VISIT_MEMBER_NAME(_dP,"_dP");
	HX_VISIT_MEMBER_NAME(_dR,"_dR");
	HX_VISIT_MEMBER_NAME(_r2,"_r2");
	HX_VISIT_MEMBER_NAME(_r2P,"_r2P");
	HX_VISIT_MEMBER_NAME(_r2R,"_r2R");
	HX_VISIT_MEMBER_NAME(_n0,"_n0");
	HX_VISIT_MEMBER_NAME(_n1,"_n1");
	HX_VISIT_MEMBER_NAME(_n2,"_n2");
	HX_VISIT_MEMBER_NAME(_n3,"_n3");
	HX_VISIT_MEMBER_NAME(_n4,"_n4");
	HX_VISIT_MEMBER_NAME(_n5,"_n5");
	HX_VISIT_MEMBER_NAME(_n6,"_n6");
	HX_VISIT_MEMBER_NAME(_n7,"_n7");
	HX_VISIT_MEMBER_NAME(_n8,"_n8");
	HX_VISIT_MEMBER_NAME(_n0P,"_n0P");
	HX_VISIT_MEMBER_NAME(_n1P,"_n1P");
	HX_VISIT_MEMBER_NAME(_n2P,"_n2P");
	HX_VISIT_MEMBER_NAME(_n3P,"_n3P");
	HX_VISIT_MEMBER_NAME(_n4P,"_n4P");
	HX_VISIT_MEMBER_NAME(_n5P,"_n5P");
	HX_VISIT_MEMBER_NAME(_n6P,"_n6P");
	HX_VISIT_MEMBER_NAME(_n7P,"_n7P");
	HX_VISIT_MEMBER_NAME(_n8P,"_n8P");
	HX_VISIT_MEMBER_NAME(_n0R,"_n0R");
	HX_VISIT_MEMBER_NAME(_n1R,"_n1R");
	HX_VISIT_MEMBER_NAME(_n2R,"_n2R");
	HX_VISIT_MEMBER_NAME(_n3R,"_n3R");
	HX_VISIT_MEMBER_NAME(_n4R,"_n4R");
	HX_VISIT_MEMBER_NAME(_n5R,"_n5R");
	HX_VISIT_MEMBER_NAME(_n6R,"_n6R");
	HX_VISIT_MEMBER_NAME(_n7R,"_n7R");
	HX_VISIT_MEMBER_NAME(_n8R,"_n8R");
	HX_VISIT_MEMBER_NAME(byName,"byName");
	HX_VISIT_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_VISIT_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_u") ) { return ::hx::Val( _u ); }
		if (HX_FIELD_EQ(inName,"_d") ) { return ::hx::Val( _d ); }
		if (HX_FIELD_EQ(inName,"UP") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP() ); }
		if (HX_FIELD_EQ(inName,"L1") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L1() ); }
		if (HX_FIELD_EQ(inName,"D1") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_D1() ); }
		if (HX_FIELD_EQ(inName,"R1") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R1() ); }
		if (HX_FIELD_EQ(inName,"L2") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L2() ); }
		if (HX_FIELD_EQ(inName,"U1") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_U1() ); }
		if (HX_FIELD_EQ(inName,"R2") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R2() ); }
		if (HX_FIELD_EQ(inName,"N0") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N0() ); }
		if (HX_FIELD_EQ(inName,"N1") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N1() ); }
		if (HX_FIELD_EQ(inName,"N2") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N2() ); }
		if (HX_FIELD_EQ(inName,"N3") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N3() ); }
		if (HX_FIELD_EQ(inName,"N4") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N4() ); }
		if (HX_FIELD_EQ(inName,"N5") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N5() ); }
		if (HX_FIELD_EQ(inName,"N6") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N6() ); }
		if (HX_FIELD_EQ(inName,"N7") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N7() ); }
		if (HX_FIELD_EQ(inName,"N8") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N8() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return ::hx::Val( _up ); }
		if (HX_FIELD_EQ(inName,"_l1") ) { return ::hx::Val( _l1 ); }
		if (HX_FIELD_EQ(inName,"_uP") ) { return ::hx::Val( _uP ); }
		if (HX_FIELD_EQ(inName,"_uR") ) { return ::hx::Val( _uR ); }
		if (HX_FIELD_EQ(inName,"_r1") ) { return ::hx::Val( _r1 ); }
		if (HX_FIELD_EQ(inName,"_l2") ) { return ::hx::Val( _l2 ); }
		if (HX_FIELD_EQ(inName,"_dP") ) { return ::hx::Val( _dP ); }
		if (HX_FIELD_EQ(inName,"_dR") ) { return ::hx::Val( _dR ); }
		if (HX_FIELD_EQ(inName,"_r2") ) { return ::hx::Val( _r2 ); }
		if (HX_FIELD_EQ(inName,"_n0") ) { return ::hx::Val( _n0 ); }
		if (HX_FIELD_EQ(inName,"_n1") ) { return ::hx::Val( _n1 ); }
		if (HX_FIELD_EQ(inName,"_n2") ) { return ::hx::Val( _n2 ); }
		if (HX_FIELD_EQ(inName,"_n3") ) { return ::hx::Val( _n3 ); }
		if (HX_FIELD_EQ(inName,"_n4") ) { return ::hx::Val( _n4 ); }
		if (HX_FIELD_EQ(inName,"_n5") ) { return ::hx::Val( _n5 ); }
		if (HX_FIELD_EQ(inName,"_n6") ) { return ::hx::Val( _n6 ); }
		if (HX_FIELD_EQ(inName,"_n7") ) { return ::hx::Val( _n7 ); }
		if (HX_FIELD_EQ(inName,"_n8") ) { return ::hx::Val( _n8 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return ::hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return ::hx::Val( _upR ); }
		if (HX_FIELD_EQ(inName,"_l1P") ) { return ::hx::Val( _l1P ); }
		if (HX_FIELD_EQ(inName,"_l1R") ) { return ::hx::Val( _l1R ); }
		if (HX_FIELD_EQ(inName,"_r1P") ) { return ::hx::Val( _r1P ); }
		if (HX_FIELD_EQ(inName,"_r1R") ) { return ::hx::Val( _r1R ); }
		if (HX_FIELD_EQ(inName,"_l2P") ) { return ::hx::Val( _l2P ); }
		if (HX_FIELD_EQ(inName,"_l2R") ) { return ::hx::Val( _l2R ); }
		if (HX_FIELD_EQ(inName,"_r2P") ) { return ::hx::Val( _r2P ); }
		if (HX_FIELD_EQ(inName,"_r2R") ) { return ::hx::Val( _r2R ); }
		if (HX_FIELD_EQ(inName,"_n0P") ) { return ::hx::Val( _n0P ); }
		if (HX_FIELD_EQ(inName,"_n1P") ) { return ::hx::Val( _n1P ); }
		if (HX_FIELD_EQ(inName,"_n2P") ) { return ::hx::Val( _n2P ); }
		if (HX_FIELD_EQ(inName,"_n3P") ) { return ::hx::Val( _n3P ); }
		if (HX_FIELD_EQ(inName,"_n4P") ) { return ::hx::Val( _n4P ); }
		if (HX_FIELD_EQ(inName,"_n5P") ) { return ::hx::Val( _n5P ); }
		if (HX_FIELD_EQ(inName,"_n6P") ) { return ::hx::Val( _n6P ); }
		if (HX_FIELD_EQ(inName,"_n7P") ) { return ::hx::Val( _n7P ); }
		if (HX_FIELD_EQ(inName,"_n8P") ) { return ::hx::Val( _n8P ); }
		if (HX_FIELD_EQ(inName,"_n0R") ) { return ::hx::Val( _n0R ); }
		if (HX_FIELD_EQ(inName,"_n1R") ) { return ::hx::Val( _n1R ); }
		if (HX_FIELD_EQ(inName,"_n2R") ) { return ::hx::Val( _n2R ); }
		if (HX_FIELD_EQ(inName,"_n3R") ) { return ::hx::Val( _n3R ); }
		if (HX_FIELD_EQ(inName,"_n4R") ) { return ::hx::Val( _n4R ); }
		if (HX_FIELD_EQ(inName,"_n5R") ) { return ::hx::Val( _n5R ); }
		if (HX_FIELD_EQ(inName,"_n6R") ) { return ::hx::Val( _n6R ); }
		if (HX_FIELD_EQ(inName,"_n7R") ) { return ::hx::Val( _n7R ); }
		if (HX_FIELD_EQ(inName,"_n8R") ) { return ::hx::Val( _n8R ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT() ); }
		if (HX_FIELD_EQ(inName,"DOWN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN() ); }
		if (HX_FIELD_EQ(inName,"UP_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_P() ); }
		if (HX_FIELD_EQ(inName,"UP_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_R() ); }
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_BACK() ); }
		if (HX_FIELD_EQ(inName,"L1_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L1_P() ); }
		if (HX_FIELD_EQ(inName,"L1_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L1_R() ); }
		if (HX_FIELD_EQ(inName,"D1_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_D1_P() ); }
		if (HX_FIELD_EQ(inName,"D1_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_D1_R() ); }
		if (HX_FIELD_EQ(inName,"R1_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R1_P() ); }
		if (HX_FIELD_EQ(inName,"R1_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R1_R() ); }
		if (HX_FIELD_EQ(inName,"L2_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L2_P() ); }
		if (HX_FIELD_EQ(inName,"L2_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_L2_R() ); }
		if (HX_FIELD_EQ(inName,"U1_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_U1_P() ); }
		if (HX_FIELD_EQ(inName,"U1_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_U1_R() ); }
		if (HX_FIELD_EQ(inName,"R2_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R2_P() ); }
		if (HX_FIELD_EQ(inName,"R2_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_R2_R() ); }
		if (HX_FIELD_EQ(inName,"N0_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N0_P() ); }
		if (HX_FIELD_EQ(inName,"N1_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N1_P() ); }
		if (HX_FIELD_EQ(inName,"N2_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N2_P() ); }
		if (HX_FIELD_EQ(inName,"N3_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N3_P() ); }
		if (HX_FIELD_EQ(inName,"N4_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N4_P() ); }
		if (HX_FIELD_EQ(inName,"N5_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N5_P() ); }
		if (HX_FIELD_EQ(inName,"N6_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N6_P() ); }
		if (HX_FIELD_EQ(inName,"N7_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N7_P() ); }
		if (HX_FIELD_EQ(inName,"N8_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N8_P() ); }
		if (HX_FIELD_EQ(inName,"N0_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N0_R() ); }
		if (HX_FIELD_EQ(inName,"N1_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N1_R() ); }
		if (HX_FIELD_EQ(inName,"N2_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N2_R() ); }
		if (HX_FIELD_EQ(inName,"N3_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N3_R() ); }
		if (HX_FIELD_EQ(inName,"N4_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N4_R() ); }
		if (HX_FIELD_EQ(inName,"N5_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N5_R() ); }
		if (HX_FIELD_EQ(inName,"N6_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N6_R() ); }
		if (HX_FIELD_EQ(inName,"N7_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N7_R() ); }
		if (HX_FIELD_EQ(inName,"N8_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_N8_R() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		if (HX_FIELD_EQ(inName,"RIGHT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"PAUSE") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_PAUSE() ); }
		if (HX_FIELD_EQ(inName,"RESET") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RESET() ); }
		if (HX_FIELD_EQ(inName,"CHEAT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_CHEAT() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return ::hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return ::hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftR") ) { return ::hx::Val( _leftR ); }
		if (HX_FIELD_EQ(inName,"_downR") ) { return ::hx::Val( _downR ); }
		if (HX_FIELD_EQ(inName,"_pause") ) { return ::hx::Val( _pause ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return ::hx::Val( _reset ); }
		if (HX_FIELD_EQ(inName,"_cheat") ) { return ::hx::Val( _cheat ); }
		if (HX_FIELD_EQ(inName,"byName") ) { return ::hx::Val( byName ); }
		if (HX_FIELD_EQ(inName,"get_UP") ) { return ::hx::Val( get_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_P() ); }
		if (HX_FIELD_EQ(inName,"DOWN_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_P() ); }
		if (HX_FIELD_EQ(inName,"LEFT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_R() ); }
		if (HX_FIELD_EQ(inName,"DOWN_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_R() ); }
		if (HX_FIELD_EQ(inName,"ACCEPT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ACCEPT() ); }
		if (HX_FIELD_EQ(inName,"get_L1") ) { return ::hx::Val( get_L1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_D1") ) { return ::hx::Val( get_D1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R1") ) { return ::hx::Val( get_R1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_L2") ) { return ::hx::Val( get_L2_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_U1") ) { return ::hx::Val( get_U1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R2") ) { return ::hx::Val( get_R2_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N0") ) { return ::hx::Val( get_N0_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N1") ) { return ::hx::Val( get_N1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N2") ) { return ::hx::Val( get_N2_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N3") ) { return ::hx::Val( get_N3_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N4") ) { return ::hx::Val( get_N4_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N5") ) { return ::hx::Val( get_N5_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N6") ) { return ::hx::Val( get_N6_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N7") ) { return ::hx::Val( get_N7_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N8") ) { return ::hx::Val( get_N8_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return ::hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return ::hx::Val( _rightP ); }
		if (HX_FIELD_EQ(inName,"_rightR") ) { return ::hx::Val( _rightR ); }
		if (HX_FIELD_EQ(inName,"_accept") ) { return ::hx::Val( _accept ); }
		if (HX_FIELD_EQ(inName,"RIGHT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_P() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_R() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_LEFT") ) { return ::hx::Val( get_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN") ) { return ::hx::Val( get_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_P") ) { return ::hx::Val( get_UP_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_R") ) { return ::hx::Val( get_UP_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return ::hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_L1_P") ) { return ::hx::Val( get_L1_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_L1_R") ) { return ::hx::Val( get_L1_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_D1_P") ) { return ::hx::Val( get_D1_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_D1_R") ) { return ::hx::Val( get_D1_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R1_P") ) { return ::hx::Val( get_R1_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R1_R") ) { return ::hx::Val( get_R1_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_L2_P") ) { return ::hx::Val( get_L2_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_L2_R") ) { return ::hx::Val( get_L2_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_U1_P") ) { return ::hx::Val( get_U1_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_U1_R") ) { return ::hx::Val( get_U1_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R2_P") ) { return ::hx::Val( get_R2_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_R2_R") ) { return ::hx::Val( get_R2_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N0_P") ) { return ::hx::Val( get_N0_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N1_P") ) { return ::hx::Val( get_N1_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N2_P") ) { return ::hx::Val( get_N2_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N3_P") ) { return ::hx::Val( get_N3_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N4_P") ) { return ::hx::Val( get_N4_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N5_P") ) { return ::hx::Val( get_N5_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N6_P") ) { return ::hx::Val( get_N6_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N7_P") ) { return ::hx::Val( get_N7_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N8_P") ) { return ::hx::Val( get_N8_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N0_R") ) { return ::hx::Val( get_N0_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N1_R") ) { return ::hx::Val( get_N1_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N2_R") ) { return ::hx::Val( get_N2_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N3_R") ) { return ::hx::Val( get_N3_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N4_R") ) { return ::hx::Val( get_N4_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N5_R") ) { return ::hx::Val( get_N5_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N6_R") ) { return ::hx::Val( get_N6_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N7_R") ) { return ::hx::Val( get_N7_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_N8_R") ) { return ::hx::Val( get_N8_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindKeys") ) { return ::hx::Val( bindKeys_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_RIGHT") ) { return ::hx::Val( get_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_PAUSE") ) { return ::hx::Val( get_PAUSE_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RESET") ) { return ::hx::Val( get_RESET_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_CHEAT") ) { return ::hx::Val( get_CHEAT_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_LEFT_P") ) { return ::hx::Val( get_LEFT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_P") ) { return ::hx::Val( get_DOWN_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_R") ) { return ::hx::Val( get_LEFT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_R") ) { return ::hx::Val( get_DOWN_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ACCEPT") ) { return ::hx::Val( get_ACCEPT_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindKeys") ) { return ::hx::Val( unbindKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return ::hx::Val( addGamepad_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_RIGHT_P") ) { return ::hx::Val( get_RIGHT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_R") ) { return ::hx::Val( get_RIGHT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkByName") ) { return ::hx::Val( checkByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindButtons") ) { return ::hx::Val( bindButtons_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"forEachBound") ) { return ::hx::Val( forEachBound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputsFor") ) { return ::hx::Val( getInputsFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeDevice") ) { return ::hx::Val( removeDevice_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { return ::hx::Val( gamepadsAdded ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return ::hx::Val( removeGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindButtons") ) { return ::hx::Val( unbindButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { return ::hx::Val( keyboardScheme ); }
		if (HX_FIELD_EQ(inName,"replaceBinding") ) { return ::hx::Val( replaceBinding_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeyboard") ) { return ::hx::Val( removeKeyboard_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDialogueName") ) { return ::hx::Val( getDialogueName_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setKeyboardScheme") ) { return ::hx::Val( setKeyboardScheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepadLiteral") ) { return ::hx::Val( addGamepadLiteral_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDefaultGamepad") ) { return ::hx::Val( addDefaultGamepad_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeKeyboardScheme") ) { return ::hx::Val( mergeKeyboardScheme_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getActionFromControl") ) { return ::hx::Val( getActionFromControl_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getDialogueNameFromToken") ) { return ::hx::Val( getDialogueNameFromToken_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Controls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addKeys") ) { outValue = addKeys_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDevice") ) { outValue = isDevice_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamepad") ) { outValue = isGamepad_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeKeys") ) { outValue = removeKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addButtons") ) { outValue = addButtons_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeButtons") ) { outValue = removeButtons_dyn(); return true; }
	}
	return false;
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"_u") ) { _u=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_d") ) { _d=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l1") ) { _l1=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uP") ) { _uP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_uR") ) { _uR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r1") ) { _r1=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l2") ) { _l2=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dP") ) { _dP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dR") ) { _dR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r2") ) { _r2=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n0") ) { _n0=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n1") ) { _n1=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n2") ) { _n2=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n3") ) { _n3=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n4") ) { _n4=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n5") ) { _n5=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n6") ) { _n6=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n7") ) { _n7=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n8") ) { _n8=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l1P") ) { _l1P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l1R") ) { _l1R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r1P") ) { _r1P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r1R") ) { _r1R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l2P") ) { _l2P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_l2R") ) { _l2R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r2P") ) { _r2P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_r2R") ) { _r2R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n0P") ) { _n0P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n1P") ) { _n1P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n2P") ) { _n2P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n3P") ) { _n3P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n4P") ) { _n4P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n5P") ) { _n5P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n6P") ) { _n6P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n7P") ) { _n7P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n8P") ) { _n8P=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n0R") ) { _n0R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n1R") ) { _n1R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n2R") ) { _n2R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n3R") ) { _n3R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n4R") ) { _n4R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n5R") ) { _n5R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n6R") ) { _n6R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n7R") ) { _n7R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_n8R") ) { _n8R=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftR") ) { _leftR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downR") ) { _downR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pause") ) { _pause=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reset") ) { _reset=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cheat") ) { _cheat=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byName") ) { byName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightR") ) { _rightR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accept") ) { _accept=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { gamepadsAdded=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { keyboardScheme=inValue.Cast<  ::KeyboardScheme >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_up",7a,7c,48,00));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_down",41,14,7f,f5));
	outFields->push(HX_("_upP",96,6e,24,3f));
	outFields->push(HX_("_leftP",aa,45,3e,6e));
	outFields->push(HX_("_rightP",93,66,9d,bc));
	outFields->push(HX_("_downP",ef,a4,b2,d9));
	outFields->push(HX_("_upR",98,6e,24,3f));
	outFields->push(HX_("_leftR",ac,45,3e,6e));
	outFields->push(HX_("_rightR",95,66,9d,bc));
	outFields->push(HX_("_downR",f1,a4,b2,d9));
	outFields->push(HX_("_accept",a7,a4,7d,79));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_pause",37,1e,3f,b9));
	outFields->push(HX_("_reset",10,91,af,e2));
	outFields->push(HX_("_cheat",54,de,9d,41));
	outFields->push(HX_("_l1",64,74,48,00));
	outFields->push(HX_("_l1P",6c,63,1d,3f));
	outFields->push(HX_("_l1R",6e,63,1d,3f));
	outFields->push(HX_("_u",36,53,00,00));
	outFields->push(HX_("_uP",5a,7c,48,00));
	outFields->push(HX_("_uR",5c,7c,48,00));
	outFields->push(HX_("_r1",9e,79,48,00));
	outFields->push(HX_("_r1P",f2,f0,21,3f));
	outFields->push(HX_("_r1R",f4,f0,21,3f));
	outFields->push(HX_("_l2",65,74,48,00));
	outFields->push(HX_("_l2P",4b,64,1d,3f));
	outFields->push(HX_("_l2R",4d,64,1d,3f));
	outFields->push(HX_("_d",25,53,00,00));
	outFields->push(HX_("_dP",8b,6d,48,00));
	outFields->push(HX_("_dR",8d,6d,48,00));
	outFields->push(HX_("_r2",9f,79,48,00));
	outFields->push(HX_("_r2P",d1,f1,21,3f));
	outFields->push(HX_("_r2R",d3,f1,21,3f));
	outFields->push(HX_("_n0",21,76,48,00));
	outFields->push(HX_("_n1",22,76,48,00));
	outFields->push(HX_("_n2",23,76,48,00));
	outFields->push(HX_("_n3",24,76,48,00));
	outFields->push(HX_("_n4",25,76,48,00));
	outFields->push(HX_("_n5",26,76,48,00));
	outFields->push(HX_("_n6",27,76,48,00));
	outFields->push(HX_("_n7",28,76,48,00));
	outFields->push(HX_("_n8",29,76,48,00));
	outFields->push(HX_("_n0P",0f,e7,1e,3f));
	outFields->push(HX_("_n1P",ee,e7,1e,3f));
	outFields->push(HX_("_n2P",cd,e8,1e,3f));
	outFields->push(HX_("_n3P",ac,e9,1e,3f));
	outFields->push(HX_("_n4P",8b,ea,1e,3f));
	outFields->push(HX_("_n5P",6a,eb,1e,3f));
	outFields->push(HX_("_n6P",49,ec,1e,3f));
	outFields->push(HX_("_n7P",28,ed,1e,3f));
	outFields->push(HX_("_n8P",07,ee,1e,3f));
	outFields->push(HX_("_n0R",11,e7,1e,3f));
	outFields->push(HX_("_n1R",f0,e7,1e,3f));
	outFields->push(HX_("_n2R",cf,e8,1e,3f));
	outFields->push(HX_("_n3R",ae,e9,1e,3f));
	outFields->push(HX_("_n4R",8d,ea,1e,3f));
	outFields->push(HX_("_n5R",6c,eb,1e,3f));
	outFields->push(HX_("_n6R",4b,ec,1e,3f));
	outFields->push(HX_("_n7R",2a,ed,1e,3f));
	outFields->push(HX_("_n8R",09,ee,1e,3f));
	outFields->push(HX_("byName",c2,2b,4e,0e));
	outFields->push(HX_("gamepadsAdded",ae,52,a9,94));
	outFields->push(HX_("keyboardScheme",2c,c8,f4,c5));
	outFields->push(HX_("UP",5b,4a,00,00));
	outFields->push(HX_("LEFT",07,d0,70,32));
	outFields->push(HX_("RIGHT",bc,43,52,67));
	outFields->push(HX_("DOWN",62,c0,2e,2d));
	outFields->push(HX_("UP_P",2c,2a,6c,38));
	outFields->push(HX_("LEFT_P",d8,72,4a,4c));
	outFields->push(HX_("RIGHT_P",cd,fd,37,93));
	outFields->push(HX_("DOWN_P",f3,6f,a9,e6));
	outFields->push(HX_("UP_R",2e,2a,6c,38));
	outFields->push(HX_("LEFT_R",da,72,4a,4c));
	outFields->push(HX_("RIGHT_R",cf,fd,37,93));
	outFields->push(HX_("DOWN_R",f5,6f,a9,e6));
	outFields->push(HX_("ACCEPT",08,3f,89,bd));
	outFields->push(HX_("BACK",27,a2,d1,2b));
	outFields->push(HX_("PAUSE",d6,0e,46,3b));
	outFields->push(HX_("RESET",af,81,b6,64));
	outFields->push(HX_("CHEAT",f3,ce,a4,c3));
	outFields->push(HX_("L1",65,42,00,00));
	outFields->push(HX_("L1_P",b6,b8,61,32));
	outFields->push(HX_("L1_R",b8,b8,61,32));
	outFields->push(HX_("D1",6d,3b,00,00));
	outFields->push(HX_("D1_P",be,03,18,2d));
	outFields->push(HX_("D1_R",c0,03,18,2d));
	outFields->push(HX_("R1",9f,47,00,00));
	outFields->push(HX_("R1_P",70,00,59,36));
	outFields->push(HX_("R1_R",72,00,59,36));
	outFields->push(HX_("L2",66,42,00,00));
	outFields->push(HX_("L2_P",f7,7a,62,32));
	outFields->push(HX_("L2_R",f9,7a,62,32));
	outFields->push(HX_("U1",3c,4a,00,00));
	outFields->push(HX_("U1_P",4d,a4,54,38));
	outFields->push(HX_("U1_R",4f,a4,54,38));
	outFields->push(HX_("R2",a0,47,00,00));
	outFields->push(HX_("R2_P",b1,c2,59,36));
	outFields->push(HX_("R2_R",b3,c2,59,36));
	outFields->push(HX_("N0",22,44,00,00));
	outFields->push(HX_("N1",23,44,00,00));
	outFields->push(HX_("N2",24,44,00,00));
	outFields->push(HX_("N3",25,44,00,00));
	outFields->push(HX_("N4",26,44,00,00));
	outFields->push(HX_("N5",27,44,00,00));
	outFields->push(HX_("N6",28,44,00,00));
	outFields->push(HX_("N7",29,44,00,00));
	outFields->push(HX_("N8",2a,44,00,00));
	outFields->push(HX_("N0_P",b3,63,b3,33));
	outFields->push(HX_("N1_P",f4,25,b4,33));
	outFields->push(HX_("N2_P",35,e8,b4,33));
	outFields->push(HX_("N3_P",76,aa,b5,33));
	outFields->push(HX_("N4_P",b7,6c,b6,33));
	outFields->push(HX_("N5_P",f8,2e,b7,33));
	outFields->push(HX_("N6_P",39,f1,b7,33));
	outFields->push(HX_("N7_P",7a,b3,b8,33));
	outFields->push(HX_("N8_P",bb,75,b9,33));
	outFields->push(HX_("N0_R",b5,63,b3,33));
	outFields->push(HX_("N1_R",f6,25,b4,33));
	outFields->push(HX_("N2_R",37,e8,b4,33));
	outFields->push(HX_("N3_R",78,aa,b5,33));
	outFields->push(HX_("N4_R",b9,6c,b6,33));
	outFields->push(HX_("N5_R",fa,2e,b7,33));
	outFields->push(HX_("N6_R",3b,f1,b7,33));
	outFields->push(HX_("N7_R",7c,b3,b8,33));
	outFields->push(HX_("N8_R",bd,75,b9,33));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_up),HX_("_up",7a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_down),HX_("_down",41,14,7f,f5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upP),HX_("_upP",96,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftP),HX_("_leftP",aa,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightP),HX_("_rightP",93,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downP),HX_("_downP",ef,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upR),HX_("_upR",98,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftR),HX_("_leftR",ac,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightR),HX_("_rightR",95,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downR),HX_("_downR",f1,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_accept),HX_("_accept",a7,a4,7d,79)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_pause),HX_("_pause",37,1e,3f,b9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_reset),HX_("_reset",10,91,af,e2)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_cheat),HX_("_cheat",54,de,9d,41)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l1),HX_("_l1",64,74,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l1P),HX_("_l1P",6c,63,1d,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l1R),HX_("_l1R",6e,63,1d,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_u),HX_("_u",36,53,00,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_uP),HX_("_uP",5a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_uR),HX_("_uR",5c,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r1),HX_("_r1",9e,79,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r1P),HX_("_r1P",f2,f0,21,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r1R),HX_("_r1R",f4,f0,21,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l2),HX_("_l2",65,74,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l2P),HX_("_l2P",4b,64,1d,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_l2R),HX_("_l2R",4d,64,1d,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_d),HX_("_d",25,53,00,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_dP),HX_("_dP",8b,6d,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_dR),HX_("_dR",8d,6d,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r2),HX_("_r2",9f,79,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r2P),HX_("_r2P",d1,f1,21,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_r2R),HX_("_r2R",d3,f1,21,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n0),HX_("_n0",21,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n1),HX_("_n1",22,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n2),HX_("_n2",23,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n3),HX_("_n3",24,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n4),HX_("_n4",25,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n5),HX_("_n5",26,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n6),HX_("_n6",27,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n7),HX_("_n7",28,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n8),HX_("_n8",29,76,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n0P),HX_("_n0P",0f,e7,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n1P),HX_("_n1P",ee,e7,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n2P),HX_("_n2P",cd,e8,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n3P),HX_("_n3P",ac,e9,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n4P),HX_("_n4P",8b,ea,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n5P),HX_("_n5P",6a,eb,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n6P),HX_("_n6P",49,ec,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n7P),HX_("_n7P",28,ed,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n8P),HX_("_n8P",07,ee,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n0R),HX_("_n0R",11,e7,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n1R),HX_("_n1R",f0,e7,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n2R),HX_("_n2R",cf,e8,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n3R),HX_("_n3R",ae,e9,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n4R),HX_("_n4R",8d,ea,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n5R),HX_("_n5R",6c,eb,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n6R),HX_("_n6R",4b,ec,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n7R),HX_("_n7R",2a,ed,1e,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_n8R),HX_("_n8R",09,ee,1e,3f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,byName),HX_("byName",c2,2b,4e,0e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Controls_obj,gamepadsAdded),HX_("gamepadsAdded",ae,52,a9,94)},
	{::hx::fsObject /*  ::KeyboardScheme */ ,(int)offsetof(Controls_obj,keyboardScheme),HX_("keyboardScheme",2c,c8,f4,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controls_obj_sStaticStorageInfo = 0;
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("_up",7a,7c,48,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_right",1d,53,4b,e5),
	HX_("_down",41,14,7f,f5),
	HX_("_upP",96,6e,24,3f),
	HX_("_leftP",aa,45,3e,6e),
	HX_("_rightP",93,66,9d,bc),
	HX_("_downP",ef,a4,b2,d9),
	HX_("_upR",98,6e,24,3f),
	HX_("_leftR",ac,45,3e,6e),
	HX_("_rightR",95,66,9d,bc),
	HX_("_downR",f1,a4,b2,d9),
	HX_("_accept",a7,a4,7d,79),
	HX_("_back",06,f6,21,f4),
	HX_("_pause",37,1e,3f,b9),
	HX_("_reset",10,91,af,e2),
	HX_("_cheat",54,de,9d,41),
	HX_("_l1",64,74,48,00),
	HX_("_l1P",6c,63,1d,3f),
	HX_("_l1R",6e,63,1d,3f),
	HX_("_u",36,53,00,00),
	HX_("_uP",5a,7c,48,00),
	HX_("_uR",5c,7c,48,00),
	HX_("_r1",9e,79,48,00),
	HX_("_r1P",f2,f0,21,3f),
	HX_("_r1R",f4,f0,21,3f),
	HX_("_l2",65,74,48,00),
	HX_("_l2P",4b,64,1d,3f),
	HX_("_l2R",4d,64,1d,3f),
	HX_("_d",25,53,00,00),
	HX_("_dP",8b,6d,48,00),
	HX_("_dR",8d,6d,48,00),
	HX_("_r2",9f,79,48,00),
	HX_("_r2P",d1,f1,21,3f),
	HX_("_r2R",d3,f1,21,3f),
	HX_("_n0",21,76,48,00),
	HX_("_n1",22,76,48,00),
	HX_("_n2",23,76,48,00),
	HX_("_n3",24,76,48,00),
	HX_("_n4",25,76,48,00),
	HX_("_n5",26,76,48,00),
	HX_("_n6",27,76,48,00),
	HX_("_n7",28,76,48,00),
	HX_("_n8",29,76,48,00),
	HX_("_n0P",0f,e7,1e,3f),
	HX_("_n1P",ee,e7,1e,3f),
	HX_("_n2P",cd,e8,1e,3f),
	HX_("_n3P",ac,e9,1e,3f),
	HX_("_n4P",8b,ea,1e,3f),
	HX_("_n5P",6a,eb,1e,3f),
	HX_("_n6P",49,ec,1e,3f),
	HX_("_n7P",28,ed,1e,3f),
	HX_("_n8P",07,ee,1e,3f),
	HX_("_n0R",11,e7,1e,3f),
	HX_("_n1R",f0,e7,1e,3f),
	HX_("_n2R",cf,e8,1e,3f),
	HX_("_n3R",ae,e9,1e,3f),
	HX_("_n4R",8d,ea,1e,3f),
	HX_("_n5R",6c,eb,1e,3f),
	HX_("_n6R",4b,ec,1e,3f),
	HX_("_n7R",2a,ed,1e,3f),
	HX_("_n8R",09,ee,1e,3f),
	HX_("byName",c2,2b,4e,0e),
	HX_("gamepadsAdded",ae,52,a9,94),
	HX_("keyboardScheme",2c,c8,f4,c5),
	HX_("get_UP",a4,e1,2f,a3),
	HX_("get_LEFT",90,8b,2b,b2),
	HX_("get_RIGHT",13,a0,fb,aa),
	HX_("get_DOWN",eb,7b,e9,ac),
	HX_("get_UP_P",b5,e5,26,b8),
	HX_("get_LEFT_P",a1,e2,d1,3c),
	HX_("get_RIGHT_P",e4,5d,32,19),
	HX_("get_DOWN_P",bc,df,30,d7),
	HX_("get_UP_R",b7,e5,26,b8),
	HX_("get_LEFT_R",a3,e2,d1,3c),
	HX_("get_RIGHT_R",e6,5d,32,19),
	HX_("get_DOWN_R",be,df,30,d7),
	HX_("get_ACCEPT",d1,ae,10,ae),
	HX_("get_BACK",b0,5d,8c,ab),
	HX_("get_PAUSE",2d,6b,ef,7e),
	HX_("get_RESET",06,de,5f,a8),
	HX_("get_CHEAT",4a,2b,4e,07),
	HX_("get_L1",ae,d9,2f,a3),
	HX_("get_L1_P",3f,74,1c,b2),
	HX_("get_L1_R",41,74,1c,b2),
	HX_("get_D1",b6,d2,2f,a3),
	HX_("get_D1_P",47,bf,d2,ac),
	HX_("get_D1_R",49,bf,d2,ac),
	HX_("get_R1",e8,de,2f,a3),
	HX_("get_R1_P",f9,bb,13,b6),
	HX_("get_R1_R",fb,bb,13,b6),
	HX_("get_L2",af,d9,2f,a3),
	HX_("get_L2_P",80,36,1d,b2),
	HX_("get_L2_R",82,36,1d,b2),
	HX_("get_U1",85,e1,2f,a3),
	HX_("get_U1_P",d6,5f,0f,b8),
	HX_("get_U1_R",d8,5f,0f,b8),
	HX_("get_R2",e9,de,2f,a3),
	HX_("get_R2_P",3a,7e,14,b6),
	HX_("get_R2_R",3c,7e,14,b6),
	HX_("get_N0",6b,db,2f,a3),
	HX_("get_N1",6c,db,2f,a3),
	HX_("get_N2",6d,db,2f,a3),
	HX_("get_N3",6e,db,2f,a3),
	HX_("get_N4",6f,db,2f,a3),
	HX_("get_N5",70,db,2f,a3),
	HX_("get_N6",71,db,2f,a3),
	HX_("get_N7",72,db,2f,a3),
	HX_("get_N8",73,db,2f,a3),
	HX_("get_N0_P",3c,1f,6e,b3),
	HX_("get_N1_P",7d,e1,6e,b3),
	HX_("get_N2_P",be,a3,6f,b3),
	HX_("get_N3_P",ff,65,70,b3),
	HX_("get_N4_P",40,28,71,b3),
	HX_("get_N5_P",81,ea,71,b3),
	HX_("get_N6_P",c2,ac,72,b3),
	HX_("get_N7_P",03,6f,73,b3),
	HX_("get_N8_P",44,31,74,b3),
	HX_("get_N0_R",3e,1f,6e,b3),
	HX_("get_N1_R",7f,e1,6e,b3),
	HX_("get_N2_R",c0,a3,6f,b3),
	HX_("get_N3_R",01,66,70,b3),
	HX_("get_N4_R",42,28,71,b3),
	HX_("get_N5_R",83,ea,71,b3),
	HX_("get_N6_R",c4,ac,72,b3),
	HX_("get_N7_R",05,6f,73,b3),
	HX_("get_N8_R",46,31,74,b3),
	HX_("update",09,86,05,87),
	HX_("checkByName",aa,fe,5f,f0),
	HX_("getDialogueName",39,8d,0f,32),
	HX_("getDialogueNameFromToken",b6,d0,32,d3),
	HX_("getActionFromControl",87,31,3f,3d),
	HX_("forEachBound",34,ae,22,2f),
	HX_("replaceBinding",71,99,ae,a4),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyTo",90,1c,33,c9),
	HX_("mergeKeyboardScheme",04,51,83,14),
	HX_("bindKeys",51,26,d1,b4),
	HX_("unbindKeys",aa,0d,95,3a),
	HX_("setKeyboardScheme",6e,4f,d6,5b),
	HX_("removeKeyboard",0b,f9,7f,32),
	HX_("addGamepad",80,0c,10,f1),
	HX_("addGamepadLiteral",cf,54,ef,a8),
	HX_("removeGamepad",bd,3c,40,62),
	HX_("addDefaultGamepad",e1,d7,98,02),
	HX_("bindButtons",04,66,e6,c6),
	HX_("unbindButtons",4b,dc,20,e8),
	HX_("getInputsFor",ea,35,e1,37),
	HX_("removeDevice",fa,77,a5,e0),
	::String(null()) };

::hx::Class Controls_obj::__mClass;

static ::String Controls_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("addKeys",b5,24,44,83),
	HX_("removeKeys",58,1c,26,c4),
	HX_("addButtons",20,7e,ff,31),
	HX_("removeButtons",5d,ae,2f,a3),
	HX_("isDevice",20,78,e1,c9),
	HX_("isGamepad",d7,5d,84,8d),
	::String(null())
};

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Controls",96,42,6e,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Controls_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Controls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

